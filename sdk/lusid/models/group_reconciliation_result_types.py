# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.242
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class GroupReconciliationResultTypes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'count_match': 'int',
        'link_matches': 'Link',
        'count_partial_match': 'int',
        'link_partial_matches': 'Link',
        'count_break': 'int',
        'link_breaks': 'Link',
        'count_not_found': 'int',
        'link_not_found': 'Link'
    }

    attribute_map = {
        'count_match': 'countMatch',
        'link_matches': 'linkMatches',
        'count_partial_match': 'countPartialMatch',
        'link_partial_matches': 'linkPartialMatches',
        'count_break': 'countBreak',
        'link_breaks': 'linkBreaks',
        'count_not_found': 'countNotFound',
        'link_not_found': 'linkNotFound'
    }

    required_map = {
        'count_match': 'required',
        'link_matches': 'required',
        'count_partial_match': 'required',
        'link_partial_matches': 'required',
        'count_break': 'required',
        'link_breaks': 'required',
        'count_not_found': 'required',
        'link_not_found': 'required'
    }

    def __init__(self, count_match=None, link_matches=None, count_partial_match=None, link_partial_matches=None, count_break=None, link_breaks=None, count_not_found=None, link_not_found=None, local_vars_configuration=None):  # noqa: E501
        """GroupReconciliationResultTypes - a model defined in OpenAPI"
        
        :param count_match:  The number of comparison results of resultType \"Match\" with this instanceId and reconciliationType (required)
        :type count_match: int
        :param link_matches:  (required)
        :type link_matches: lusid.Link
        :param count_partial_match:  The number of comparison results of resultType \"PartialMatch\" with this instanceId and reconciliationType (required)
        :type count_partial_match: int
        :param link_partial_matches:  (required)
        :type link_partial_matches: lusid.Link
        :param count_break:  The number of comparison results of resultType \"Break\" with this instanceId and reconciliationType (required)
        :type count_break: int
        :param link_breaks:  (required)
        :type link_breaks: lusid.Link
        :param count_not_found:  The number of comparison results of resultType \"NotFound\" with this instanceId and reconciliationType (required)
        :type count_not_found: int
        :param link_not_found:  (required)
        :type link_not_found: lusid.Link

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._count_match = None
        self._link_matches = None
        self._count_partial_match = None
        self._link_partial_matches = None
        self._count_break = None
        self._link_breaks = None
        self._count_not_found = None
        self._link_not_found = None
        self.discriminator = None

        self.count_match = count_match
        self.link_matches = link_matches
        self.count_partial_match = count_partial_match
        self.link_partial_matches = link_partial_matches
        self.count_break = count_break
        self.link_breaks = link_breaks
        self.count_not_found = count_not_found
        self.link_not_found = link_not_found

    @property
    def count_match(self):
        """Gets the count_match of this GroupReconciliationResultTypes.  # noqa: E501

        The number of comparison results of resultType \"Match\" with this instanceId and reconciliationType  # noqa: E501

        :return: The count_match of this GroupReconciliationResultTypes.  # noqa: E501
        :rtype: int
        """
        return self._count_match

    @count_match.setter
    def count_match(self, count_match):
        """Sets the count_match of this GroupReconciliationResultTypes.

        The number of comparison results of resultType \"Match\" with this instanceId and reconciliationType  # noqa: E501

        :param count_match: The count_match of this GroupReconciliationResultTypes.  # noqa: E501
        :type count_match: int
        """
        if self.local_vars_configuration.client_side_validation and count_match is None:  # noqa: E501
            raise ValueError("Invalid value for `count_match`, must not be `None`")  # noqa: E501

        self._count_match = count_match

    @property
    def link_matches(self):
        """Gets the link_matches of this GroupReconciliationResultTypes.  # noqa: E501


        :return: The link_matches of this GroupReconciliationResultTypes.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_matches

    @link_matches.setter
    def link_matches(self, link_matches):
        """Sets the link_matches of this GroupReconciliationResultTypes.


        :param link_matches: The link_matches of this GroupReconciliationResultTypes.  # noqa: E501
        :type link_matches: lusid.Link
        """
        if self.local_vars_configuration.client_side_validation and link_matches is None:  # noqa: E501
            raise ValueError("Invalid value for `link_matches`, must not be `None`")  # noqa: E501

        self._link_matches = link_matches

    @property
    def count_partial_match(self):
        """Gets the count_partial_match of this GroupReconciliationResultTypes.  # noqa: E501

        The number of comparison results of resultType \"PartialMatch\" with this instanceId and reconciliationType  # noqa: E501

        :return: The count_partial_match of this GroupReconciliationResultTypes.  # noqa: E501
        :rtype: int
        """
        return self._count_partial_match

    @count_partial_match.setter
    def count_partial_match(self, count_partial_match):
        """Sets the count_partial_match of this GroupReconciliationResultTypes.

        The number of comparison results of resultType \"PartialMatch\" with this instanceId and reconciliationType  # noqa: E501

        :param count_partial_match: The count_partial_match of this GroupReconciliationResultTypes.  # noqa: E501
        :type count_partial_match: int
        """
        if self.local_vars_configuration.client_side_validation and count_partial_match is None:  # noqa: E501
            raise ValueError("Invalid value for `count_partial_match`, must not be `None`")  # noqa: E501

        self._count_partial_match = count_partial_match

    @property
    def link_partial_matches(self):
        """Gets the link_partial_matches of this GroupReconciliationResultTypes.  # noqa: E501


        :return: The link_partial_matches of this GroupReconciliationResultTypes.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_partial_matches

    @link_partial_matches.setter
    def link_partial_matches(self, link_partial_matches):
        """Sets the link_partial_matches of this GroupReconciliationResultTypes.


        :param link_partial_matches: The link_partial_matches of this GroupReconciliationResultTypes.  # noqa: E501
        :type link_partial_matches: lusid.Link
        """
        if self.local_vars_configuration.client_side_validation and link_partial_matches is None:  # noqa: E501
            raise ValueError("Invalid value for `link_partial_matches`, must not be `None`")  # noqa: E501

        self._link_partial_matches = link_partial_matches

    @property
    def count_break(self):
        """Gets the count_break of this GroupReconciliationResultTypes.  # noqa: E501

        The number of comparison results of resultType \"Break\" with this instanceId and reconciliationType  # noqa: E501

        :return: The count_break of this GroupReconciliationResultTypes.  # noqa: E501
        :rtype: int
        """
        return self._count_break

    @count_break.setter
    def count_break(self, count_break):
        """Sets the count_break of this GroupReconciliationResultTypes.

        The number of comparison results of resultType \"Break\" with this instanceId and reconciliationType  # noqa: E501

        :param count_break: The count_break of this GroupReconciliationResultTypes.  # noqa: E501
        :type count_break: int
        """
        if self.local_vars_configuration.client_side_validation and count_break is None:  # noqa: E501
            raise ValueError("Invalid value for `count_break`, must not be `None`")  # noqa: E501

        self._count_break = count_break

    @property
    def link_breaks(self):
        """Gets the link_breaks of this GroupReconciliationResultTypes.  # noqa: E501


        :return: The link_breaks of this GroupReconciliationResultTypes.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_breaks

    @link_breaks.setter
    def link_breaks(self, link_breaks):
        """Sets the link_breaks of this GroupReconciliationResultTypes.


        :param link_breaks: The link_breaks of this GroupReconciliationResultTypes.  # noqa: E501
        :type link_breaks: lusid.Link
        """
        if self.local_vars_configuration.client_side_validation and link_breaks is None:  # noqa: E501
            raise ValueError("Invalid value for `link_breaks`, must not be `None`")  # noqa: E501

        self._link_breaks = link_breaks

    @property
    def count_not_found(self):
        """Gets the count_not_found of this GroupReconciliationResultTypes.  # noqa: E501

        The number of comparison results of resultType \"NotFound\" with this instanceId and reconciliationType  # noqa: E501

        :return: The count_not_found of this GroupReconciliationResultTypes.  # noqa: E501
        :rtype: int
        """
        return self._count_not_found

    @count_not_found.setter
    def count_not_found(self, count_not_found):
        """Sets the count_not_found of this GroupReconciliationResultTypes.

        The number of comparison results of resultType \"NotFound\" with this instanceId and reconciliationType  # noqa: E501

        :param count_not_found: The count_not_found of this GroupReconciliationResultTypes.  # noqa: E501
        :type count_not_found: int
        """
        if self.local_vars_configuration.client_side_validation and count_not_found is None:  # noqa: E501
            raise ValueError("Invalid value for `count_not_found`, must not be `None`")  # noqa: E501

        self._count_not_found = count_not_found

    @property
    def link_not_found(self):
        """Gets the link_not_found of this GroupReconciliationResultTypes.  # noqa: E501


        :return: The link_not_found of this GroupReconciliationResultTypes.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_not_found

    @link_not_found.setter
    def link_not_found(self, link_not_found):
        """Sets the link_not_found of this GroupReconciliationResultTypes.


        :param link_not_found: The link_not_found of this GroupReconciliationResultTypes.  # noqa: E501
        :type link_not_found: lusid.Link
        """
        if self.local_vars_configuration.client_side_validation and link_not_found is None:  # noqa: E501
            raise ValueError("Invalid value for `link_not_found`, must not be `None`")  # noqa: E501

        self._link_not_found = link_not_found

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupReconciliationResultTypes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupReconciliationResultTypes):
            return True

        return self.to_dict() != other.to_dict()
