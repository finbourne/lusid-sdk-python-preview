# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.170
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class ComplianceTemplateVariationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'label': 'str',
        'description': 'str',
        'outcome_description': 'str',
        'referenced_group_label': 'str',
        'steps': 'list[ComplianceStepRequest]'
    }

    attribute_map = {
        'label': 'label',
        'description': 'description',
        'outcome_description': 'outcomeDescription',
        'referenced_group_label': 'referencedGroupLabel',
        'steps': 'steps'
    }

    required_map = {
        'label': 'required',
        'description': 'required',
        'outcome_description': 'optional',
        'referenced_group_label': 'optional',
        'steps': 'required'
    }

    def __init__(self, label=None, description=None, outcome_description=None, referenced_group_label=None, steps=None, local_vars_configuration=None):  # noqa: E501
        """ComplianceTemplateVariationRequest - a model defined in OpenAPI"
        
        :param label:  (required)
        :type label: str
        :param description:  (required)
        :type description: str
        :param outcome_description: 
        :type outcome_description: str
        :param referenced_group_label: 
        :type referenced_group_label: str
        :param steps:  (required)
        :type steps: list[lusid.ComplianceStepRequest]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._label = None
        self._description = None
        self._outcome_description = None
        self._referenced_group_label = None
        self._steps = None
        self.discriminator = None

        self.label = label
        self.description = description
        self.outcome_description = outcome_description
        self.referenced_group_label = referenced_group_label
        self.steps = steps

    @property
    def label(self):
        """Gets the label of this ComplianceTemplateVariationRequest.  # noqa: E501


        :return: The label of this ComplianceTemplateVariationRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ComplianceTemplateVariationRequest.


        :param label: The label of this ComplianceTemplateVariationRequest.  # noqa: E501
        :type label: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                label is not None and len(label) > 64):
            raise ValueError("Invalid value for `label`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                label is not None and len(label) < 1):
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `1`")  # noqa: E501

        self._label = label

    @property
    def description(self):
        """Gets the description of this ComplianceTemplateVariationRequest.  # noqa: E501


        :return: The description of this ComplianceTemplateVariationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComplianceTemplateVariationRequest.


        :param description: The description of this ComplianceTemplateVariationRequest.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 1024):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and not re.search(r'^[\s\S]*$', description)):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/^[\s\S]*$/`")  # noqa: E501

        self._description = description

    @property
    def outcome_description(self):
        """Gets the outcome_description of this ComplianceTemplateVariationRequest.  # noqa: E501


        :return: The outcome_description of this ComplianceTemplateVariationRequest.  # noqa: E501
        :rtype: str
        """
        return self._outcome_description

    @outcome_description.setter
    def outcome_description(self, outcome_description):
        """Sets the outcome_description of this ComplianceTemplateVariationRequest.


        :param outcome_description: The outcome_description of this ComplianceTemplateVariationRequest.  # noqa: E501
        :type outcome_description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                outcome_description is not None and len(outcome_description) > 1024):
            raise ValueError("Invalid value for `outcome_description`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                outcome_description is not None and len(outcome_description) < 0):
            raise ValueError("Invalid value for `outcome_description`, length must be greater than or equal to `0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                outcome_description is not None and not re.search(r'^[\s\S]*$', outcome_description)):  # noqa: E501
            raise ValueError(r"Invalid value for `outcome_description`, must be a follow pattern or equal to `/^[\s\S]*$/`")  # noqa: E501

        self._outcome_description = outcome_description

    @property
    def referenced_group_label(self):
        """Gets the referenced_group_label of this ComplianceTemplateVariationRequest.  # noqa: E501


        :return: The referenced_group_label of this ComplianceTemplateVariationRequest.  # noqa: E501
        :rtype: str
        """
        return self._referenced_group_label

    @referenced_group_label.setter
    def referenced_group_label(self, referenced_group_label):
        """Sets the referenced_group_label of this ComplianceTemplateVariationRequest.


        :param referenced_group_label: The referenced_group_label of this ComplianceTemplateVariationRequest.  # noqa: E501
        :type referenced_group_label: str
        """
        if (self.local_vars_configuration.client_side_validation and
                referenced_group_label is not None and len(referenced_group_label) > 64):
            raise ValueError("Invalid value for `referenced_group_label`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                referenced_group_label is not None and len(referenced_group_label) < 1):
            raise ValueError("Invalid value for `referenced_group_label`, length must be greater than or equal to `1`")  # noqa: E501

        self._referenced_group_label = referenced_group_label

    @property
    def steps(self):
        """Gets the steps of this ComplianceTemplateVariationRequest.  # noqa: E501


        :return: The steps of this ComplianceTemplateVariationRequest.  # noqa: E501
        :rtype: list[lusid.ComplianceStepRequest]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ComplianceTemplateVariationRequest.


        :param steps: The steps of this ComplianceTemplateVariationRequest.  # noqa: E501
        :type steps: list[lusid.ComplianceStepRequest]
        """
        if self.local_vars_configuration.client_side_validation and steps is None:  # noqa: E501
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceTemplateVariationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComplianceTemplateVariationRequest):
            return True

        return self.to_dict() != other.to_dict()
