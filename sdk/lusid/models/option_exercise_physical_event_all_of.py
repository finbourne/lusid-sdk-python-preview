# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.245
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class OptionExercisePhysicalEventAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'exercise_date': 'datetime',
        'exercise_type': 'str',
        'maturity_date': 'datetime',
        'moneyness': 'str',
        'new_instrument': 'NewInstrument',
        'option_exercise_elections': 'list[OptionExerciseElection]',
        'option_type': 'str',
        'start_date': 'datetime',
        'strike_currency': 'str',
        'strike_per_unit': 'float',
        'underlying_value_per_unit': 'float',
        'units_ratio': 'UnitsRatio',
        'instrument_event_type': 'str'
    }

    attribute_map = {
        'exercise_date': 'exerciseDate',
        'exercise_type': 'exerciseType',
        'maturity_date': 'maturityDate',
        'moneyness': 'moneyness',
        'new_instrument': 'newInstrument',
        'option_exercise_elections': 'optionExerciseElections',
        'option_type': 'optionType',
        'start_date': 'startDate',
        'strike_currency': 'strikeCurrency',
        'strike_per_unit': 'strikePerUnit',
        'underlying_value_per_unit': 'underlyingValuePerUnit',
        'units_ratio': 'unitsRatio',
        'instrument_event_type': 'instrumentEventType'
    }

    required_map = {
        'exercise_date': 'optional',
        'exercise_type': 'required',
        'maturity_date': 'required',
        'moneyness': 'optional',
        'new_instrument': 'required',
        'option_exercise_elections': 'optional',
        'option_type': 'required',
        'start_date': 'required',
        'strike_currency': 'required',
        'strike_per_unit': 'required',
        'underlying_value_per_unit': 'optional',
        'units_ratio': 'required',
        'instrument_event_type': 'required'
    }

    def __init__(self, exercise_date=None, exercise_type=None, maturity_date=None, moneyness=None, new_instrument=None, option_exercise_elections=None, option_type=None, start_date=None, strike_currency=None, strike_per_unit=None, underlying_value_per_unit=None, units_ratio=None, instrument_event_type=None, local_vars_configuration=None):  # noqa: E501
        """OptionExercisePhysicalEventAllOf - a model defined in OpenAPI"
        
        :param exercise_date:  The exercise date of the option.
        :type exercise_date: datetime
        :param exercise_type:  The optionality type of the underlying option e.g. American, European.    Supported string (enumeration) values are: [European, Bermudan, American]. (required)
        :type exercise_type: str
        :param maturity_date:  The maturity date of the option. (required)
        :type maturity_date: datetime
        :param moneyness:  The moneyness of the option e.g. InTheMoney, OutOfTheMoney.    Supported string (enumeration) values are: [InTheMoney, OutOfTheMoney, AtTheMoney].
        :type moneyness: str
        :param new_instrument:  (required)
        :type new_instrument: lusid.NewInstrument
        :param option_exercise_elections:  Option exercise election for this OptionExercisePhysicalEvent.
        :type option_exercise_elections: list[lusid.OptionExerciseElection]
        :param option_type:  Type of optionality that is present e.g. call, put.    Supported string (enumeration) values are: [Call, Put]. (required)
        :type option_type: str
        :param start_date:  The trade date of the option. (required)
        :type start_date: datetime
        :param strike_currency:  The strike currency of the equity option. (required)
        :type strike_currency: str
        :param strike_per_unit:  The strike of the equity option times the number of shares to exchange if exercised. (required)
        :type strike_per_unit: float
        :param underlying_value_per_unit:  The underlying price times the number of shares to exchange if exercised.
        :type underlying_value_per_unit: float
        :param units_ratio:  (required)
        :type units_ratio: lusid.UnitsRatio
        :param instrument_event_type:  The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, ProtectionPayoutCashFlowEvent (required)
        :type instrument_event_type: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._exercise_date = None
        self._exercise_type = None
        self._maturity_date = None
        self._moneyness = None
        self._new_instrument = None
        self._option_exercise_elections = None
        self._option_type = None
        self._start_date = None
        self._strike_currency = None
        self._strike_per_unit = None
        self._underlying_value_per_unit = None
        self._units_ratio = None
        self._instrument_event_type = None
        self.discriminator = None

        self.exercise_date = exercise_date
        self.exercise_type = exercise_type
        self.maturity_date = maturity_date
        self.moneyness = moneyness
        self.new_instrument = new_instrument
        self.option_exercise_elections = option_exercise_elections
        self.option_type = option_type
        self.start_date = start_date
        self.strike_currency = strike_currency
        self.strike_per_unit = strike_per_unit
        self.underlying_value_per_unit = underlying_value_per_unit
        self.units_ratio = units_ratio
        self.instrument_event_type = instrument_event_type

    @property
    def exercise_date(self):
        """Gets the exercise_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The exercise date of the option.  # noqa: E501

        :return: The exercise_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._exercise_date

    @exercise_date.setter
    def exercise_date(self, exercise_date):
        """Sets the exercise_date of this OptionExercisePhysicalEventAllOf.

        The exercise date of the option.  # noqa: E501

        :param exercise_date: The exercise_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type exercise_date: datetime
        """

        self._exercise_date = exercise_date

    @property
    def exercise_type(self):
        """Gets the exercise_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The optionality type of the underlying option e.g. American, European.    Supported string (enumeration) values are: [European, Bermudan, American].  # noqa: E501

        :return: The exercise_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._exercise_type

    @exercise_type.setter
    def exercise_type(self, exercise_type):
        """Sets the exercise_type of this OptionExercisePhysicalEventAllOf.

        The optionality type of the underlying option e.g. American, European.    Supported string (enumeration) values are: [European, Bermudan, American].  # noqa: E501

        :param exercise_type: The exercise_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type exercise_type: str
        """
        if self.local_vars_configuration.client_side_validation and exercise_type is None:  # noqa: E501
            raise ValueError("Invalid value for `exercise_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                exercise_type is not None and len(exercise_type) < 1):
            raise ValueError("Invalid value for `exercise_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._exercise_type = exercise_type

    @property
    def maturity_date(self):
        """Gets the maturity_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The maturity date of the option.  # noqa: E501

        :return: The maturity_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this OptionExercisePhysicalEventAllOf.

        The maturity date of the option.  # noqa: E501

        :param maturity_date: The maturity_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type maturity_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and maturity_date is None:  # noqa: E501
            raise ValueError("Invalid value for `maturity_date`, must not be `None`")  # noqa: E501

        self._maturity_date = maturity_date

    @property
    def moneyness(self):
        """Gets the moneyness of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The moneyness of the option e.g. InTheMoney, OutOfTheMoney.    Supported string (enumeration) values are: [InTheMoney, OutOfTheMoney, AtTheMoney].  # noqa: E501

        :return: The moneyness of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._moneyness

    @moneyness.setter
    def moneyness(self, moneyness):
        """Sets the moneyness of this OptionExercisePhysicalEventAllOf.

        The moneyness of the option e.g. InTheMoney, OutOfTheMoney.    Supported string (enumeration) values are: [InTheMoney, OutOfTheMoney, AtTheMoney].  # noqa: E501

        :param moneyness: The moneyness of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type moneyness: str
        """

        self._moneyness = moneyness

    @property
    def new_instrument(self):
        """Gets the new_instrument of this OptionExercisePhysicalEventAllOf.  # noqa: E501


        :return: The new_instrument of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: lusid.NewInstrument
        """
        return self._new_instrument

    @new_instrument.setter
    def new_instrument(self, new_instrument):
        """Sets the new_instrument of this OptionExercisePhysicalEventAllOf.


        :param new_instrument: The new_instrument of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type new_instrument: lusid.NewInstrument
        """
        if self.local_vars_configuration.client_side_validation and new_instrument is None:  # noqa: E501
            raise ValueError("Invalid value for `new_instrument`, must not be `None`")  # noqa: E501

        self._new_instrument = new_instrument

    @property
    def option_exercise_elections(self):
        """Gets the option_exercise_elections of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        Option exercise election for this OptionExercisePhysicalEvent.  # noqa: E501

        :return: The option_exercise_elections of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: list[lusid.OptionExerciseElection]
        """
        return self._option_exercise_elections

    @option_exercise_elections.setter
    def option_exercise_elections(self, option_exercise_elections):
        """Sets the option_exercise_elections of this OptionExercisePhysicalEventAllOf.

        Option exercise election for this OptionExercisePhysicalEvent.  # noqa: E501

        :param option_exercise_elections: The option_exercise_elections of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type option_exercise_elections: list[lusid.OptionExerciseElection]
        """

        self._option_exercise_elections = option_exercise_elections

    @property
    def option_type(self):
        """Gets the option_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        Type of optionality that is present e.g. call, put.    Supported string (enumeration) values are: [Call, Put].  # noqa: E501

        :return: The option_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this OptionExercisePhysicalEventAllOf.

        Type of optionality that is present e.g. call, put.    Supported string (enumeration) values are: [Call, Put].  # noqa: E501

        :param option_type: The option_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type option_type: str
        """
        if self.local_vars_configuration.client_side_validation and option_type is None:  # noqa: E501
            raise ValueError("Invalid value for `option_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                option_type is not None and len(option_type) < 1):
            raise ValueError("Invalid value for `option_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._option_type = option_type

    @property
    def start_date(self):
        """Gets the start_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The trade date of the option.  # noqa: E501

        :return: The start_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this OptionExercisePhysicalEventAllOf.

        The trade date of the option.  # noqa: E501

        :param start_date: The start_date of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type start_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and start_date is None:  # noqa: E501
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def strike_currency(self):
        """Gets the strike_currency of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The strike currency of the equity option.  # noqa: E501

        :return: The strike_currency of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._strike_currency

    @strike_currency.setter
    def strike_currency(self, strike_currency):
        """Sets the strike_currency of this OptionExercisePhysicalEventAllOf.

        The strike currency of the equity option.  # noqa: E501

        :param strike_currency: The strike_currency of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type strike_currency: str
        """
        if self.local_vars_configuration.client_side_validation and strike_currency is None:  # noqa: E501
            raise ValueError("Invalid value for `strike_currency`, must not be `None`")  # noqa: E501

        self._strike_currency = strike_currency

    @property
    def strike_per_unit(self):
        """Gets the strike_per_unit of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The strike of the equity option times the number of shares to exchange if exercised.  # noqa: E501

        :return: The strike_per_unit of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: float
        """
        return self._strike_per_unit

    @strike_per_unit.setter
    def strike_per_unit(self, strike_per_unit):
        """Sets the strike_per_unit of this OptionExercisePhysicalEventAllOf.

        The strike of the equity option times the number of shares to exchange if exercised.  # noqa: E501

        :param strike_per_unit: The strike_per_unit of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type strike_per_unit: float
        """
        if self.local_vars_configuration.client_side_validation and strike_per_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `strike_per_unit`, must not be `None`")  # noqa: E501

        self._strike_per_unit = strike_per_unit

    @property
    def underlying_value_per_unit(self):
        """Gets the underlying_value_per_unit of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The underlying price times the number of shares to exchange if exercised.  # noqa: E501

        :return: The underlying_value_per_unit of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: float
        """
        return self._underlying_value_per_unit

    @underlying_value_per_unit.setter
    def underlying_value_per_unit(self, underlying_value_per_unit):
        """Sets the underlying_value_per_unit of this OptionExercisePhysicalEventAllOf.

        The underlying price times the number of shares to exchange if exercised.  # noqa: E501

        :param underlying_value_per_unit: The underlying_value_per_unit of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type underlying_value_per_unit: float
        """

        self._underlying_value_per_unit = underlying_value_per_unit

    @property
    def units_ratio(self):
        """Gets the units_ratio of this OptionExercisePhysicalEventAllOf.  # noqa: E501


        :return: The units_ratio of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: lusid.UnitsRatio
        """
        return self._units_ratio

    @units_ratio.setter
    def units_ratio(self, units_ratio):
        """Sets the units_ratio of this OptionExercisePhysicalEventAllOf.


        :param units_ratio: The units_ratio of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type units_ratio: lusid.UnitsRatio
        """
        if self.local_vars_configuration.client_side_validation and units_ratio is None:  # noqa: E501
            raise ValueError("Invalid value for `units_ratio`, must not be `None`")  # noqa: E501

        self._units_ratio = units_ratio

    @property
    def instrument_event_type(self):
        """Gets the instrument_event_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501

        The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, ProtectionPayoutCashFlowEvent  # noqa: E501

        :return: The instrument_event_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._instrument_event_type

    @instrument_event_type.setter
    def instrument_event_type(self, instrument_event_type):
        """Sets the instrument_event_type of this OptionExercisePhysicalEventAllOf.

        The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent, OptionExercisePhysicalEvent, ProtectionPayoutCashFlowEvent  # noqa: E501

        :param instrument_event_type: The instrument_event_type of this OptionExercisePhysicalEventAllOf.  # noqa: E501
        :type instrument_event_type: str
        """
        if self.local_vars_configuration.client_side_validation and instrument_event_type is None:  # noqa: E501
            raise ValueError("Invalid value for `instrument_event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["TransitionEvent", "InformationalEvent", "OpenEvent", "CloseEvent", "StockSplitEvent", "BondDefaultEvent", "CashDividendEvent", "AmortisationEvent", "CashFlowEvent", "ExerciseEvent", "ResetEvent", "TriggerEvent", "RawVendorEvent", "InformationalErrorEvent", "BondCouponEvent", "DividendReinvestmentEvent", "AccumulationEvent", "BondPrincipalEvent", "DividendOptionEvent", "MaturityEvent", "FxForwardSettlementEvent", "ExpiryEvent", "ScripDividendEvent", "StockDividendEvent", "ReverseStockSplitEvent", "CapitalDistributionEvent", "SpinOffEvent", "MergerEvent", "FutureExpiryEvent", "SwapCashFlowEvent", "SwapPrincipalEvent", "CreditPremiumCashFlowEvent", "CdsCreditEvent", "CdxCreditEvent", "MbsCouponEvent", "MbsPrincipalEvent", "BonusIssueEvent", "MbsPrincipalWriteOffEvent", "MbsInterestDeferralEvent", "MbsInterestShortfallEvent", "TenderEvent", "CallOnIntermediateSecuritiesEvent", "IntermediateSecuritiesDistributionEvent", "OptionExercisePhysicalEvent", "ProtectionPayoutCashFlowEvent"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and instrument_event_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `instrument_event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument_event_type, allowed_values)
            )

        self._instrument_event_type = instrument_event_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptionExercisePhysicalEventAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptionExercisePhysicalEventAllOf):
            return True

        return self.to_dict() != other.to_dict()
