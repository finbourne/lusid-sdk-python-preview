# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.243
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class GroupReconciliationDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'id': 'ResourceId',
        'display_name': 'str',
        'description': 'str',
        'portfolio_entity_ids': 'GroupReconciliationDefinitionPortfolioEntityIds',
        'recipe_ids': 'GroupReconciliationDefinitionRecipeIds',
        'currencies': 'GroupReconciliationDefinitionCurrencies',
        'transaction_date_windows': 'TransactionDateWindows',
        'comparison_ruleset_ids': 'GroupReconciliationDefinitionComparisonRulesetIds',
        'break_code_source': 'BreakCodeSource',
        'href': 'str',
        'version': 'Version'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'displayName',
        'description': 'description',
        'portfolio_entity_ids': 'portfolioEntityIds',
        'recipe_ids': 'recipeIds',
        'currencies': 'currencies',
        'transaction_date_windows': 'transactionDateWindows',
        'comparison_ruleset_ids': 'comparisonRulesetIds',
        'break_code_source': 'breakCodeSource',
        'href': 'href',
        'version': 'version'
    }

    required_map = {
        'id': 'optional',
        'display_name': 'optional',
        'description': 'optional',
        'portfolio_entity_ids': 'optional',
        'recipe_ids': 'optional',
        'currencies': 'optional',
        'transaction_date_windows': 'optional',
        'comparison_ruleset_ids': 'optional',
        'break_code_source': 'optional',
        'href': 'optional',
        'version': 'optional'
    }

    def __init__(self, id=None, display_name=None, description=None, portfolio_entity_ids=None, recipe_ids=None, currencies=None, transaction_date_windows=None, comparison_ruleset_ids=None, break_code_source=None, href=None, version=None, local_vars_configuration=None):  # noqa: E501
        """GroupReconciliationDefinition - a model defined in OpenAPI"
        
        :param id: 
        :type id: lusid.ResourceId
        :param display_name:  The name of the Group Reconciliation Definition
        :type display_name: str
        :param description:  The description of the Group Reconciliation Definition
        :type description: str
        :param portfolio_entity_ids: 
        :type portfolio_entity_ids: lusid.GroupReconciliationDefinitionPortfolioEntityIds
        :param recipe_ids: 
        :type recipe_ids: lusid.GroupReconciliationDefinitionRecipeIds
        :param currencies: 
        :type currencies: lusid.GroupReconciliationDefinitionCurrencies
        :param transaction_date_windows: 
        :type transaction_date_windows: lusid.TransactionDateWindows
        :param comparison_ruleset_ids: 
        :type comparison_ruleset_ids: lusid.GroupReconciliationDefinitionComparisonRulesetIds
        :param break_code_source: 
        :type break_code_source: lusid.BreakCodeSource
        :param href:  The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        :type href: str
        :param version: 
        :type version: lusid.Version

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._display_name = None
        self._description = None
        self._portfolio_entity_ids = None
        self._recipe_ids = None
        self._currencies = None
        self._transaction_date_windows = None
        self._comparison_ruleset_ids = None
        self._break_code_source = None
        self._href = None
        self._version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.display_name = display_name
        self.description = description
        if portfolio_entity_ids is not None:
            self.portfolio_entity_ids = portfolio_entity_ids
        if recipe_ids is not None:
            self.recipe_ids = recipe_ids
        if currencies is not None:
            self.currencies = currencies
        if transaction_date_windows is not None:
            self.transaction_date_windows = transaction_date_windows
        if comparison_ruleset_ids is not None:
            self.comparison_ruleset_ids = comparison_ruleset_ids
        if break_code_source is not None:
            self.break_code_source = break_code_source
        self.href = href
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this GroupReconciliationDefinition.  # noqa: E501


        :return: The id of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupReconciliationDefinition.


        :param id: The id of this GroupReconciliationDefinition.  # noqa: E501
        :type id: lusid.ResourceId
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this GroupReconciliationDefinition.  # noqa: E501

        The name of the Group Reconciliation Definition  # noqa: E501

        :return: The display_name of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GroupReconciliationDefinition.

        The name of the Group Reconciliation Definition  # noqa: E501

        :param display_name: The display_name of this GroupReconciliationDefinition.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this GroupReconciliationDefinition.  # noqa: E501

        The description of the Group Reconciliation Definition  # noqa: E501

        :return: The description of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupReconciliationDefinition.

        The description of the Group Reconciliation Definition  # noqa: E501

        :param description: The description of this GroupReconciliationDefinition.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def portfolio_entity_ids(self):
        """Gets the portfolio_entity_ids of this GroupReconciliationDefinition.  # noqa: E501


        :return: The portfolio_entity_ids of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: lusid.GroupReconciliationDefinitionPortfolioEntityIds
        """
        return self._portfolio_entity_ids

    @portfolio_entity_ids.setter
    def portfolio_entity_ids(self, portfolio_entity_ids):
        """Sets the portfolio_entity_ids of this GroupReconciliationDefinition.


        :param portfolio_entity_ids: The portfolio_entity_ids of this GroupReconciliationDefinition.  # noqa: E501
        :type portfolio_entity_ids: lusid.GroupReconciliationDefinitionPortfolioEntityIds
        """

        self._portfolio_entity_ids = portfolio_entity_ids

    @property
    def recipe_ids(self):
        """Gets the recipe_ids of this GroupReconciliationDefinition.  # noqa: E501


        :return: The recipe_ids of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: lusid.GroupReconciliationDefinitionRecipeIds
        """
        return self._recipe_ids

    @recipe_ids.setter
    def recipe_ids(self, recipe_ids):
        """Sets the recipe_ids of this GroupReconciliationDefinition.


        :param recipe_ids: The recipe_ids of this GroupReconciliationDefinition.  # noqa: E501
        :type recipe_ids: lusid.GroupReconciliationDefinitionRecipeIds
        """

        self._recipe_ids = recipe_ids

    @property
    def currencies(self):
        """Gets the currencies of this GroupReconciliationDefinition.  # noqa: E501


        :return: The currencies of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: lusid.GroupReconciliationDefinitionCurrencies
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this GroupReconciliationDefinition.


        :param currencies: The currencies of this GroupReconciliationDefinition.  # noqa: E501
        :type currencies: lusid.GroupReconciliationDefinitionCurrencies
        """

        self._currencies = currencies

    @property
    def transaction_date_windows(self):
        """Gets the transaction_date_windows of this GroupReconciliationDefinition.  # noqa: E501


        :return: The transaction_date_windows of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: lusid.TransactionDateWindows
        """
        return self._transaction_date_windows

    @transaction_date_windows.setter
    def transaction_date_windows(self, transaction_date_windows):
        """Sets the transaction_date_windows of this GroupReconciliationDefinition.


        :param transaction_date_windows: The transaction_date_windows of this GroupReconciliationDefinition.  # noqa: E501
        :type transaction_date_windows: lusid.TransactionDateWindows
        """

        self._transaction_date_windows = transaction_date_windows

    @property
    def comparison_ruleset_ids(self):
        """Gets the comparison_ruleset_ids of this GroupReconciliationDefinition.  # noqa: E501


        :return: The comparison_ruleset_ids of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: lusid.GroupReconciliationDefinitionComparisonRulesetIds
        """
        return self._comparison_ruleset_ids

    @comparison_ruleset_ids.setter
    def comparison_ruleset_ids(self, comparison_ruleset_ids):
        """Sets the comparison_ruleset_ids of this GroupReconciliationDefinition.


        :param comparison_ruleset_ids: The comparison_ruleset_ids of this GroupReconciliationDefinition.  # noqa: E501
        :type comparison_ruleset_ids: lusid.GroupReconciliationDefinitionComparisonRulesetIds
        """

        self._comparison_ruleset_ids = comparison_ruleset_ids

    @property
    def break_code_source(self):
        """Gets the break_code_source of this GroupReconciliationDefinition.  # noqa: E501


        :return: The break_code_source of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: lusid.BreakCodeSource
        """
        return self._break_code_source

    @break_code_source.setter
    def break_code_source(self, break_code_source):
        """Sets the break_code_source of this GroupReconciliationDefinition.


        :param break_code_source: The break_code_source of this GroupReconciliationDefinition.  # noqa: E501
        :type break_code_source: lusid.BreakCodeSource
        """

        self._break_code_source = break_code_source

    @property
    def href(self):
        """Gets the href of this GroupReconciliationDefinition.  # noqa: E501

        The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.  # noqa: E501

        :return: The href of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this GroupReconciliationDefinition.

        The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.  # noqa: E501

        :param href: The href of this GroupReconciliationDefinition.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def version(self):
        """Gets the version of this GroupReconciliationDefinition.  # noqa: E501


        :return: The version of this GroupReconciliationDefinition.  # noqa: E501
        :rtype: lusid.Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GroupReconciliationDefinition.


        :param version: The version of this GroupReconciliationDefinition.  # noqa: E501
        :type version: lusid.Version
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupReconciliationDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupReconciliationDefinition):
            return True

        return self.to_dict() != other.to_dict()
