# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.245
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class BatchUpdateUserReviewForComparisonResultRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'comparison_result_id': 'str',
        'user_review_add': 'GroupReconciliationUserReviewAdd',
        'user_review_remove': 'GroupReconciliationUserReviewRemove'
    }

    attribute_map = {
        'comparison_result_id': 'comparisonResultId',
        'user_review_add': 'userReviewAdd',
        'user_review_remove': 'userReviewRemove'
    }

    required_map = {
        'comparison_result_id': 'required',
        'user_review_add': 'optional',
        'user_review_remove': 'optional'
    }

    def __init__(self, comparison_result_id=None, user_review_add=None, user_review_remove=None, local_vars_configuration=None):  # noqa: E501
        """BatchUpdateUserReviewForComparisonResultRequest - a model defined in OpenAPI"
        
        :param comparison_result_id:  Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId. (required)
        :type comparison_result_id: str
        :param user_review_add: 
        :type user_review_add: lusid.GroupReconciliationUserReviewAdd
        :param user_review_remove: 
        :type user_review_remove: lusid.GroupReconciliationUserReviewRemove

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._comparison_result_id = None
        self._user_review_add = None
        self._user_review_remove = None
        self.discriminator = None

        self.comparison_result_id = comparison_result_id
        if user_review_add is not None:
            self.user_review_add = user_review_add
        if user_review_remove is not None:
            self.user_review_remove = user_review_remove

    @property
    def comparison_result_id(self):
        """Gets the comparison_result_id of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501

        Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId.  # noqa: E501

        :return: The comparison_result_id of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501
        :rtype: str
        """
        return self._comparison_result_id

    @comparison_result_id.setter
    def comparison_result_id(self, comparison_result_id):
        """Sets the comparison_result_id of this BatchUpdateUserReviewForComparisonResultRequest.

        Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId.  # noqa: E501

        :param comparison_result_id: The comparison_result_id of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501
        :type comparison_result_id: str
        """
        if self.local_vars_configuration.client_side_validation and comparison_result_id is None:  # noqa: E501
            raise ValueError("Invalid value for `comparison_result_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                comparison_result_id is not None and len(comparison_result_id) < 1):
            raise ValueError("Invalid value for `comparison_result_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._comparison_result_id = comparison_result_id

    @property
    def user_review_add(self):
        """Gets the user_review_add of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501


        :return: The user_review_add of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501
        :rtype: lusid.GroupReconciliationUserReviewAdd
        """
        return self._user_review_add

    @user_review_add.setter
    def user_review_add(self, user_review_add):
        """Sets the user_review_add of this BatchUpdateUserReviewForComparisonResultRequest.


        :param user_review_add: The user_review_add of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501
        :type user_review_add: lusid.GroupReconciliationUserReviewAdd
        """

        self._user_review_add = user_review_add

    @property
    def user_review_remove(self):
        """Gets the user_review_remove of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501


        :return: The user_review_remove of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501
        :rtype: lusid.GroupReconciliationUserReviewRemove
        """
        return self._user_review_remove

    @user_review_remove.setter
    def user_review_remove(self, user_review_remove):
        """Sets the user_review_remove of this BatchUpdateUserReviewForComparisonResultRequest.


        :param user_review_remove: The user_review_remove of this BatchUpdateUserReviewForComparisonResultRequest.  # noqa: E501
        :type user_review_remove: lusid.GroupReconciliationUserReviewRemove
        """

        self._user_review_remove = user_review_remove

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchUpdateUserReviewForComparisonResultRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchUpdateUserReviewForComparisonResultRequest):
            return True

        return self.to_dict() != other.to_dict()
