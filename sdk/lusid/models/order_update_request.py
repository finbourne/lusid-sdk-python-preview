# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.215
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class OrderUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'id': 'ResourceId',
        'quantity': 'float',
        'portfolio_id': 'ResourceId',
        'properties': 'dict(str, PerpetualProperty)',
        'price': 'CurrencyAndAmount',
        'limit_price': 'CurrencyAndAmount',
        'stop_price': 'CurrencyAndAmount'
    }

    attribute_map = {
        'id': 'id',
        'quantity': 'quantity',
        'portfolio_id': 'portfolioId',
        'properties': 'properties',
        'price': 'price',
        'limit_price': 'limitPrice',
        'stop_price': 'stopPrice'
    }

    required_map = {
        'id': 'required',
        'quantity': 'optional',
        'portfolio_id': 'optional',
        'properties': 'optional',
        'price': 'optional',
        'limit_price': 'optional',
        'stop_price': 'optional'
    }

    def __init__(self, id=None, quantity=None, portfolio_id=None, properties=None, price=None, limit_price=None, stop_price=None, local_vars_configuration=None):  # noqa: E501
        """OrderUpdateRequest - a model defined in OpenAPI"
        
        :param id:  (required)
        :type id: lusid.ResourceId
        :param quantity:  The quantity of given instrument ordered.
        :type quantity: float
        :param portfolio_id: 
        :type portfolio_id: lusid.ResourceId
        :param properties:  Client-defined properties associated with this order.
        :type properties: dict[str, lusid.PerpetualProperty]
        :param price: 
        :type price: lusid.CurrencyAndAmount
        :param limit_price: 
        :type limit_price: lusid.CurrencyAndAmount
        :param stop_price: 
        :type stop_price: lusid.CurrencyAndAmount

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._quantity = None
        self._portfolio_id = None
        self._properties = None
        self._price = None
        self._limit_price = None
        self._stop_price = None
        self.discriminator = None

        self.id = id
        self.quantity = quantity
        if portfolio_id is not None:
            self.portfolio_id = portfolio_id
        self.properties = properties
        if price is not None:
            self.price = price
        if limit_price is not None:
            self.limit_price = limit_price
        if stop_price is not None:
            self.stop_price = stop_price

    @property
    def id(self):
        """Gets the id of this OrderUpdateRequest.  # noqa: E501


        :return: The id of this OrderUpdateRequest.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderUpdateRequest.


        :param id: The id of this OrderUpdateRequest.  # noqa: E501
        :type id: lusid.ResourceId
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this OrderUpdateRequest.  # noqa: E501

        The quantity of given instrument ordered.  # noqa: E501

        :return: The quantity of this OrderUpdateRequest.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderUpdateRequest.

        The quantity of given instrument ordered.  # noqa: E501

        :param quantity: The quantity of this OrderUpdateRequest.  # noqa: E501
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this OrderUpdateRequest.  # noqa: E501


        :return: The portfolio_id of this OrderUpdateRequest.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this OrderUpdateRequest.


        :param portfolio_id: The portfolio_id of this OrderUpdateRequest.  # noqa: E501
        :type portfolio_id: lusid.ResourceId
        """

        self._portfolio_id = portfolio_id

    @property
    def properties(self):
        """Gets the properties of this OrderUpdateRequest.  # noqa: E501

        Client-defined properties associated with this order.  # noqa: E501

        :return: The properties of this OrderUpdateRequest.  # noqa: E501
        :rtype: dict[str, lusid.PerpetualProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this OrderUpdateRequest.

        Client-defined properties associated with this order.  # noqa: E501

        :param properties: The properties of this OrderUpdateRequest.  # noqa: E501
        :type properties: dict[str, lusid.PerpetualProperty]
        """

        self._properties = properties

    @property
    def price(self):
        """Gets the price of this OrderUpdateRequest.  # noqa: E501


        :return: The price of this OrderUpdateRequest.  # noqa: E501
        :rtype: lusid.CurrencyAndAmount
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderUpdateRequest.


        :param price: The price of this OrderUpdateRequest.  # noqa: E501
        :type price: lusid.CurrencyAndAmount
        """

        self._price = price

    @property
    def limit_price(self):
        """Gets the limit_price of this OrderUpdateRequest.  # noqa: E501


        :return: The limit_price of this OrderUpdateRequest.  # noqa: E501
        :rtype: lusid.CurrencyAndAmount
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this OrderUpdateRequest.


        :param limit_price: The limit_price of this OrderUpdateRequest.  # noqa: E501
        :type limit_price: lusid.CurrencyAndAmount
        """

        self._limit_price = limit_price

    @property
    def stop_price(self):
        """Gets the stop_price of this OrderUpdateRequest.  # noqa: E501


        :return: The stop_price of this OrderUpdateRequest.  # noqa: E501
        :rtype: lusid.CurrencyAndAmount
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this OrderUpdateRequest.


        :param stop_price: The stop_price of this OrderUpdateRequest.  # noqa: E501
        :type stop_price: lusid.CurrencyAndAmount
        """

        self._stop_price = stop_price

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderUpdateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderUpdateRequest):
            return True

        return self.to_dict() != other.to_dict()
