# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.216
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class PlacementUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'id': 'ResourceId',
        'quantity': 'float',
        'properties': 'dict(str, PerpetualProperty)',
        'counterparty': 'str',
        'execution_system': 'str',
        'entry_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'quantity': 'quantity',
        'properties': 'properties',
        'counterparty': 'counterparty',
        'execution_system': 'executionSystem',
        'entry_type': 'entryType'
    }

    required_map = {
        'id': 'required',
        'quantity': 'required',
        'properties': 'optional',
        'counterparty': 'optional',
        'execution_system': 'optional',
        'entry_type': 'optional'
    }

    def __init__(self, id=None, quantity=None, properties=None, counterparty=None, execution_system=None, entry_type=None, local_vars_configuration=None):  # noqa: E501
        """PlacementUpdateRequest - a model defined in OpenAPI"
        
        :param id:  (required)
        :type id: lusid.ResourceId
        :param quantity:  The quantity of given instrument ordered. (required)
        :type quantity: float
        :param properties:  Client-defined properties associated with this placement.
        :type properties: dict[str, lusid.PerpetualProperty]
        :param counterparty:  Optionally specifies the market entity this placement is placed with.
        :type counterparty: str
        :param execution_system:  Optionally specifies the execution system in use.
        :type execution_system: str
        :param entry_type:  Optionally specifies the entry type of this placement.
        :type entry_type: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._quantity = None
        self._properties = None
        self._counterparty = None
        self._execution_system = None
        self._entry_type = None
        self.discriminator = None

        self.id = id
        self.quantity = quantity
        self.properties = properties
        self.counterparty = counterparty
        self.execution_system = execution_system
        self.entry_type = entry_type

    @property
    def id(self):
        """Gets the id of this PlacementUpdateRequest.  # noqa: E501


        :return: The id of this PlacementUpdateRequest.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlacementUpdateRequest.


        :param id: The id of this PlacementUpdateRequest.  # noqa: E501
        :type id: lusid.ResourceId
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this PlacementUpdateRequest.  # noqa: E501

        The quantity of given instrument ordered.  # noqa: E501

        :return: The quantity of this PlacementUpdateRequest.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PlacementUpdateRequest.

        The quantity of given instrument ordered.  # noqa: E501

        :param quantity: The quantity of this PlacementUpdateRequest.  # noqa: E501
        :type quantity: float
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def properties(self):
        """Gets the properties of this PlacementUpdateRequest.  # noqa: E501

        Client-defined properties associated with this placement.  # noqa: E501

        :return: The properties of this PlacementUpdateRequest.  # noqa: E501
        :rtype: dict[str, lusid.PerpetualProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PlacementUpdateRequest.

        Client-defined properties associated with this placement.  # noqa: E501

        :param properties: The properties of this PlacementUpdateRequest.  # noqa: E501
        :type properties: dict[str, lusid.PerpetualProperty]
        """

        self._properties = properties

    @property
    def counterparty(self):
        """Gets the counterparty of this PlacementUpdateRequest.  # noqa: E501

        Optionally specifies the market entity this placement is placed with.  # noqa: E501

        :return: The counterparty of this PlacementUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this PlacementUpdateRequest.

        Optionally specifies the market entity this placement is placed with.  # noqa: E501

        :param counterparty: The counterparty of this PlacementUpdateRequest.  # noqa: E501
        :type counterparty: str
        """

        self._counterparty = counterparty

    @property
    def execution_system(self):
        """Gets the execution_system of this PlacementUpdateRequest.  # noqa: E501

        Optionally specifies the execution system in use.  # noqa: E501

        :return: The execution_system of this PlacementUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._execution_system

    @execution_system.setter
    def execution_system(self, execution_system):
        """Sets the execution_system of this PlacementUpdateRequest.

        Optionally specifies the execution system in use.  # noqa: E501

        :param execution_system: The execution_system of this PlacementUpdateRequest.  # noqa: E501
        :type execution_system: str
        """
        if (self.local_vars_configuration.client_side_validation and
                execution_system is not None and len(execution_system) > 256):
            raise ValueError("Invalid value for `execution_system`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                execution_system is not None and len(execution_system) < 1):
            raise ValueError("Invalid value for `execution_system`, length must be greater than or equal to `1`")  # noqa: E501

        self._execution_system = execution_system

    @property
    def entry_type(self):
        """Gets the entry_type of this PlacementUpdateRequest.  # noqa: E501

        Optionally specifies the entry type of this placement.  # noqa: E501

        :return: The entry_type of this PlacementUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this PlacementUpdateRequest.

        Optionally specifies the entry type of this placement.  # noqa: E501

        :param entry_type: The entry_type of this PlacementUpdateRequest.  # noqa: E501
        :type entry_type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                entry_type is not None and len(entry_type) > 256):
            raise ValueError("Invalid value for `entry_type`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                entry_type is not None and len(entry_type) < 1):
            raise ValueError("Invalid value for `entry_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._entry_type = entry_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementUpdateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlacementUpdateRequest):
            return True

        return self.to_dict() != other.to_dict()
