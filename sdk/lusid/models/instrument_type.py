# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.0.624
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class InstrumentType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    QUOTEDSECURITY = "QuotedSecurity"
    INTERESTRATESWAP = "InterestRateSwap"
    FXFORWARD = "FxForward"
    FUTURE = "Future"
    EXOTICINSTRUMENT = "ExoticInstrument"
    FXOPTION = "FxOption"
    CREDITDEFAULTSWAP = "CreditDefaultSwap"
    INTERESTRATESWAPTION = "InterestRateSwaption"
    BOND = "Bond"
    EQUITYOPTION = "EquityOption"
    FIXEDLEG = "FixedLeg"
    FLOATINGLEG = "FloatingLeg"
    BESPOKECASHFLOWSLEG = "BespokeCashFlowsLeg"
    UNKNOWN = "Unknown"
    TERMDEPOSIT = "TermDeposit"
    CONTRACTFORDIFFERENCE = "ContractForDifference"
    EQUITYSWAP = "EquitySwap"
    CASHPERPETUAL = "CashPerpetual"
    CAPFLOOR = "CapFloor"
    CASHSETTLED = "CashSettled"
    CDSINDEX = "CdsIndex"
    BASKET = "Basket"
    FUNDINGLEG = "FundingLeg"
    FXSWAP = "FxSwap"
    FORWARDRATEAGREEMENT = "ForwardRateAgreement"
    SIMPLEINSTRUMENT = "SimpleInstrument"
    REPO = "Repo"
    EQUITY = "Equity"
    EXCHANGETRADEDOPTION = "ExchangeTradedOption"
    REFERENCEINSTRUMENT = "ReferenceInstrument"
    COMPLEXBOND = "ComplexBond"
    INFLATIONLINKEDBOND = "InflationLinkedBond"
    INFLATIONSWAP = "InflationSwap"
    SIMPLECASHFLOWLOAN = "SimpleCashFlowLoan"
    TOTALRETURNSWAP = "TotalReturnSwap"
    INFLATIONLEG = "InflationLeg"

    allowable_values = [QUOTEDSECURITY, INTERESTRATESWAP, FXFORWARD, FUTURE, EXOTICINSTRUMENT, FXOPTION, CREDITDEFAULTSWAP, INTERESTRATESWAPTION, BOND, EQUITYOPTION, FIXEDLEG, FLOATINGLEG, BESPOKECASHFLOWSLEG, UNKNOWN, TERMDEPOSIT, CONTRACTFORDIFFERENCE, EQUITYSWAP, CASHPERPETUAL, CAPFLOOR, CASHSETTLED, CDSINDEX, BASKET, FUNDINGLEG, FXSWAP, FORWARDRATEAGREEMENT, SIMPLEINSTRUMENT, REPO, EQUITY, EXCHANGETRADEDOPTION, REFERENCEINSTRUMENT, COMPLEXBOND, INFLATIONLINKEDBOND, INFLATIONSWAP, SIMPLECASHFLOWLOAN, TOTALRETURNSWAP, INFLATIONLEG]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    required_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """InstrumentType - a model defined in OpenAPI"
        

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstrumentType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstrumentType):
            return True

        return self.to_dict() != other.to_dict()
