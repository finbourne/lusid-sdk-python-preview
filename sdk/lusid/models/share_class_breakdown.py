# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.216
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class ShareClassBreakdown(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'back_out': 'dict(str, ShareClassAmount)',
        'dealing': 'ShareClassDealingBreakdown',
        'pn_l': 'ShareClassPnlBreakdown',
        'gav': 'MultiCurrencyAmounts',
        'fees': 'dict(str, FeeAccrual)',
        'nav': 'MultiCurrencyAmounts',
        'unitisation': 'UnitisationData',
        'miscellaneous': 'dict(str, ShareClassAmount)',
        'share_class_to_fund_fx_rate': 'float',
        'capital_ratio': 'float',
        'previous_share_class_breakdown': 'PreviousShareClassBreakdown'
    }

    attribute_map = {
        'back_out': 'backOut',
        'dealing': 'dealing',
        'pn_l': 'pnL',
        'gav': 'gav',
        'fees': 'fees',
        'nav': 'nav',
        'unitisation': 'unitisation',
        'miscellaneous': 'miscellaneous',
        'share_class_to_fund_fx_rate': 'shareClassToFundFxRate',
        'capital_ratio': 'capitalRatio',
        'previous_share_class_breakdown': 'previousShareClassBreakdown'
    }

    required_map = {
        'back_out': 'required',
        'dealing': 'required',
        'pn_l': 'required',
        'gav': 'required',
        'fees': 'required',
        'nav': 'required',
        'unitisation': 'optional',
        'miscellaneous': 'optional',
        'share_class_to_fund_fx_rate': 'required',
        'capital_ratio': 'required',
        'previous_share_class_breakdown': 'required'
    }

    def __init__(self, back_out=None, dealing=None, pn_l=None, gav=None, fees=None, nav=None, unitisation=None, miscellaneous=None, share_class_to_fund_fx_rate=None, capital_ratio=None, previous_share_class_breakdown=None, local_vars_configuration=None):  # noqa: E501
        """ShareClassBreakdown - a model defined in OpenAPI"
        
        :param back_out:  Bucket of detail for the Valuation Point where data points have been 'backed out'. (required)
        :type back_out: dict[str, lusid.ShareClassAmount]
        :param dealing:  (required)
        :type dealing: lusid.ShareClassDealingBreakdown
        :param pn_l:  (required)
        :type pn_l: lusid.ShareClassPnlBreakdown
        :param gav:  (required)
        :type gav: lusid.MultiCurrencyAmounts
        :param fees:  Bucket of detail for any 'Fees' that have been charged in the selected period. (required)
        :type fees: dict[str, lusid.FeeAccrual]
        :param nav:  (required)
        :type nav: lusid.MultiCurrencyAmounts
        :param unitisation: 
        :type unitisation: lusid.UnitisationData
        :param miscellaneous:  Not used directly by the LUSID engines but serves as a holding area for any custom derived data points that may be useful in, for example, fee calculations).
        :type miscellaneous: dict[str, lusid.ShareClassAmount]
        :param share_class_to_fund_fx_rate:  The fx rate from the Share Class currency to the fund currency at this valuation point. (required)
        :type share_class_to_fund_fx_rate: float
        :param capital_ratio:  The proportion of the fund's adjusted beginning equity (ie: the sum of the previous NAV and the net dealing) that is invested in the share class. (required)
        :type capital_ratio: float
        :param previous_share_class_breakdown:  (required)
        :type previous_share_class_breakdown: lusid.PreviousShareClassBreakdown

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._back_out = None
        self._dealing = None
        self._pn_l = None
        self._gav = None
        self._fees = None
        self._nav = None
        self._unitisation = None
        self._miscellaneous = None
        self._share_class_to_fund_fx_rate = None
        self._capital_ratio = None
        self._previous_share_class_breakdown = None
        self.discriminator = None

        self.back_out = back_out
        self.dealing = dealing
        self.pn_l = pn_l
        self.gav = gav
        self.fees = fees
        self.nav = nav
        if unitisation is not None:
            self.unitisation = unitisation
        self.miscellaneous = miscellaneous
        self.share_class_to_fund_fx_rate = share_class_to_fund_fx_rate
        self.capital_ratio = capital_ratio
        self.previous_share_class_breakdown = previous_share_class_breakdown

    @property
    def back_out(self):
        """Gets the back_out of this ShareClassBreakdown.  # noqa: E501

        Bucket of detail for the Valuation Point where data points have been 'backed out'.  # noqa: E501

        :return: The back_out of this ShareClassBreakdown.  # noqa: E501
        :rtype: dict[str, lusid.ShareClassAmount]
        """
        return self._back_out

    @back_out.setter
    def back_out(self, back_out):
        """Sets the back_out of this ShareClassBreakdown.

        Bucket of detail for the Valuation Point where data points have been 'backed out'.  # noqa: E501

        :param back_out: The back_out of this ShareClassBreakdown.  # noqa: E501
        :type back_out: dict[str, lusid.ShareClassAmount]
        """
        if self.local_vars_configuration.client_side_validation and back_out is None:  # noqa: E501
            raise ValueError("Invalid value for `back_out`, must not be `None`")  # noqa: E501

        self._back_out = back_out

    @property
    def dealing(self):
        """Gets the dealing of this ShareClassBreakdown.  # noqa: E501


        :return: The dealing of this ShareClassBreakdown.  # noqa: E501
        :rtype: lusid.ShareClassDealingBreakdown
        """
        return self._dealing

    @dealing.setter
    def dealing(self, dealing):
        """Sets the dealing of this ShareClassBreakdown.


        :param dealing: The dealing of this ShareClassBreakdown.  # noqa: E501
        :type dealing: lusid.ShareClassDealingBreakdown
        """
        if self.local_vars_configuration.client_side_validation and dealing is None:  # noqa: E501
            raise ValueError("Invalid value for `dealing`, must not be `None`")  # noqa: E501

        self._dealing = dealing

    @property
    def pn_l(self):
        """Gets the pn_l of this ShareClassBreakdown.  # noqa: E501


        :return: The pn_l of this ShareClassBreakdown.  # noqa: E501
        :rtype: lusid.ShareClassPnlBreakdown
        """
        return self._pn_l

    @pn_l.setter
    def pn_l(self, pn_l):
        """Sets the pn_l of this ShareClassBreakdown.


        :param pn_l: The pn_l of this ShareClassBreakdown.  # noqa: E501
        :type pn_l: lusid.ShareClassPnlBreakdown
        """
        if self.local_vars_configuration.client_side_validation and pn_l is None:  # noqa: E501
            raise ValueError("Invalid value for `pn_l`, must not be `None`")  # noqa: E501

        self._pn_l = pn_l

    @property
    def gav(self):
        """Gets the gav of this ShareClassBreakdown.  # noqa: E501


        :return: The gav of this ShareClassBreakdown.  # noqa: E501
        :rtype: lusid.MultiCurrencyAmounts
        """
        return self._gav

    @gav.setter
    def gav(self, gav):
        """Sets the gav of this ShareClassBreakdown.


        :param gav: The gav of this ShareClassBreakdown.  # noqa: E501
        :type gav: lusid.MultiCurrencyAmounts
        """
        if self.local_vars_configuration.client_side_validation and gav is None:  # noqa: E501
            raise ValueError("Invalid value for `gav`, must not be `None`")  # noqa: E501

        self._gav = gav

    @property
    def fees(self):
        """Gets the fees of this ShareClassBreakdown.  # noqa: E501

        Bucket of detail for any 'Fees' that have been charged in the selected period.  # noqa: E501

        :return: The fees of this ShareClassBreakdown.  # noqa: E501
        :rtype: dict[str, lusid.FeeAccrual]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this ShareClassBreakdown.

        Bucket of detail for any 'Fees' that have been charged in the selected period.  # noqa: E501

        :param fees: The fees of this ShareClassBreakdown.  # noqa: E501
        :type fees: dict[str, lusid.FeeAccrual]
        """
        if self.local_vars_configuration.client_side_validation and fees is None:  # noqa: E501
            raise ValueError("Invalid value for `fees`, must not be `None`")  # noqa: E501

        self._fees = fees

    @property
    def nav(self):
        """Gets the nav of this ShareClassBreakdown.  # noqa: E501


        :return: The nav of this ShareClassBreakdown.  # noqa: E501
        :rtype: lusid.MultiCurrencyAmounts
        """
        return self._nav

    @nav.setter
    def nav(self, nav):
        """Sets the nav of this ShareClassBreakdown.


        :param nav: The nav of this ShareClassBreakdown.  # noqa: E501
        :type nav: lusid.MultiCurrencyAmounts
        """
        if self.local_vars_configuration.client_side_validation and nav is None:  # noqa: E501
            raise ValueError("Invalid value for `nav`, must not be `None`")  # noqa: E501

        self._nav = nav

    @property
    def unitisation(self):
        """Gets the unitisation of this ShareClassBreakdown.  # noqa: E501


        :return: The unitisation of this ShareClassBreakdown.  # noqa: E501
        :rtype: lusid.UnitisationData
        """
        return self._unitisation

    @unitisation.setter
    def unitisation(self, unitisation):
        """Sets the unitisation of this ShareClassBreakdown.


        :param unitisation: The unitisation of this ShareClassBreakdown.  # noqa: E501
        :type unitisation: lusid.UnitisationData
        """

        self._unitisation = unitisation

    @property
    def miscellaneous(self):
        """Gets the miscellaneous of this ShareClassBreakdown.  # noqa: E501

        Not used directly by the LUSID engines but serves as a holding area for any custom derived data points that may be useful in, for example, fee calculations).  # noqa: E501

        :return: The miscellaneous of this ShareClassBreakdown.  # noqa: E501
        :rtype: dict[str, lusid.ShareClassAmount]
        """
        return self._miscellaneous

    @miscellaneous.setter
    def miscellaneous(self, miscellaneous):
        """Sets the miscellaneous of this ShareClassBreakdown.

        Not used directly by the LUSID engines but serves as a holding area for any custom derived data points that may be useful in, for example, fee calculations).  # noqa: E501

        :param miscellaneous: The miscellaneous of this ShareClassBreakdown.  # noqa: E501
        :type miscellaneous: dict[str, lusid.ShareClassAmount]
        """

        self._miscellaneous = miscellaneous

    @property
    def share_class_to_fund_fx_rate(self):
        """Gets the share_class_to_fund_fx_rate of this ShareClassBreakdown.  # noqa: E501

        The fx rate from the Share Class currency to the fund currency at this valuation point.  # noqa: E501

        :return: The share_class_to_fund_fx_rate of this ShareClassBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._share_class_to_fund_fx_rate

    @share_class_to_fund_fx_rate.setter
    def share_class_to_fund_fx_rate(self, share_class_to_fund_fx_rate):
        """Sets the share_class_to_fund_fx_rate of this ShareClassBreakdown.

        The fx rate from the Share Class currency to the fund currency at this valuation point.  # noqa: E501

        :param share_class_to_fund_fx_rate: The share_class_to_fund_fx_rate of this ShareClassBreakdown.  # noqa: E501
        :type share_class_to_fund_fx_rate: float
        """
        if self.local_vars_configuration.client_side_validation and share_class_to_fund_fx_rate is None:  # noqa: E501
            raise ValueError("Invalid value for `share_class_to_fund_fx_rate`, must not be `None`")  # noqa: E501

        self._share_class_to_fund_fx_rate = share_class_to_fund_fx_rate

    @property
    def capital_ratio(self):
        """Gets the capital_ratio of this ShareClassBreakdown.  # noqa: E501

        The proportion of the fund's adjusted beginning equity (ie: the sum of the previous NAV and the net dealing) that is invested in the share class.  # noqa: E501

        :return: The capital_ratio of this ShareClassBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._capital_ratio

    @capital_ratio.setter
    def capital_ratio(self, capital_ratio):
        """Sets the capital_ratio of this ShareClassBreakdown.

        The proportion of the fund's adjusted beginning equity (ie: the sum of the previous NAV and the net dealing) that is invested in the share class.  # noqa: E501

        :param capital_ratio: The capital_ratio of this ShareClassBreakdown.  # noqa: E501
        :type capital_ratio: float
        """
        if self.local_vars_configuration.client_side_validation and capital_ratio is None:  # noqa: E501
            raise ValueError("Invalid value for `capital_ratio`, must not be `None`")  # noqa: E501

        self._capital_ratio = capital_ratio

    @property
    def previous_share_class_breakdown(self):
        """Gets the previous_share_class_breakdown of this ShareClassBreakdown.  # noqa: E501


        :return: The previous_share_class_breakdown of this ShareClassBreakdown.  # noqa: E501
        :rtype: lusid.PreviousShareClassBreakdown
        """
        return self._previous_share_class_breakdown

    @previous_share_class_breakdown.setter
    def previous_share_class_breakdown(self, previous_share_class_breakdown):
        """Sets the previous_share_class_breakdown of this ShareClassBreakdown.


        :param previous_share_class_breakdown: The previous_share_class_breakdown of this ShareClassBreakdown.  # noqa: E501
        :type previous_share_class_breakdown: lusid.PreviousShareClassBreakdown
        """
        if self.local_vars_configuration.client_side_validation and previous_share_class_breakdown is None:  # noqa: E501
            raise ValueError("Invalid value for `previous_share_class_breakdown`, must not be `None`")  # noqa: E501

        self._previous_share_class_breakdown = previous_share_class_breakdown

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareClassBreakdown):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShareClassBreakdown):
            return True

        return self.to_dict() != other.to_dict()
