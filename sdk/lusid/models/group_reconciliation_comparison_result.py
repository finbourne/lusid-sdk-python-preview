# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.242
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class GroupReconciliationComparisonResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'id': 'ResourceId',
        'reconciliation_type': 'str',
        'group_reconciliation_definition_id': 'ResourceId',
        'instance_id': 'GroupReconciliationInstanceId',
        'comparison_result_id': 'str',
        'reconciliation_run_as_at': 'datetime',
        'result_type': 'str',
        'result_status': 'str',
        'review_status': 'str',
        'dates_reconciled': 'GroupReconciliationDates',
        'core_attributes': 'GroupReconciliationCoreAttributeValues',
        'aggregate_attributes': 'GroupReconciliationAggregateAttributeValues',
        'user_review': 'GroupReconciliationUserReview',
        'href': 'str',
        'version': 'Version',
        'links': 'list[Link]'
    }

    attribute_map = {
        'id': 'id',
        'reconciliation_type': 'reconciliationType',
        'group_reconciliation_definition_id': 'groupReconciliationDefinitionId',
        'instance_id': 'instanceId',
        'comparison_result_id': 'comparisonResultId',
        'reconciliation_run_as_at': 'reconciliationRunAsAt',
        'result_type': 'resultType',
        'result_status': 'resultStatus',
        'review_status': 'reviewStatus',
        'dates_reconciled': 'datesReconciled',
        'core_attributes': 'coreAttributes',
        'aggregate_attributes': 'aggregateAttributes',
        'user_review': 'userReview',
        'href': 'href',
        'version': 'version',
        'links': 'links'
    }

    required_map = {
        'id': 'required',
        'reconciliation_type': 'required',
        'group_reconciliation_definition_id': 'required',
        'instance_id': 'required',
        'comparison_result_id': 'required',
        'reconciliation_run_as_at': 'required',
        'result_type': 'required',
        'result_status': 'required',
        'review_status': 'required',
        'dates_reconciled': 'required',
        'core_attributes': 'required',
        'aggregate_attributes': 'required',
        'user_review': 'optional',
        'href': 'optional',
        'version': 'optional',
        'links': 'optional'
    }

    def __init__(self, id=None, reconciliation_type=None, group_reconciliation_definition_id=None, instance_id=None, comparison_result_id=None, reconciliation_run_as_at=None, result_type=None, result_status=None, review_status=None, dates_reconciled=None, core_attributes=None, aggregate_attributes=None, user_review=None, href=None, version=None, links=None, local_vars_configuration=None):  # noqa: E501
        """GroupReconciliationComparisonResult - a model defined in OpenAPI"
        
        :param id:  (required)
        :type id: lusid.ResourceId
        :param reconciliation_type:  The type of reconciliation to perform. \"Holding\" | \"Transaction\" | \"Valuation\" (required)
        :type reconciliation_type: str
        :param group_reconciliation_definition_id:  (required)
        :type group_reconciliation_definition_id: lusid.ResourceId
        :param instance_id:  (required)
        :type instance_id: lusid.GroupReconciliationInstanceId
        :param comparison_result_id:  Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId. (required)
        :type comparison_result_id: str
        :param reconciliation_run_as_at:  The timestamp when the run occurred. (required)
        :type reconciliation_run_as_at: datetime
        :param result_type:  Reconciliation run general result. \"Break\" | \"Match\" | \"PartialMatch\" | \"NotFound (required)
        :type result_type: str
        :param result_status:  Indicates how a particular result evolves from one run to the next. \"New\" | \"Confirmed\" | \"Changed\" (required)
        :type result_status: str
        :param review_status:  Status of whether user has provided any input (comments, manual matches, break codes). \"Pending\" | \"Reviewed\" | \"Matched\" | \"Invalid\" (required)
        :type review_status: str
        :param dates_reconciled:  (required)
        :type dates_reconciled: lusid.GroupReconciliationDates
        :param core_attributes:  (required)
        :type core_attributes: lusid.GroupReconciliationCoreAttributeValues
        :param aggregate_attributes:  (required)
        :type aggregate_attributes: lusid.GroupReconciliationAggregateAttributeValues
        :param user_review: 
        :type user_review: lusid.GroupReconciliationUserReview
        :param href:  The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        :type href: str
        :param version: 
        :type version: lusid.Version
        :param links: 
        :type links: list[lusid.Link]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._reconciliation_type = None
        self._group_reconciliation_definition_id = None
        self._instance_id = None
        self._comparison_result_id = None
        self._reconciliation_run_as_at = None
        self._result_type = None
        self._result_status = None
        self._review_status = None
        self._dates_reconciled = None
        self._core_attributes = None
        self._aggregate_attributes = None
        self._user_review = None
        self._href = None
        self._version = None
        self._links = None
        self.discriminator = None

        self.id = id
        self.reconciliation_type = reconciliation_type
        self.group_reconciliation_definition_id = group_reconciliation_definition_id
        self.instance_id = instance_id
        self.comparison_result_id = comparison_result_id
        self.reconciliation_run_as_at = reconciliation_run_as_at
        self.result_type = result_type
        self.result_status = result_status
        self.review_status = review_status
        self.dates_reconciled = dates_reconciled
        self.core_attributes = core_attributes
        self.aggregate_attributes = aggregate_attributes
        if user_review is not None:
            self.user_review = user_review
        self.href = href
        if version is not None:
            self.version = version
        self.links = links

    @property
    def id(self):
        """Gets the id of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The id of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupReconciliationComparisonResult.


        :param id: The id of this GroupReconciliationComparisonResult.  # noqa: E501
        :type id: lusid.ResourceId
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def reconciliation_type(self):
        """Gets the reconciliation_type of this GroupReconciliationComparisonResult.  # noqa: E501

        The type of reconciliation to perform. \"Holding\" | \"Transaction\" | \"Valuation\"  # noqa: E501

        :return: The reconciliation_type of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: str
        """
        return self._reconciliation_type

    @reconciliation_type.setter
    def reconciliation_type(self, reconciliation_type):
        """Sets the reconciliation_type of this GroupReconciliationComparisonResult.

        The type of reconciliation to perform. \"Holding\" | \"Transaction\" | \"Valuation\"  # noqa: E501

        :param reconciliation_type: The reconciliation_type of this GroupReconciliationComparisonResult.  # noqa: E501
        :type reconciliation_type: str
        """
        if self.local_vars_configuration.client_side_validation and reconciliation_type is None:  # noqa: E501
            raise ValueError("Invalid value for `reconciliation_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reconciliation_type is not None and len(reconciliation_type) < 1):
            raise ValueError("Invalid value for `reconciliation_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._reconciliation_type = reconciliation_type

    @property
    def group_reconciliation_definition_id(self):
        """Gets the group_reconciliation_definition_id of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The group_reconciliation_definition_id of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._group_reconciliation_definition_id

    @group_reconciliation_definition_id.setter
    def group_reconciliation_definition_id(self, group_reconciliation_definition_id):
        """Sets the group_reconciliation_definition_id of this GroupReconciliationComparisonResult.


        :param group_reconciliation_definition_id: The group_reconciliation_definition_id of this GroupReconciliationComparisonResult.  # noqa: E501
        :type group_reconciliation_definition_id: lusid.ResourceId
        """
        if self.local_vars_configuration.client_side_validation and group_reconciliation_definition_id is None:  # noqa: E501
            raise ValueError("Invalid value for `group_reconciliation_definition_id`, must not be `None`")  # noqa: E501

        self._group_reconciliation_definition_id = group_reconciliation_definition_id

    @property
    def instance_id(self):
        """Gets the instance_id of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The instance_id of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: lusid.GroupReconciliationInstanceId
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this GroupReconciliationComparisonResult.


        :param instance_id: The instance_id of this GroupReconciliationComparisonResult.  # noqa: E501
        :type instance_id: lusid.GroupReconciliationInstanceId
        """
        if self.local_vars_configuration.client_side_validation and instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def comparison_result_id(self):
        """Gets the comparison_result_id of this GroupReconciliationComparisonResult.  # noqa: E501

        Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId.  # noqa: E501

        :return: The comparison_result_id of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: str
        """
        return self._comparison_result_id

    @comparison_result_id.setter
    def comparison_result_id(self, comparison_result_id):
        """Sets the comparison_result_id of this GroupReconciliationComparisonResult.

        Comparison result identifier, encoded value for core attribute results, aggregate attribute results, reconciliation type and run instanceId.  # noqa: E501

        :param comparison_result_id: The comparison_result_id of this GroupReconciliationComparisonResult.  # noqa: E501
        :type comparison_result_id: str
        """
        if self.local_vars_configuration.client_side_validation and comparison_result_id is None:  # noqa: E501
            raise ValueError("Invalid value for `comparison_result_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                comparison_result_id is not None and len(comparison_result_id) < 1):
            raise ValueError("Invalid value for `comparison_result_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._comparison_result_id = comparison_result_id

    @property
    def reconciliation_run_as_at(self):
        """Gets the reconciliation_run_as_at of this GroupReconciliationComparisonResult.  # noqa: E501

        The timestamp when the run occurred.  # noqa: E501

        :return: The reconciliation_run_as_at of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: datetime
        """
        return self._reconciliation_run_as_at

    @reconciliation_run_as_at.setter
    def reconciliation_run_as_at(self, reconciliation_run_as_at):
        """Sets the reconciliation_run_as_at of this GroupReconciliationComparisonResult.

        The timestamp when the run occurred.  # noqa: E501

        :param reconciliation_run_as_at: The reconciliation_run_as_at of this GroupReconciliationComparisonResult.  # noqa: E501
        :type reconciliation_run_as_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and reconciliation_run_as_at is None:  # noqa: E501
            raise ValueError("Invalid value for `reconciliation_run_as_at`, must not be `None`")  # noqa: E501

        self._reconciliation_run_as_at = reconciliation_run_as_at

    @property
    def result_type(self):
        """Gets the result_type of this GroupReconciliationComparisonResult.  # noqa: E501

        Reconciliation run general result. \"Break\" | \"Match\" | \"PartialMatch\" | \"NotFound  # noqa: E501

        :return: The result_type of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this GroupReconciliationComparisonResult.

        Reconciliation run general result. \"Break\" | \"Match\" | \"PartialMatch\" | \"NotFound  # noqa: E501

        :param result_type: The result_type of this GroupReconciliationComparisonResult.  # noqa: E501
        :type result_type: str
        """
        if self.local_vars_configuration.client_side_validation and result_type is None:  # noqa: E501
            raise ValueError("Invalid value for `result_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                result_type is not None and len(result_type) < 1):
            raise ValueError("Invalid value for `result_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._result_type = result_type

    @property
    def result_status(self):
        """Gets the result_status of this GroupReconciliationComparisonResult.  # noqa: E501

        Indicates how a particular result evolves from one run to the next. \"New\" | \"Confirmed\" | \"Changed\"  # noqa: E501

        :return: The result_status of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: str
        """
        return self._result_status

    @result_status.setter
    def result_status(self, result_status):
        """Sets the result_status of this GroupReconciliationComparisonResult.

        Indicates how a particular result evolves from one run to the next. \"New\" | \"Confirmed\" | \"Changed\"  # noqa: E501

        :param result_status: The result_status of this GroupReconciliationComparisonResult.  # noqa: E501
        :type result_status: str
        """
        if self.local_vars_configuration.client_side_validation and result_status is None:  # noqa: E501
            raise ValueError("Invalid value for `result_status`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                result_status is not None and len(result_status) < 1):
            raise ValueError("Invalid value for `result_status`, length must be greater than or equal to `1`")  # noqa: E501

        self._result_status = result_status

    @property
    def review_status(self):
        """Gets the review_status of this GroupReconciliationComparisonResult.  # noqa: E501

        Status of whether user has provided any input (comments, manual matches, break codes). \"Pending\" | \"Reviewed\" | \"Matched\" | \"Invalid\"  # noqa: E501

        :return: The review_status of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this GroupReconciliationComparisonResult.

        Status of whether user has provided any input (comments, manual matches, break codes). \"Pending\" | \"Reviewed\" | \"Matched\" | \"Invalid\"  # noqa: E501

        :param review_status: The review_status of this GroupReconciliationComparisonResult.  # noqa: E501
        :type review_status: str
        """
        if self.local_vars_configuration.client_side_validation and review_status is None:  # noqa: E501
            raise ValueError("Invalid value for `review_status`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                review_status is not None and len(review_status) < 1):
            raise ValueError("Invalid value for `review_status`, length must be greater than or equal to `1`")  # noqa: E501

        self._review_status = review_status

    @property
    def dates_reconciled(self):
        """Gets the dates_reconciled of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The dates_reconciled of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: lusid.GroupReconciliationDates
        """
        return self._dates_reconciled

    @dates_reconciled.setter
    def dates_reconciled(self, dates_reconciled):
        """Sets the dates_reconciled of this GroupReconciliationComparisonResult.


        :param dates_reconciled: The dates_reconciled of this GroupReconciliationComparisonResult.  # noqa: E501
        :type dates_reconciled: lusid.GroupReconciliationDates
        """
        if self.local_vars_configuration.client_side_validation and dates_reconciled is None:  # noqa: E501
            raise ValueError("Invalid value for `dates_reconciled`, must not be `None`")  # noqa: E501

        self._dates_reconciled = dates_reconciled

    @property
    def core_attributes(self):
        """Gets the core_attributes of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The core_attributes of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: lusid.GroupReconciliationCoreAttributeValues
        """
        return self._core_attributes

    @core_attributes.setter
    def core_attributes(self, core_attributes):
        """Sets the core_attributes of this GroupReconciliationComparisonResult.


        :param core_attributes: The core_attributes of this GroupReconciliationComparisonResult.  # noqa: E501
        :type core_attributes: lusid.GroupReconciliationCoreAttributeValues
        """
        if self.local_vars_configuration.client_side_validation and core_attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `core_attributes`, must not be `None`")  # noqa: E501

        self._core_attributes = core_attributes

    @property
    def aggregate_attributes(self):
        """Gets the aggregate_attributes of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The aggregate_attributes of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: lusid.GroupReconciliationAggregateAttributeValues
        """
        return self._aggregate_attributes

    @aggregate_attributes.setter
    def aggregate_attributes(self, aggregate_attributes):
        """Sets the aggregate_attributes of this GroupReconciliationComparisonResult.


        :param aggregate_attributes: The aggregate_attributes of this GroupReconciliationComparisonResult.  # noqa: E501
        :type aggregate_attributes: lusid.GroupReconciliationAggregateAttributeValues
        """
        if self.local_vars_configuration.client_side_validation and aggregate_attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `aggregate_attributes`, must not be `None`")  # noqa: E501

        self._aggregate_attributes = aggregate_attributes

    @property
    def user_review(self):
        """Gets the user_review of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The user_review of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: lusid.GroupReconciliationUserReview
        """
        return self._user_review

    @user_review.setter
    def user_review(self, user_review):
        """Sets the user_review of this GroupReconciliationComparisonResult.


        :param user_review: The user_review of this GroupReconciliationComparisonResult.  # noqa: E501
        :type user_review: lusid.GroupReconciliationUserReview
        """

        self._user_review = user_review

    @property
    def href(self):
        """Gets the href of this GroupReconciliationComparisonResult.  # noqa: E501

        The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.  # noqa: E501

        :return: The href of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this GroupReconciliationComparisonResult.

        The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.  # noqa: E501

        :param href: The href of this GroupReconciliationComparisonResult.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def version(self):
        """Gets the version of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The version of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: lusid.Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GroupReconciliationComparisonResult.


        :param version: The version of this GroupReconciliationComparisonResult.  # noqa: E501
        :type version: lusid.Version
        """

        self._version = version

    @property
    def links(self):
        """Gets the links of this GroupReconciliationComparisonResult.  # noqa: E501


        :return: The links of this GroupReconciliationComparisonResult.  # noqa: E501
        :rtype: list[lusid.Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GroupReconciliationComparisonResult.


        :param links: The links of this GroupReconciliationComparisonResult.  # noqa: E501
        :type links: list[lusid.Link]
        """

        self._links = links

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupReconciliationComparisonResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupReconciliationComparisonResult):
            return True

        return self.to_dict() != other.to_dict()
