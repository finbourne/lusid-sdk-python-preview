# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.243
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class GroupReconciliationComparisonRuleStringValueMap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'left_value': 'str',
        'right_value': 'str',
        'direction': 'str'
    }

    attribute_map = {
        'left_value': 'leftValue',
        'right_value': 'rightValue',
        'direction': 'direction'
    }

    required_map = {
        'left_value': 'required',
        'right_value': 'required',
        'direction': 'required'
    }

    def __init__(self, left_value=None, right_value=None, direction=None, local_vars_configuration=None):  # noqa: E501
        """GroupReconciliationComparisonRuleStringValueMap - a model defined in OpenAPI"
        
        :param left_value:  The left string to map (required)
        :type left_value: str
        :param right_value:  The right string to map (required)
        :type right_value: str
        :param direction:  The direction to map. \"UniDirectional\" | \"BiDirectional\" (required)
        :type direction: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._left_value = None
        self._right_value = None
        self._direction = None
        self.discriminator = None

        self.left_value = left_value
        self.right_value = right_value
        self.direction = direction

    @property
    def left_value(self):
        """Gets the left_value of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501

        The left string to map  # noqa: E501

        :return: The left_value of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501
        :rtype: str
        """
        return self._left_value

    @left_value.setter
    def left_value(self, left_value):
        """Sets the left_value of this GroupReconciliationComparisonRuleStringValueMap.

        The left string to map  # noqa: E501

        :param left_value: The left_value of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501
        :type left_value: str
        """
        if self.local_vars_configuration.client_side_validation and left_value is None:  # noqa: E501
            raise ValueError("Invalid value for `left_value`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                left_value is not None and len(left_value) > 256):
            raise ValueError("Invalid value for `left_value`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                left_value is not None and len(left_value) < 1):
            raise ValueError("Invalid value for `left_value`, length must be greater than or equal to `1`")  # noqa: E501

        self._left_value = left_value

    @property
    def right_value(self):
        """Gets the right_value of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501

        The right string to map  # noqa: E501

        :return: The right_value of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501
        :rtype: str
        """
        return self._right_value

    @right_value.setter
    def right_value(self, right_value):
        """Sets the right_value of this GroupReconciliationComparisonRuleStringValueMap.

        The right string to map  # noqa: E501

        :param right_value: The right_value of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501
        :type right_value: str
        """
        if self.local_vars_configuration.client_side_validation and right_value is None:  # noqa: E501
            raise ValueError("Invalid value for `right_value`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                right_value is not None and len(right_value) > 256):
            raise ValueError("Invalid value for `right_value`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                right_value is not None and len(right_value) < 1):
            raise ValueError("Invalid value for `right_value`, length must be greater than or equal to `1`")  # noqa: E501

        self._right_value = right_value

    @property
    def direction(self):
        """Gets the direction of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501

        The direction to map. \"UniDirectional\" | \"BiDirectional\"  # noqa: E501

        :return: The direction of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this GroupReconciliationComparisonRuleStringValueMap.

        The direction to map. \"UniDirectional\" | \"BiDirectional\"  # noqa: E501

        :param direction: The direction of this GroupReconciliationComparisonRuleStringValueMap.  # noqa: E501
        :type direction: str
        """
        if self.local_vars_configuration.client_side_validation and direction is None:  # noqa: E501
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                direction is not None and len(direction) < 1):
            raise ValueError("Invalid value for `direction`, length must be greater than or equal to `1`")  # noqa: E501

        self._direction = direction

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupReconciliationComparisonRuleStringValueMap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupReconciliationComparisonRuleStringValueMap):
            return True

        return self.to_dict() != other.to_dict()
