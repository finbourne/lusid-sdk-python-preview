# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.242
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class ChangeIntervalWithOrderManagementDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'detail': 'dict(str, str)',
        'action_description': 'str',
        'as_at_modified': 'datetime',
        'user_id_modified': 'str',
        'request_id_modified': 'str',
        'as_at_version_number': 'int',
        'staged_modification_id_modified': 'str',
        'action': 'str',
        'attribute_name': 'str',
        'previous_value': 'PropertyValue',
        'new_value': 'PropertyValue',
        'effective_range': 'EffectiveRange'
    }

    attribute_map = {
        'detail': 'detail',
        'action_description': 'actionDescription',
        'as_at_modified': 'asAtModified',
        'user_id_modified': 'userIdModified',
        'request_id_modified': 'requestIdModified',
        'as_at_version_number': 'asAtVersionNumber',
        'staged_modification_id_modified': 'stagedModificationIdModified',
        'action': 'action',
        'attribute_name': 'attributeName',
        'previous_value': 'previousValue',
        'new_value': 'newValue',
        'effective_range': 'effectiveRange'
    }

    required_map = {
        'detail': 'optional',
        'action_description': 'optional',
        'as_at_modified': 'optional',
        'user_id_modified': 'optional',
        'request_id_modified': 'optional',
        'as_at_version_number': 'optional',
        'staged_modification_id_modified': 'optional',
        'action': 'optional',
        'attribute_name': 'optional',
        'previous_value': 'optional',
        'new_value': 'optional',
        'effective_range': 'optional'
    }

    def __init__(self, detail=None, action_description=None, as_at_modified=None, user_id_modified=None, request_id_modified=None, as_at_version_number=None, staged_modification_id_modified=None, action=None, attribute_name=None, previous_value=None, new_value=None, effective_range=None, local_vars_configuration=None):  # noqa: E501
        """ChangeIntervalWithOrderManagementDetail - a model defined in OpenAPI"
        
        :param detail:  Information about the particular instance of the ChangeInterval (supplied information depends on the type of Action). Contains extra detail for order management actions such as related entity ids and compliance run details.
        :type detail: dict(str, str)
        :param action_description:  Description of the action performed on the entity.
        :type action_description: str
        :param as_at_modified:  The date/time of the change.
        :type as_at_modified: datetime
        :param user_id_modified:  The unique identifier of the user that made the change.
        :type user_id_modified: str
        :param request_id_modified:  The unique identifier of the request that the changes were part of.
        :type request_id_modified: str
        :param as_at_version_number:  The version number for the entity (the entity was created at version 1). This may refer to the version number of a changed related entity, not a change for the entity itself.
        :type as_at_version_number: int
        :param staged_modification_id_modified:  The id of the staged modification that was approved. Will be null if the change didn't come from a staged modification.
        :type staged_modification_id_modified: str
        :param action:  The action performed on the entity.
        :type action: str
        :param attribute_name:  The name of the field or property that has been changed.
        :type attribute_name: str
        :param previous_value: 
        :type previous_value: lusid.PropertyValue
        :param new_value: 
        :type new_value: lusid.PropertyValue
        :param effective_range: 
        :type effective_range: lusid.EffectiveRange

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._detail = None
        self._action_description = None
        self._as_at_modified = None
        self._user_id_modified = None
        self._request_id_modified = None
        self._as_at_version_number = None
        self._staged_modification_id_modified = None
        self._action = None
        self._attribute_name = None
        self._previous_value = None
        self._new_value = None
        self._effective_range = None
        self.discriminator = None

        self.detail = detail
        self.action_description = action_description
        if as_at_modified is not None:
            self.as_at_modified = as_at_modified
        self.user_id_modified = user_id_modified
        self.request_id_modified = request_id_modified
        if as_at_version_number is not None:
            self.as_at_version_number = as_at_version_number
        self.staged_modification_id_modified = staged_modification_id_modified
        self.action = action
        self.attribute_name = attribute_name
        if previous_value is not None:
            self.previous_value = previous_value
        if new_value is not None:
            self.new_value = new_value
        if effective_range is not None:
            self.effective_range = effective_range

    @property
    def detail(self):
        """Gets the detail of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        Information about the particular instance of the ChangeInterval (supplied information depends on the type of Action). Contains extra detail for order management actions such as related entity ids and compliance run details.  # noqa: E501

        :return: The detail of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ChangeIntervalWithOrderManagementDetail.

        Information about the particular instance of the ChangeInterval (supplied information depends on the type of Action). Contains extra detail for order management actions such as related entity ids and compliance run details.  # noqa: E501

        :param detail: The detail of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type detail: dict(str, str)
        """

        self._detail = detail

    @property
    def action_description(self):
        """Gets the action_description of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        Description of the action performed on the entity.  # noqa: E501

        :return: The action_description of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: str
        """
        return self._action_description

    @action_description.setter
    def action_description(self, action_description):
        """Sets the action_description of this ChangeIntervalWithOrderManagementDetail.

        Description of the action performed on the entity.  # noqa: E501

        :param action_description: The action_description of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type action_description: str
        """

        self._action_description = action_description

    @property
    def as_at_modified(self):
        """Gets the as_at_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        The date/time of the change.  # noqa: E501

        :return: The as_at_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._as_at_modified

    @as_at_modified.setter
    def as_at_modified(self, as_at_modified):
        """Sets the as_at_modified of this ChangeIntervalWithOrderManagementDetail.

        The date/time of the change.  # noqa: E501

        :param as_at_modified: The as_at_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type as_at_modified: datetime
        """

        self._as_at_modified = as_at_modified

    @property
    def user_id_modified(self):
        """Gets the user_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        The unique identifier of the user that made the change.  # noqa: E501

        :return: The user_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: str
        """
        return self._user_id_modified

    @user_id_modified.setter
    def user_id_modified(self, user_id_modified):
        """Sets the user_id_modified of this ChangeIntervalWithOrderManagementDetail.

        The unique identifier of the user that made the change.  # noqa: E501

        :param user_id_modified: The user_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type user_id_modified: str
        """

        self._user_id_modified = user_id_modified

    @property
    def request_id_modified(self):
        """Gets the request_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        The unique identifier of the request that the changes were part of.  # noqa: E501

        :return: The request_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: str
        """
        return self._request_id_modified

    @request_id_modified.setter
    def request_id_modified(self, request_id_modified):
        """Sets the request_id_modified of this ChangeIntervalWithOrderManagementDetail.

        The unique identifier of the request that the changes were part of.  # noqa: E501

        :param request_id_modified: The request_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type request_id_modified: str
        """

        self._request_id_modified = request_id_modified

    @property
    def as_at_version_number(self):
        """Gets the as_at_version_number of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        The version number for the entity (the entity was created at version 1). This may refer to the version number of a changed related entity, not a change for the entity itself.  # noqa: E501

        :return: The as_at_version_number of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: int
        """
        return self._as_at_version_number

    @as_at_version_number.setter
    def as_at_version_number(self, as_at_version_number):
        """Sets the as_at_version_number of this ChangeIntervalWithOrderManagementDetail.

        The version number for the entity (the entity was created at version 1). This may refer to the version number of a changed related entity, not a change for the entity itself.  # noqa: E501

        :param as_at_version_number: The as_at_version_number of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type as_at_version_number: int
        """

        self._as_at_version_number = as_at_version_number

    @property
    def staged_modification_id_modified(self):
        """Gets the staged_modification_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        The id of the staged modification that was approved. Will be null if the change didn't come from a staged modification.  # noqa: E501

        :return: The staged_modification_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: str
        """
        return self._staged_modification_id_modified

    @staged_modification_id_modified.setter
    def staged_modification_id_modified(self, staged_modification_id_modified):
        """Sets the staged_modification_id_modified of this ChangeIntervalWithOrderManagementDetail.

        The id of the staged modification that was approved. Will be null if the change didn't come from a staged modification.  # noqa: E501

        :param staged_modification_id_modified: The staged_modification_id_modified of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type staged_modification_id_modified: str
        """

        self._staged_modification_id_modified = staged_modification_id_modified

    @property
    def action(self):
        """Gets the action of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        The action performed on the entity.  # noqa: E501

        :return: The action of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ChangeIntervalWithOrderManagementDetail.

        The action performed on the entity.  # noqa: E501

        :param action: The action of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type action: str
        """

        self._action = action

    @property
    def attribute_name(self):
        """Gets the attribute_name of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501

        The name of the field or property that has been changed.  # noqa: E501

        :return: The attribute_name of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this ChangeIntervalWithOrderManagementDetail.

        The name of the field or property that has been changed.  # noqa: E501

        :param attribute_name: The attribute_name of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type attribute_name: str
        """

        self._attribute_name = attribute_name

    @property
    def previous_value(self):
        """Gets the previous_value of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501


        :return: The previous_value of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: lusid.PropertyValue
        """
        return self._previous_value

    @previous_value.setter
    def previous_value(self, previous_value):
        """Sets the previous_value of this ChangeIntervalWithOrderManagementDetail.


        :param previous_value: The previous_value of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type previous_value: lusid.PropertyValue
        """

        self._previous_value = previous_value

    @property
    def new_value(self):
        """Gets the new_value of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501


        :return: The new_value of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: lusid.PropertyValue
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this ChangeIntervalWithOrderManagementDetail.


        :param new_value: The new_value of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type new_value: lusid.PropertyValue
        """

        self._new_value = new_value

    @property
    def effective_range(self):
        """Gets the effective_range of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501


        :return: The effective_range of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :rtype: lusid.EffectiveRange
        """
        return self._effective_range

    @effective_range.setter
    def effective_range(self, effective_range):
        """Sets the effective_range of this ChangeIntervalWithOrderManagementDetail.


        :param effective_range: The effective_range of this ChangeIntervalWithOrderManagementDetail.  # noqa: E501
        :type effective_range: lusid.EffectiveRange
        """

        self._effective_range = effective_range

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeIntervalWithOrderManagementDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChangeIntervalWithOrderManagementDetail):
            return True

        return self.to_dict() != other.to_dict()
