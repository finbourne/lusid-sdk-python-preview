# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.243
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class HoldingPricingInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'fallback_field': 'str',
        'override_field': 'str',
        'specific_fallbacks': 'list[SpecificHoldingPricingInfo]',
        'specific_overrides': 'list[SpecificHoldingPricingInfo]'
    }

    attribute_map = {
        'fallback_field': 'fallbackField',
        'override_field': 'overrideField',
        'specific_fallbacks': 'specificFallbacks',
        'specific_overrides': 'specificOverrides'
    }

    required_map = {
        'fallback_field': 'optional',
        'override_field': 'optional',
        'specific_fallbacks': 'optional',
        'specific_overrides': 'optional'
    }

    def __init__(self, fallback_field=None, override_field=None, specific_fallbacks=None, specific_overrides=None, local_vars_configuration=None):  # noqa: E501
        """HoldingPricingInfo - a model defined in OpenAPI"
        
        :param fallback_field:  The default Holding field to fall back on if the Market Data resolution process fails to find a price quote.
        :type fallback_field: str
        :param override_field:  The default Holding field to be used as an override for instrument price quotes. This cannot be specified  along with a FallbackField or any SpecificFallbacks, since we'll never attempt Market Data resolution  for price quotes if this field is populated.
        :type override_field: str
        :param specific_fallbacks:  Allows a user to specify fallbacks using Holding fields for sources that match a particular DependencySourceFilter.
        :type specific_fallbacks: list[lusid.SpecificHoldingPricingInfo]
        :param specific_overrides:  Allows a user to specify overrides using Holding fields for sources that match a particular DependencySourceFilter.
        :type specific_overrides: list[lusid.SpecificHoldingPricingInfo]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._fallback_field = None
        self._override_field = None
        self._specific_fallbacks = None
        self._specific_overrides = None
        self.discriminator = None

        self.fallback_field = fallback_field
        self.override_field = override_field
        self.specific_fallbacks = specific_fallbacks
        self.specific_overrides = specific_overrides

    @property
    def fallback_field(self):
        """Gets the fallback_field of this HoldingPricingInfo.  # noqa: E501

        The default Holding field to fall back on if the Market Data resolution process fails to find a price quote.  # noqa: E501

        :return: The fallback_field of this HoldingPricingInfo.  # noqa: E501
        :rtype: str
        """
        return self._fallback_field

    @fallback_field.setter
    def fallback_field(self, fallback_field):
        """Sets the fallback_field of this HoldingPricingInfo.

        The default Holding field to fall back on if the Market Data resolution process fails to find a price quote.  # noqa: E501

        :param fallback_field: The fallback_field of this HoldingPricingInfo.  # noqa: E501
        :type fallback_field: str
        """

        self._fallback_field = fallback_field

    @property
    def override_field(self):
        """Gets the override_field of this HoldingPricingInfo.  # noqa: E501

        The default Holding field to be used as an override for instrument price quotes. This cannot be specified  along with a FallbackField or any SpecificFallbacks, since we'll never attempt Market Data resolution  for price quotes if this field is populated.  # noqa: E501

        :return: The override_field of this HoldingPricingInfo.  # noqa: E501
        :rtype: str
        """
        return self._override_field

    @override_field.setter
    def override_field(self, override_field):
        """Sets the override_field of this HoldingPricingInfo.

        The default Holding field to be used as an override for instrument price quotes. This cannot be specified  along with a FallbackField or any SpecificFallbacks, since we'll never attempt Market Data resolution  for price quotes if this field is populated.  # noqa: E501

        :param override_field: The override_field of this HoldingPricingInfo.  # noqa: E501
        :type override_field: str
        """

        self._override_field = override_field

    @property
    def specific_fallbacks(self):
        """Gets the specific_fallbacks of this HoldingPricingInfo.  # noqa: E501

        Allows a user to specify fallbacks using Holding fields for sources that match a particular DependencySourceFilter.  # noqa: E501

        :return: The specific_fallbacks of this HoldingPricingInfo.  # noqa: E501
        :rtype: list[lusid.SpecificHoldingPricingInfo]
        """
        return self._specific_fallbacks

    @specific_fallbacks.setter
    def specific_fallbacks(self, specific_fallbacks):
        """Sets the specific_fallbacks of this HoldingPricingInfo.

        Allows a user to specify fallbacks using Holding fields for sources that match a particular DependencySourceFilter.  # noqa: E501

        :param specific_fallbacks: The specific_fallbacks of this HoldingPricingInfo.  # noqa: E501
        :type specific_fallbacks: list[lusid.SpecificHoldingPricingInfo]
        """

        self._specific_fallbacks = specific_fallbacks

    @property
    def specific_overrides(self):
        """Gets the specific_overrides of this HoldingPricingInfo.  # noqa: E501

        Allows a user to specify overrides using Holding fields for sources that match a particular DependencySourceFilter.  # noqa: E501

        :return: The specific_overrides of this HoldingPricingInfo.  # noqa: E501
        :rtype: list[lusid.SpecificHoldingPricingInfo]
        """
        return self._specific_overrides

    @specific_overrides.setter
    def specific_overrides(self, specific_overrides):
        """Sets the specific_overrides of this HoldingPricingInfo.

        Allows a user to specify overrides using Holding fields for sources that match a particular DependencySourceFilter.  # noqa: E501

        :param specific_overrides: The specific_overrides of this HoldingPricingInfo.  # noqa: E501
        :type specific_overrides: list[lusid.SpecificHoldingPricingInfo]
        """

        self._specific_overrides = specific_overrides

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HoldingPricingInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HoldingPricingInfo):
            return True

        return self.to_dict() != other.to_dict()
