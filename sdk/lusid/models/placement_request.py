# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.11.3255
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class PlacementRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'id': 'ResourceId',
        'block_ids': 'list[ResourceId]',
        'participation_ids': 'list[ResourceId]',
        'properties': 'dict(str, PerpetualProperty)',
        'instrument_identifiers': 'dict(str, str)',
        'quantity': 'float',
        'state': 'str',
        'side': 'str',
        'time_in_force': 'str',
        'type': 'str',
        'created_date': 'datetime',
        'limit_price': 'CurrencyAndAmount',
        'stop_price': 'CurrencyAndAmount',
        'counterparty': 'str'
    }

    attribute_map = {
        'id': 'id',
        'block_ids': 'blockIds',
        'participation_ids': 'participationIds',
        'properties': 'properties',
        'instrument_identifiers': 'instrumentIdentifiers',
        'quantity': 'quantity',
        'state': 'state',
        'side': 'side',
        'time_in_force': 'timeInForce',
        'type': 'type',
        'created_date': 'createdDate',
        'limit_price': 'limitPrice',
        'stop_price': 'stopPrice',
        'counterparty': 'counterparty'
    }

    required_map = {
        'id': 'required',
        'block_ids': 'required',
        'participation_ids': 'required',
        'properties': 'optional',
        'instrument_identifiers': 'required',
        'quantity': 'required',
        'state': 'required',
        'side': 'required',
        'time_in_force': 'required',
        'type': 'required',
        'created_date': 'required',
        'limit_price': 'optional',
        'stop_price': 'optional',
        'counterparty': 'required'
    }

    def __init__(self, id=None, block_ids=None, participation_ids=None, properties=None, instrument_identifiers=None, quantity=None, state=None, side=None, time_in_force=None, type=None, created_date=None, limit_price=None, stop_price=None, counterparty=None):  # noqa: E501
        """
        PlacementRequest - a model defined in OpenAPI

        :param id:  (required)
        :type id: lusid.ResourceId
        :param block_ids:  IDs of Blocks associated with this placement. (required)
        :type block_ids: list[lusid.ResourceId]
        :param participation_ids:  IDs of Participations associated with this placement. (required)
        :type participation_ids: list[lusid.ResourceId]
        :param properties:  Client-defined properties associated with this order.
        :type properties: dict[str, lusid.PerpetualProperty]
        :param instrument_identifiers:  The instrument ordered. (required)
        :type instrument_identifiers: dict(str, str)
        :param quantity:  The quantity of given instrument ordered. (required)
        :type quantity: float
        :param state:  The state of this placement (typically a FIX state; Open, Filled, etc). (required)
        :type state: str
        :param side:  The side (Buy, Sell, ...) of this placement. (required)
        :type side: str
        :param time_in_force:  The time in force applicable to this placement (GTC, FOK, Day, etc) (required)
        :type time_in_force: str
        :param type:  The type of this placement (Market, Limit, etc). (required)
        :type type: str
        :param created_date:  The active date of this placement. (required)
        :type created_date: datetime
        :param limit_price: 
        :type limit_price: lusid.CurrencyAndAmount
        :param stop_price: 
        :type stop_price: lusid.CurrencyAndAmount
        :param counterparty:  The market entity this placement is placed with. (required)
        :type counterparty: str

        """  # noqa: E501

        self._id = None
        self._block_ids = None
        self._participation_ids = None
        self._properties = None
        self._instrument_identifiers = None
        self._quantity = None
        self._state = None
        self._side = None
        self._time_in_force = None
        self._type = None
        self._created_date = None
        self._limit_price = None
        self._stop_price = None
        self._counterparty = None
        self.discriminator = None

        self.id = id
        self.block_ids = block_ids
        self.participation_ids = participation_ids
        self.properties = properties
        self.instrument_identifiers = instrument_identifiers
        self.quantity = quantity
        self.state = state
        self.side = side
        self.time_in_force = time_in_force
        self.type = type
        self.created_date = created_date
        if limit_price is not None:
            self.limit_price = limit_price
        if stop_price is not None:
            self.stop_price = stop_price
        self.counterparty = counterparty

    @property
    def id(self):
        """Gets the id of this PlacementRequest.  # noqa: E501


        :return: The id of this PlacementRequest.  # noqa: E501
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlacementRequest.


        :param id: The id of this PlacementRequest.  # noqa: E501
        :type: ResourceId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def block_ids(self):
        """Gets the block_ids of this PlacementRequest.  # noqa: E501

        IDs of Blocks associated with this placement.  # noqa: E501

        :return: The block_ids of this PlacementRequest.  # noqa: E501
        :rtype: list[ResourceId]
        """
        return self._block_ids

    @block_ids.setter
    def block_ids(self, block_ids):
        """Sets the block_ids of this PlacementRequest.

        IDs of Blocks associated with this placement.  # noqa: E501

        :param block_ids: The block_ids of this PlacementRequest.  # noqa: E501
        :type: list[ResourceId]
        """
        if block_ids is None:
            raise ValueError("Invalid value for `block_ids`, must not be `None`")  # noqa: E501

        self._block_ids = block_ids

    @property
    def participation_ids(self):
        """Gets the participation_ids of this PlacementRequest.  # noqa: E501

        IDs of Participations associated with this placement.  # noqa: E501

        :return: The participation_ids of this PlacementRequest.  # noqa: E501
        :rtype: list[ResourceId]
        """
        return self._participation_ids

    @participation_ids.setter
    def participation_ids(self, participation_ids):
        """Sets the participation_ids of this PlacementRequest.

        IDs of Participations associated with this placement.  # noqa: E501

        :param participation_ids: The participation_ids of this PlacementRequest.  # noqa: E501
        :type: list[ResourceId]
        """
        if participation_ids is None:
            raise ValueError("Invalid value for `participation_ids`, must not be `None`")  # noqa: E501

        self._participation_ids = participation_ids

    @property
    def properties(self):
        """Gets the properties of this PlacementRequest.  # noqa: E501

        Client-defined properties associated with this order.  # noqa: E501

        :return: The properties of this PlacementRequest.  # noqa: E501
        :rtype: dict(str, PerpetualProperty)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PlacementRequest.

        Client-defined properties associated with this order.  # noqa: E501

        :param properties: The properties of this PlacementRequest.  # noqa: E501
        :type: dict(str, PerpetualProperty)
        """

        self._properties = properties

    @property
    def instrument_identifiers(self):
        """Gets the instrument_identifiers of this PlacementRequest.  # noqa: E501

        The instrument ordered.  # noqa: E501

        :return: The instrument_identifiers of this PlacementRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._instrument_identifiers

    @instrument_identifiers.setter
    def instrument_identifiers(self, instrument_identifiers):
        """Sets the instrument_identifiers of this PlacementRequest.

        The instrument ordered.  # noqa: E501

        :param instrument_identifiers: The instrument_identifiers of this PlacementRequest.  # noqa: E501
        :type: dict(str, str)
        """
        if instrument_identifiers is None:
            raise ValueError("Invalid value for `instrument_identifiers`, must not be `None`")  # noqa: E501

        self._instrument_identifiers = instrument_identifiers

    @property
    def quantity(self):
        """Gets the quantity of this PlacementRequest.  # noqa: E501

        The quantity of given instrument ordered.  # noqa: E501

        :return: The quantity of this PlacementRequest.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PlacementRequest.

        The quantity of given instrument ordered.  # noqa: E501

        :param quantity: The quantity of this PlacementRequest.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def state(self):
        """Gets the state of this PlacementRequest.  # noqa: E501

        The state of this placement (typically a FIX state; Open, Filled, etc).  # noqa: E501

        :return: The state of this PlacementRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PlacementRequest.

        The state of this placement (typically a FIX state; Open, Filled, etc).  # noqa: E501

        :param state: The state of this PlacementRequest.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def side(self):
        """Gets the side of this PlacementRequest.  # noqa: E501

        The side (Buy, Sell, ...) of this placement.  # noqa: E501

        :return: The side of this PlacementRequest.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this PlacementRequest.

        The side (Buy, Sell, ...) of this placement.  # noqa: E501

        :param side: The side of this PlacementRequest.  # noqa: E501
        :type: str
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def time_in_force(self):
        """Gets the time_in_force of this PlacementRequest.  # noqa: E501

        The time in force applicable to this placement (GTC, FOK, Day, etc)  # noqa: E501

        :return: The time_in_force of this PlacementRequest.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this PlacementRequest.

        The time in force applicable to this placement (GTC, FOK, Day, etc)  # noqa: E501

        :param time_in_force: The time_in_force of this PlacementRequest.  # noqa: E501
        :type: str
        """
        if time_in_force is None:
            raise ValueError("Invalid value for `time_in_force`, must not be `None`")  # noqa: E501

        self._time_in_force = time_in_force

    @property
    def type(self):
        """Gets the type of this PlacementRequest.  # noqa: E501

        The type of this placement (Market, Limit, etc).  # noqa: E501

        :return: The type of this PlacementRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlacementRequest.

        The type of this placement (Market, Limit, etc).  # noqa: E501

        :param type: The type of this PlacementRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def created_date(self):
        """Gets the created_date of this PlacementRequest.  # noqa: E501

        The active date of this placement.  # noqa: E501

        :return: The created_date of this PlacementRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this PlacementRequest.

        The active date of this placement.  # noqa: E501

        :param created_date: The created_date of this PlacementRequest.  # noqa: E501
        :type: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def limit_price(self):
        """Gets the limit_price of this PlacementRequest.  # noqa: E501


        :return: The limit_price of this PlacementRequest.  # noqa: E501
        :rtype: CurrencyAndAmount
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this PlacementRequest.


        :param limit_price: The limit_price of this PlacementRequest.  # noqa: E501
        :type: CurrencyAndAmount
        """

        self._limit_price = limit_price

    @property
    def stop_price(self):
        """Gets the stop_price of this PlacementRequest.  # noqa: E501


        :return: The stop_price of this PlacementRequest.  # noqa: E501
        :rtype: CurrencyAndAmount
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this PlacementRequest.


        :param stop_price: The stop_price of this PlacementRequest.  # noqa: E501
        :type: CurrencyAndAmount
        """

        self._stop_price = stop_price

    @property
    def counterparty(self):
        """Gets the counterparty of this PlacementRequest.  # noqa: E501

        The market entity this placement is placed with.  # noqa: E501

        :return: The counterparty of this PlacementRequest.  # noqa: E501
        :rtype: str
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this PlacementRequest.

        The market entity this placement is placed with.  # noqa: E501

        :param counterparty: The counterparty of this PlacementRequest.  # noqa: E501
        :type: str
        """
        if counterparty is None:
            raise ValueError("Invalid value for `counterparty`, must not be `None`")  # noqa: E501

        self._counterparty = counterparty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
