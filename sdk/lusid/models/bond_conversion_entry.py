# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.181
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class BondConversionEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'date': 'datetime',
        'denomination': 'float',
        'price': 'float',
        'ratio': 'float'
    }

    attribute_map = {
        'date': 'date',
        'denomination': 'denomination',
        'price': 'price',
        'ratio': 'ratio'
    }

    required_map = {
        'date': 'optional',
        'denomination': 'optional',
        'price': 'optional',
        'ratio': 'optional'
    }

    def __init__(self, date=None, denomination=None, price=None, ratio=None, local_vars_configuration=None):  # noqa: E501
        """BondConversionEntry - a model defined in OpenAPI"
        
        :param date:  The date at which the bond can be converted
        :type date: datetime
        :param denomination:  The number of shares to be issued on conversion will be equal to the denomination of the  bond divided by the conversion price.  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.
        :type denomination: float
        :param price:  The conversion price  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.
        :type price: float
        :param ratio:  The number of common shares received at the time of conversion for each convertible bond  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.
        :type ratio: float

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._denomination = None
        self._price = None
        self._ratio = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if denomination is not None:
            self.denomination = denomination
        if price is not None:
            self.price = price
        if ratio is not None:
            self.ratio = ratio

    @property
    def date(self):
        """Gets the date of this BondConversionEntry.  # noqa: E501

        The date at which the bond can be converted  # noqa: E501

        :return: The date of this BondConversionEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this BondConversionEntry.

        The date at which the bond can be converted  # noqa: E501

        :param date: The date of this BondConversionEntry.  # noqa: E501
        :type date: datetime
        """

        self._date = date

    @property
    def denomination(self):
        """Gets the denomination of this BondConversionEntry.  # noqa: E501

        The number of shares to be issued on conversion will be equal to the denomination of the  bond divided by the conversion price.  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.  # noqa: E501

        :return: The denomination of this BondConversionEntry.  # noqa: E501
        :rtype: float
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this BondConversionEntry.

        The number of shares to be issued on conversion will be equal to the denomination of the  bond divided by the conversion price.  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.  # noqa: E501

        :param denomination: The denomination of this BondConversionEntry.  # noqa: E501
        :type denomination: float
        """

        self._denomination = denomination

    @property
    def price(self):
        """Gets the price of this BondConversionEntry.  # noqa: E501

        The conversion price  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.  # noqa: E501

        :return: The price of this BondConversionEntry.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BondConversionEntry.

        The conversion price  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.  # noqa: E501

        :param price: The price of this BondConversionEntry.  # noqa: E501
        :type price: float
        """

        self._price = price

    @property
    def ratio(self):
        """Gets the ratio of this BondConversionEntry.  # noqa: E501

        The number of common shares received at the time of conversion for each convertible bond  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.  # noqa: E501

        :return: The ratio of this BondConversionEntry.  # noqa: E501
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this BondConversionEntry.

        The number of common shares received at the time of conversion for each convertible bond  Two (and only two) entries out of (Price, Ratio, Denomination) must be provided.  So, to allow one entry out of the three to not be provided, we make all the three  nullable defaulting to zero and during validation we check if there is exactly one  of the three equal to zero.  # noqa: E501

        :param ratio: The ratio of this BondConversionEntry.  # noqa: E501
        :type ratio: float
        """

        self._ratio = ratio

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BondConversionEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BondConversionEntry):
            return True

        return self.to_dict() != other.to_dict()
