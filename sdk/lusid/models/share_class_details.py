# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.216
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class ShareClassDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'lusid_instrument_id': 'str',
        'instrument_scope': 'str',
        'dom_currency': 'str',
        'instrument_active': 'bool'
    }

    attribute_map = {
        'lusid_instrument_id': 'lusidInstrumentId',
        'instrument_scope': 'instrumentScope',
        'dom_currency': 'domCurrency',
        'instrument_active': 'instrumentActive'
    }

    required_map = {
        'lusid_instrument_id': 'optional',
        'instrument_scope': 'optional',
        'dom_currency': 'optional',
        'instrument_active': 'optional'
    }

    def __init__(self, lusid_instrument_id=None, instrument_scope=None, dom_currency=None, instrument_active=None, local_vars_configuration=None):  # noqa: E501
        """ShareClassDetails - a model defined in OpenAPI"
        
        :param lusid_instrument_id:  LUSID's internal unique instrument identifier, resolved from the share class' instrument identifiers
        :type lusid_instrument_id: str
        :param instrument_scope:  The scope in which the share class instrument lies.
        :type instrument_scope: str
        :param dom_currency:  The domestic currency of the share class instrument
        :type dom_currency: str
        :param instrument_active:  If the instrument of the share class is active.
        :type instrument_active: bool

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._lusid_instrument_id = None
        self._instrument_scope = None
        self._dom_currency = None
        self._instrument_active = None
        self.discriminator = None

        self.lusid_instrument_id = lusid_instrument_id
        self.instrument_scope = instrument_scope
        self.dom_currency = dom_currency
        if instrument_active is not None:
            self.instrument_active = instrument_active

    @property
    def lusid_instrument_id(self):
        """Gets the lusid_instrument_id of this ShareClassDetails.  # noqa: E501

        LUSID's internal unique instrument identifier, resolved from the share class' instrument identifiers  # noqa: E501

        :return: The lusid_instrument_id of this ShareClassDetails.  # noqa: E501
        :rtype: str
        """
        return self._lusid_instrument_id

    @lusid_instrument_id.setter
    def lusid_instrument_id(self, lusid_instrument_id):
        """Sets the lusid_instrument_id of this ShareClassDetails.

        LUSID's internal unique instrument identifier, resolved from the share class' instrument identifiers  # noqa: E501

        :param lusid_instrument_id: The lusid_instrument_id of this ShareClassDetails.  # noqa: E501
        :type lusid_instrument_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                lusid_instrument_id is not None and len(lusid_instrument_id) > 64):
            raise ValueError("Invalid value for `lusid_instrument_id`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                lusid_instrument_id is not None and len(lusid_instrument_id) < 1):
            raise ValueError("Invalid value for `lusid_instrument_id`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                lusid_instrument_id is not None and not re.search(r'^[a-zA-Z0-9\-_]+$', lusid_instrument_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `lusid_instrument_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501

        self._lusid_instrument_id = lusid_instrument_id

    @property
    def instrument_scope(self):
        """Gets the instrument_scope of this ShareClassDetails.  # noqa: E501

        The scope in which the share class instrument lies.  # noqa: E501

        :return: The instrument_scope of this ShareClassDetails.  # noqa: E501
        :rtype: str
        """
        return self._instrument_scope

    @instrument_scope.setter
    def instrument_scope(self, instrument_scope):
        """Sets the instrument_scope of this ShareClassDetails.

        The scope in which the share class instrument lies.  # noqa: E501

        :param instrument_scope: The instrument_scope of this ShareClassDetails.  # noqa: E501
        :type instrument_scope: str
        """
        if (self.local_vars_configuration.client_side_validation and
                instrument_scope is not None and len(instrument_scope) > 64):
            raise ValueError("Invalid value for `instrument_scope`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_scope is not None and len(instrument_scope) < 1):
            raise ValueError("Invalid value for `instrument_scope`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_scope is not None and not re.search(r'^[a-zA-Z0-9\-_]+$', instrument_scope)):  # noqa: E501
            raise ValueError(r"Invalid value for `instrument_scope`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501

        self._instrument_scope = instrument_scope

    @property
    def dom_currency(self):
        """Gets the dom_currency of this ShareClassDetails.  # noqa: E501

        The domestic currency of the share class instrument  # noqa: E501

        :return: The dom_currency of this ShareClassDetails.  # noqa: E501
        :rtype: str
        """
        return self._dom_currency

    @dom_currency.setter
    def dom_currency(self, dom_currency):
        """Sets the dom_currency of this ShareClassDetails.

        The domestic currency of the share class instrument  # noqa: E501

        :param dom_currency: The dom_currency of this ShareClassDetails.  # noqa: E501
        :type dom_currency: str
        """

        self._dom_currency = dom_currency

    @property
    def instrument_active(self):
        """Gets the instrument_active of this ShareClassDetails.  # noqa: E501

        If the instrument of the share class is active.  # noqa: E501

        :return: The instrument_active of this ShareClassDetails.  # noqa: E501
        :rtype: bool
        """
        return self._instrument_active

    @instrument_active.setter
    def instrument_active(self, instrument_active):
        """Sets the instrument_active of this ShareClassDetails.

        If the instrument of the share class is active.  # noqa: E501

        :param instrument_active: The instrument_active of this ShareClassDetails.  # noqa: E501
        :type instrument_active: bool
        """

        self._instrument_active = instrument_active

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareClassDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShareClassDetails):
            return True

        return self.to_dict() != other.to_dict()
