# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.177
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class QueryApplicableInstrumentEventsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'window_start': 'datetime',
        'window_end': 'datetime',
        'effective_at': 'datetime',
        'portfolio_entity_ids': 'list[PortfolioEntityId]',
        'forecasting_recipe_id': 'ResourceId'
    }

    attribute_map = {
        'window_start': 'windowStart',
        'window_end': 'windowEnd',
        'effective_at': 'effectiveAt',
        'portfolio_entity_ids': 'portfolioEntityIds',
        'forecasting_recipe_id': 'forecastingRecipeId'
    }

    required_map = {
        'window_start': 'required',
        'window_end': 'required',
        'effective_at': 'required',
        'portfolio_entity_ids': 'required',
        'forecasting_recipe_id': 'required'
    }

    def __init__(self, window_start=None, window_end=None, effective_at=None, portfolio_entity_ids=None, forecasting_recipe_id=None, local_vars_configuration=None):  # noqa: E501
        """QueryApplicableInstrumentEventsRequest - a model defined in OpenAPI"
        
        :param window_start:  The start date of the window. (required)
        :type window_start: datetime
        :param window_end:  The end date of the window. (required)
        :type window_end: datetime
        :param effective_at:  The Effective date that splits query window into two parts: factual period and forecast period (required)
        :type effective_at: datetime
        :param portfolio_entity_ids:  The set of portfolios and portfolio groups to which the instrument events must belong. (required)
        :type portfolio_entity_ids: list[lusid.PortfolioEntityId]
        :param forecasting_recipe_id:  (required)
        :type forecasting_recipe_id: lusid.ResourceId

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._window_start = None
        self._window_end = None
        self._effective_at = None
        self._portfolio_entity_ids = None
        self._forecasting_recipe_id = None
        self.discriminator = None

        self.window_start = window_start
        self.window_end = window_end
        self.effective_at = effective_at
        self.portfolio_entity_ids = portfolio_entity_ids
        self.forecasting_recipe_id = forecasting_recipe_id

    @property
    def window_start(self):
        """Gets the window_start of this QueryApplicableInstrumentEventsRequest.  # noqa: E501

        The start date of the window.  # noqa: E501

        :return: The window_start of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._window_start

    @window_start.setter
    def window_start(self, window_start):
        """Sets the window_start of this QueryApplicableInstrumentEventsRequest.

        The start date of the window.  # noqa: E501

        :param window_start: The window_start of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :type window_start: datetime
        """
        if self.local_vars_configuration.client_side_validation and window_start is None:  # noqa: E501
            raise ValueError("Invalid value for `window_start`, must not be `None`")  # noqa: E501

        self._window_start = window_start

    @property
    def window_end(self):
        """Gets the window_end of this QueryApplicableInstrumentEventsRequest.  # noqa: E501

        The end date of the window.  # noqa: E501

        :return: The window_end of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._window_end

    @window_end.setter
    def window_end(self, window_end):
        """Sets the window_end of this QueryApplicableInstrumentEventsRequest.

        The end date of the window.  # noqa: E501

        :param window_end: The window_end of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :type window_end: datetime
        """
        if self.local_vars_configuration.client_side_validation and window_end is None:  # noqa: E501
            raise ValueError("Invalid value for `window_end`, must not be `None`")  # noqa: E501

        self._window_end = window_end

    @property
    def effective_at(self):
        """Gets the effective_at of this QueryApplicableInstrumentEventsRequest.  # noqa: E501

        The Effective date that splits query window into two parts: factual period and forecast period  # noqa: E501

        :return: The effective_at of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_at

    @effective_at.setter
    def effective_at(self, effective_at):
        """Sets the effective_at of this QueryApplicableInstrumentEventsRequest.

        The Effective date that splits query window into two parts: factual period and forecast period  # noqa: E501

        :param effective_at: The effective_at of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :type effective_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and effective_at is None:  # noqa: E501
            raise ValueError("Invalid value for `effective_at`, must not be `None`")  # noqa: E501

        self._effective_at = effective_at

    @property
    def portfolio_entity_ids(self):
        """Gets the portfolio_entity_ids of this QueryApplicableInstrumentEventsRequest.  # noqa: E501

        The set of portfolios and portfolio groups to which the instrument events must belong.  # noqa: E501

        :return: The portfolio_entity_ids of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :rtype: list[lusid.PortfolioEntityId]
        """
        return self._portfolio_entity_ids

    @portfolio_entity_ids.setter
    def portfolio_entity_ids(self, portfolio_entity_ids):
        """Sets the portfolio_entity_ids of this QueryApplicableInstrumentEventsRequest.

        The set of portfolios and portfolio groups to which the instrument events must belong.  # noqa: E501

        :param portfolio_entity_ids: The portfolio_entity_ids of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :type portfolio_entity_ids: list[lusid.PortfolioEntityId]
        """
        if self.local_vars_configuration.client_side_validation and portfolio_entity_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `portfolio_entity_ids`, must not be `None`")  # noqa: E501

        self._portfolio_entity_ids = portfolio_entity_ids

    @property
    def forecasting_recipe_id(self):
        """Gets the forecasting_recipe_id of this QueryApplicableInstrumentEventsRequest.  # noqa: E501


        :return: The forecasting_recipe_id of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._forecasting_recipe_id

    @forecasting_recipe_id.setter
    def forecasting_recipe_id(self, forecasting_recipe_id):
        """Sets the forecasting_recipe_id of this QueryApplicableInstrumentEventsRequest.


        :param forecasting_recipe_id: The forecasting_recipe_id of this QueryApplicableInstrumentEventsRequest.  # noqa: E501
        :type forecasting_recipe_id: lusid.ResourceId
        """
        if self.local_vars_configuration.client_side_validation and forecasting_recipe_id is None:  # noqa: E501
            raise ValueError("Invalid value for `forecasting_recipe_id`, must not be `None`")  # noqa: E501

        self._forecasting_recipe_id = forecasting_recipe_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryApplicableInstrumentEventsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryApplicableInstrumentEventsRequest):
            return True

        return self.to_dict() != other.to_dict()
