# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.168
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class ApplicableInstrumentEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'portfolio_id': 'ResourceId',
        'holding_id': 'int',
        'lusid_instrument_id': 'str',
        'instrument_scope': 'str',
        'instrument_type': 'str',
        'instrument_event_type': 'str',
        'instrument_event_id': 'str',
        'generated_event': 'InstrumentEventHolder',
        'loaded_event': 'InstrumentEventHolder',
        'applied_instrument_event_instruction_id': 'str',
        'transactions': 'list[Transaction]'
    }

    attribute_map = {
        'portfolio_id': 'portfolioId',
        'holding_id': 'holdingId',
        'lusid_instrument_id': 'lusidInstrumentId',
        'instrument_scope': 'instrumentScope',
        'instrument_type': 'instrumentType',
        'instrument_event_type': 'instrumentEventType',
        'instrument_event_id': 'instrumentEventId',
        'generated_event': 'generatedEvent',
        'loaded_event': 'loadedEvent',
        'applied_instrument_event_instruction_id': 'appliedInstrumentEventInstructionId',
        'transactions': 'transactions'
    }

    required_map = {
        'portfolio_id': 'required',
        'holding_id': 'required',
        'lusid_instrument_id': 'required',
        'instrument_scope': 'required',
        'instrument_type': 'required',
        'instrument_event_type': 'required',
        'instrument_event_id': 'required',
        'generated_event': 'required',
        'loaded_event': 'required',
        'applied_instrument_event_instruction_id': 'required',
        'transactions': 'required'
    }

    def __init__(self, portfolio_id=None, holding_id=None, lusid_instrument_id=None, instrument_scope=None, instrument_type=None, instrument_event_type=None, instrument_event_id=None, generated_event=None, loaded_event=None, applied_instrument_event_instruction_id=None, transactions=None, local_vars_configuration=None):  # noqa: E501
        """ApplicableInstrumentEvent - a model defined in OpenAPI"
        
        :param portfolio_id:  (required)
        :type portfolio_id: lusid.ResourceId
        :param holding_id:  (required)
        :type holding_id: int
        :param lusid_instrument_id:  (required)
        :type lusid_instrument_id: str
        :param instrument_scope:  (required)
        :type instrument_scope: str
        :param instrument_type:  (required)
        :type instrument_type: str
        :param instrument_event_type:  (required)
        :type instrument_event_type: str
        :param instrument_event_id:  (required)
        :type instrument_event_id: str
        :param generated_event:  (required)
        :type generated_event: lusid.InstrumentEventHolder
        :param loaded_event:  (required)
        :type loaded_event: lusid.InstrumentEventHolder
        :param applied_instrument_event_instruction_id:  (required)
        :type applied_instrument_event_instruction_id: str
        :param transactions:  (required)
        :type transactions: list[lusid.Transaction]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._portfolio_id = None
        self._holding_id = None
        self._lusid_instrument_id = None
        self._instrument_scope = None
        self._instrument_type = None
        self._instrument_event_type = None
        self._instrument_event_id = None
        self._generated_event = None
        self._loaded_event = None
        self._applied_instrument_event_instruction_id = None
        self._transactions = None
        self.discriminator = None

        self.portfolio_id = portfolio_id
        self.holding_id = holding_id
        self.lusid_instrument_id = lusid_instrument_id
        self.instrument_scope = instrument_scope
        self.instrument_type = instrument_type
        self.instrument_event_type = instrument_event_type
        self.instrument_event_id = instrument_event_id
        self.generated_event = generated_event
        self.loaded_event = loaded_event
        self.applied_instrument_event_instruction_id = applied_instrument_event_instruction_id
        self.transactions = transactions

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The portfolio_id of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this ApplicableInstrumentEvent.


        :param portfolio_id: The portfolio_id of this ApplicableInstrumentEvent.  # noqa: E501
        :type portfolio_id: lusid.ResourceId
        """
        if self.local_vars_configuration.client_side_validation and portfolio_id is None:  # noqa: E501
            raise ValueError("Invalid value for `portfolio_id`, must not be `None`")  # noqa: E501

        self._portfolio_id = portfolio_id

    @property
    def holding_id(self):
        """Gets the holding_id of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The holding_id of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: int
        """
        return self._holding_id

    @holding_id.setter
    def holding_id(self, holding_id):
        """Sets the holding_id of this ApplicableInstrumentEvent.


        :param holding_id: The holding_id of this ApplicableInstrumentEvent.  # noqa: E501
        :type holding_id: int
        """
        if self.local_vars_configuration.client_side_validation and holding_id is None:  # noqa: E501
            raise ValueError("Invalid value for `holding_id`, must not be `None`")  # noqa: E501

        self._holding_id = holding_id

    @property
    def lusid_instrument_id(self):
        """Gets the lusid_instrument_id of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The lusid_instrument_id of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: str
        """
        return self._lusid_instrument_id

    @lusid_instrument_id.setter
    def lusid_instrument_id(self, lusid_instrument_id):
        """Sets the lusid_instrument_id of this ApplicableInstrumentEvent.


        :param lusid_instrument_id: The lusid_instrument_id of this ApplicableInstrumentEvent.  # noqa: E501
        :type lusid_instrument_id: str
        """
        if self.local_vars_configuration.client_side_validation and lusid_instrument_id is None:  # noqa: E501
            raise ValueError("Invalid value for `lusid_instrument_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                lusid_instrument_id is not None and len(lusid_instrument_id) < 1):
            raise ValueError("Invalid value for `lusid_instrument_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._lusid_instrument_id = lusid_instrument_id

    @property
    def instrument_scope(self):
        """Gets the instrument_scope of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The instrument_scope of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: str
        """
        return self._instrument_scope

    @instrument_scope.setter
    def instrument_scope(self, instrument_scope):
        """Sets the instrument_scope of this ApplicableInstrumentEvent.


        :param instrument_scope: The instrument_scope of this ApplicableInstrumentEvent.  # noqa: E501
        :type instrument_scope: str
        """
        if self.local_vars_configuration.client_side_validation and instrument_scope is None:  # noqa: E501
            raise ValueError("Invalid value for `instrument_scope`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_scope is not None and len(instrument_scope) < 1):
            raise ValueError("Invalid value for `instrument_scope`, length must be greater than or equal to `1`")  # noqa: E501

        self._instrument_scope = instrument_scope

    @property
    def instrument_type(self):
        """Gets the instrument_type of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The instrument_type of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this ApplicableInstrumentEvent.


        :param instrument_type: The instrument_type of this ApplicableInstrumentEvent.  # noqa: E501
        :type instrument_type: str
        """
        if self.local_vars_configuration.client_side_validation and instrument_type is None:  # noqa: E501
            raise ValueError("Invalid value for `instrument_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_type is not None and len(instrument_type) < 1):
            raise ValueError("Invalid value for `instrument_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._instrument_type = instrument_type

    @property
    def instrument_event_type(self):
        """Gets the instrument_event_type of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The instrument_event_type of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: str
        """
        return self._instrument_event_type

    @instrument_event_type.setter
    def instrument_event_type(self, instrument_event_type):
        """Sets the instrument_event_type of this ApplicableInstrumentEvent.


        :param instrument_event_type: The instrument_event_type of this ApplicableInstrumentEvent.  # noqa: E501
        :type instrument_event_type: str
        """
        if self.local_vars_configuration.client_side_validation and instrument_event_type is None:  # noqa: E501
            raise ValueError("Invalid value for `instrument_event_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_event_type is not None and len(instrument_event_type) < 1):
            raise ValueError("Invalid value for `instrument_event_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._instrument_event_type = instrument_event_type

    @property
    def instrument_event_id(self):
        """Gets the instrument_event_id of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The instrument_event_id of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: str
        """
        return self._instrument_event_id

    @instrument_event_id.setter
    def instrument_event_id(self, instrument_event_id):
        """Sets the instrument_event_id of this ApplicableInstrumentEvent.


        :param instrument_event_id: The instrument_event_id of this ApplicableInstrumentEvent.  # noqa: E501
        :type instrument_event_id: str
        """
        if self.local_vars_configuration.client_side_validation and instrument_event_id is None:  # noqa: E501
            raise ValueError("Invalid value for `instrument_event_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_event_id is not None and len(instrument_event_id) < 1):
            raise ValueError("Invalid value for `instrument_event_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._instrument_event_id = instrument_event_id

    @property
    def generated_event(self):
        """Gets the generated_event of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The generated_event of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: lusid.InstrumentEventHolder
        """
        return self._generated_event

    @generated_event.setter
    def generated_event(self, generated_event):
        """Sets the generated_event of this ApplicableInstrumentEvent.


        :param generated_event: The generated_event of this ApplicableInstrumentEvent.  # noqa: E501
        :type generated_event: lusid.InstrumentEventHolder
        """
        if self.local_vars_configuration.client_side_validation and generated_event is None:  # noqa: E501
            raise ValueError("Invalid value for `generated_event`, must not be `None`")  # noqa: E501

        self._generated_event = generated_event

    @property
    def loaded_event(self):
        """Gets the loaded_event of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The loaded_event of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: lusid.InstrumentEventHolder
        """
        return self._loaded_event

    @loaded_event.setter
    def loaded_event(self, loaded_event):
        """Sets the loaded_event of this ApplicableInstrumentEvent.


        :param loaded_event: The loaded_event of this ApplicableInstrumentEvent.  # noqa: E501
        :type loaded_event: lusid.InstrumentEventHolder
        """
        if self.local_vars_configuration.client_side_validation and loaded_event is None:  # noqa: E501
            raise ValueError("Invalid value for `loaded_event`, must not be `None`")  # noqa: E501

        self._loaded_event = loaded_event

    @property
    def applied_instrument_event_instruction_id(self):
        """Gets the applied_instrument_event_instruction_id of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The applied_instrument_event_instruction_id of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: str
        """
        return self._applied_instrument_event_instruction_id

    @applied_instrument_event_instruction_id.setter
    def applied_instrument_event_instruction_id(self, applied_instrument_event_instruction_id):
        """Sets the applied_instrument_event_instruction_id of this ApplicableInstrumentEvent.


        :param applied_instrument_event_instruction_id: The applied_instrument_event_instruction_id of this ApplicableInstrumentEvent.  # noqa: E501
        :type applied_instrument_event_instruction_id: str
        """
        if self.local_vars_configuration.client_side_validation and applied_instrument_event_instruction_id is None:  # noqa: E501
            raise ValueError("Invalid value for `applied_instrument_event_instruction_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                applied_instrument_event_instruction_id is not None and len(applied_instrument_event_instruction_id) < 1):
            raise ValueError("Invalid value for `applied_instrument_event_instruction_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._applied_instrument_event_instruction_id = applied_instrument_event_instruction_id

    @property
    def transactions(self):
        """Gets the transactions of this ApplicableInstrumentEvent.  # noqa: E501


        :return: The transactions of this ApplicableInstrumentEvent.  # noqa: E501
        :rtype: list[lusid.Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this ApplicableInstrumentEvent.


        :param transactions: The transactions of this ApplicableInstrumentEvent.  # noqa: E501
        :type transactions: list[lusid.Transaction]
        """
        if self.local_vars_configuration.client_side_validation and transactions is None:  # noqa: E501
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicableInstrumentEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicableInstrumentEvent):
            return True

        return self.to_dict() != other.to_dict()
