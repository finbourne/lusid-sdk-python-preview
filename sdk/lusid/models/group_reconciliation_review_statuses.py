# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.242
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class GroupReconciliationReviewStatuses(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'count_pending': 'int',
        'link_pending': 'Link',
        'count_reviewed': 'int',
        'link_reviewed': 'Link',
        'count_matched': 'int',
        'link_matched': 'Link',
        'count_invalid': 'int',
        'link_invalid': 'Link'
    }

    attribute_map = {
        'count_pending': 'countPending',
        'link_pending': 'linkPending',
        'count_reviewed': 'countReviewed',
        'link_reviewed': 'linkReviewed',
        'count_matched': 'countMatched',
        'link_matched': 'linkMatched',
        'count_invalid': 'countInvalid',
        'link_invalid': 'linkInvalid'
    }

    required_map = {
        'count_pending': 'required',
        'link_pending': 'required',
        'count_reviewed': 'required',
        'link_reviewed': 'required',
        'count_matched': 'required',
        'link_matched': 'required',
        'count_invalid': 'required',
        'link_invalid': 'required'
    }

    def __init__(self, count_pending=None, link_pending=None, count_reviewed=None, link_reviewed=None, count_matched=None, link_matched=None, count_invalid=None, link_invalid=None, local_vars_configuration=None):  # noqa: E501
        """GroupReconciliationReviewStatuses - a model defined in OpenAPI"
        
        :param count_pending:  The number of comparison results of reviewStatus \"Pending\" with this instanceId and reconciliationType (required)
        :type count_pending: int
        :param link_pending:  (required)
        :type link_pending: lusid.Link
        :param count_reviewed:  The number of comparison results of reviewStatus \"Reviewed\" with this instanceId and reconciliationType (required)
        :type count_reviewed: int
        :param link_reviewed:  (required)
        :type link_reviewed: lusid.Link
        :param count_matched:  The number of comparison results of reviewStatus \"Matched\" with this instanceId and reconciliationType (required)
        :type count_matched: int
        :param link_matched:  (required)
        :type link_matched: lusid.Link
        :param count_invalid:  The number of comparison results of reviewStatus \"Invalid\" with this instanceId and reconciliationType (required)
        :type count_invalid: int
        :param link_invalid:  (required)
        :type link_invalid: lusid.Link

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._count_pending = None
        self._link_pending = None
        self._count_reviewed = None
        self._link_reviewed = None
        self._count_matched = None
        self._link_matched = None
        self._count_invalid = None
        self._link_invalid = None
        self.discriminator = None

        self.count_pending = count_pending
        self.link_pending = link_pending
        self.count_reviewed = count_reviewed
        self.link_reviewed = link_reviewed
        self.count_matched = count_matched
        self.link_matched = link_matched
        self.count_invalid = count_invalid
        self.link_invalid = link_invalid

    @property
    def count_pending(self):
        """Gets the count_pending of this GroupReconciliationReviewStatuses.  # noqa: E501

        The number of comparison results of reviewStatus \"Pending\" with this instanceId and reconciliationType  # noqa: E501

        :return: The count_pending of this GroupReconciliationReviewStatuses.  # noqa: E501
        :rtype: int
        """
        return self._count_pending

    @count_pending.setter
    def count_pending(self, count_pending):
        """Sets the count_pending of this GroupReconciliationReviewStatuses.

        The number of comparison results of reviewStatus \"Pending\" with this instanceId and reconciliationType  # noqa: E501

        :param count_pending: The count_pending of this GroupReconciliationReviewStatuses.  # noqa: E501
        :type count_pending: int
        """
        if self.local_vars_configuration.client_side_validation and count_pending is None:  # noqa: E501
            raise ValueError("Invalid value for `count_pending`, must not be `None`")  # noqa: E501

        self._count_pending = count_pending

    @property
    def link_pending(self):
        """Gets the link_pending of this GroupReconciliationReviewStatuses.  # noqa: E501


        :return: The link_pending of this GroupReconciliationReviewStatuses.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_pending

    @link_pending.setter
    def link_pending(self, link_pending):
        """Sets the link_pending of this GroupReconciliationReviewStatuses.


        :param link_pending: The link_pending of this GroupReconciliationReviewStatuses.  # noqa: E501
        :type link_pending: lusid.Link
        """
        if self.local_vars_configuration.client_side_validation and link_pending is None:  # noqa: E501
            raise ValueError("Invalid value for `link_pending`, must not be `None`")  # noqa: E501

        self._link_pending = link_pending

    @property
    def count_reviewed(self):
        """Gets the count_reviewed of this GroupReconciliationReviewStatuses.  # noqa: E501

        The number of comparison results of reviewStatus \"Reviewed\" with this instanceId and reconciliationType  # noqa: E501

        :return: The count_reviewed of this GroupReconciliationReviewStatuses.  # noqa: E501
        :rtype: int
        """
        return self._count_reviewed

    @count_reviewed.setter
    def count_reviewed(self, count_reviewed):
        """Sets the count_reviewed of this GroupReconciliationReviewStatuses.

        The number of comparison results of reviewStatus \"Reviewed\" with this instanceId and reconciliationType  # noqa: E501

        :param count_reviewed: The count_reviewed of this GroupReconciliationReviewStatuses.  # noqa: E501
        :type count_reviewed: int
        """
        if self.local_vars_configuration.client_side_validation and count_reviewed is None:  # noqa: E501
            raise ValueError("Invalid value for `count_reviewed`, must not be `None`")  # noqa: E501

        self._count_reviewed = count_reviewed

    @property
    def link_reviewed(self):
        """Gets the link_reviewed of this GroupReconciliationReviewStatuses.  # noqa: E501


        :return: The link_reviewed of this GroupReconciliationReviewStatuses.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_reviewed

    @link_reviewed.setter
    def link_reviewed(self, link_reviewed):
        """Sets the link_reviewed of this GroupReconciliationReviewStatuses.


        :param link_reviewed: The link_reviewed of this GroupReconciliationReviewStatuses.  # noqa: E501
        :type link_reviewed: lusid.Link
        """
        if self.local_vars_configuration.client_side_validation and link_reviewed is None:  # noqa: E501
            raise ValueError("Invalid value for `link_reviewed`, must not be `None`")  # noqa: E501

        self._link_reviewed = link_reviewed

    @property
    def count_matched(self):
        """Gets the count_matched of this GroupReconciliationReviewStatuses.  # noqa: E501

        The number of comparison results of reviewStatus \"Matched\" with this instanceId and reconciliationType  # noqa: E501

        :return: The count_matched of this GroupReconciliationReviewStatuses.  # noqa: E501
        :rtype: int
        """
        return self._count_matched

    @count_matched.setter
    def count_matched(self, count_matched):
        """Sets the count_matched of this GroupReconciliationReviewStatuses.

        The number of comparison results of reviewStatus \"Matched\" with this instanceId and reconciliationType  # noqa: E501

        :param count_matched: The count_matched of this GroupReconciliationReviewStatuses.  # noqa: E501
        :type count_matched: int
        """
        if self.local_vars_configuration.client_side_validation and count_matched is None:  # noqa: E501
            raise ValueError("Invalid value for `count_matched`, must not be `None`")  # noqa: E501

        self._count_matched = count_matched

    @property
    def link_matched(self):
        """Gets the link_matched of this GroupReconciliationReviewStatuses.  # noqa: E501


        :return: The link_matched of this GroupReconciliationReviewStatuses.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_matched

    @link_matched.setter
    def link_matched(self, link_matched):
        """Sets the link_matched of this GroupReconciliationReviewStatuses.


        :param link_matched: The link_matched of this GroupReconciliationReviewStatuses.  # noqa: E501
        :type link_matched: lusid.Link
        """
        if self.local_vars_configuration.client_side_validation and link_matched is None:  # noqa: E501
            raise ValueError("Invalid value for `link_matched`, must not be `None`")  # noqa: E501

        self._link_matched = link_matched

    @property
    def count_invalid(self):
        """Gets the count_invalid of this GroupReconciliationReviewStatuses.  # noqa: E501

        The number of comparison results of reviewStatus \"Invalid\" with this instanceId and reconciliationType  # noqa: E501

        :return: The count_invalid of this GroupReconciliationReviewStatuses.  # noqa: E501
        :rtype: int
        """
        return self._count_invalid

    @count_invalid.setter
    def count_invalid(self, count_invalid):
        """Sets the count_invalid of this GroupReconciliationReviewStatuses.

        The number of comparison results of reviewStatus \"Invalid\" with this instanceId and reconciliationType  # noqa: E501

        :param count_invalid: The count_invalid of this GroupReconciliationReviewStatuses.  # noqa: E501
        :type count_invalid: int
        """
        if self.local_vars_configuration.client_side_validation and count_invalid is None:  # noqa: E501
            raise ValueError("Invalid value for `count_invalid`, must not be `None`")  # noqa: E501

        self._count_invalid = count_invalid

    @property
    def link_invalid(self):
        """Gets the link_invalid of this GroupReconciliationReviewStatuses.  # noqa: E501


        :return: The link_invalid of this GroupReconciliationReviewStatuses.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_invalid

    @link_invalid.setter
    def link_invalid(self, link_invalid):
        """Sets the link_invalid of this GroupReconciliationReviewStatuses.


        :param link_invalid: The link_invalid of this GroupReconciliationReviewStatuses.  # noqa: E501
        :type link_invalid: lusid.Link
        """
        if self.local_vars_configuration.client_side_validation and link_invalid is None:  # noqa: E501
            raise ValueError("Invalid value for `link_invalid`, must not be `None`")  # noqa: E501

        self._link_invalid = link_invalid

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupReconciliationReviewStatuses):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupReconciliationReviewStatuses):
            return True

        return self.to_dict() != other.to_dict()
