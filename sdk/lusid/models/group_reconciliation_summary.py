# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.242
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class GroupReconciliationSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'run_details': 'GroupReconciliationRunDetails',
        'group_reconciliation_definition_id': 'ResourceId',
        'reconciliation_type': 'str',
        'instance_id': 'GroupReconciliationInstanceId',
        'dates_reconciled': 'GroupReconciliationDates',
        'reconciliation_run_as_at': 'str',
        'count_comparison_results': 'int',
        'link_comparison_results': 'Link',
        'result_types': 'GroupReconciliationResultTypes',
        'result_statuses': 'GroupReconciliationResultStatuses',
        'review_statuses': 'GroupReconciliationReviewStatuses'
    }

    attribute_map = {
        'run_details': 'runDetails',
        'group_reconciliation_definition_id': 'groupReconciliationDefinitionId',
        'reconciliation_type': 'reconciliationType',
        'instance_id': 'instanceId',
        'dates_reconciled': 'datesReconciled',
        'reconciliation_run_as_at': 'reconciliationRunAsAt',
        'count_comparison_results': 'countComparisonResults',
        'link_comparison_results': 'linkComparisonResults',
        'result_types': 'resultTypes',
        'result_statuses': 'resultStatuses',
        'review_statuses': 'reviewStatuses'
    }

    required_map = {
        'run_details': 'optional',
        'group_reconciliation_definition_id': 'optional',
        'reconciliation_type': 'required',
        'instance_id': 'required',
        'dates_reconciled': 'required',
        'reconciliation_run_as_at': 'required',
        'count_comparison_results': 'required',
        'link_comparison_results': 'optional',
        'result_types': 'optional',
        'result_statuses': 'optional',
        'review_statuses': 'optional'
    }

    def __init__(self, run_details=None, group_reconciliation_definition_id=None, reconciliation_type=None, instance_id=None, dates_reconciled=None, reconciliation_run_as_at=None, count_comparison_results=None, link_comparison_results=None, result_types=None, result_statuses=None, review_statuses=None, local_vars_configuration=None):  # noqa: E501
        """GroupReconciliationSummary - a model defined in OpenAPI"
        
        :param run_details: 
        :type run_details: lusid.GroupReconciliationRunDetails
        :param group_reconciliation_definition_id: 
        :type group_reconciliation_definition_id: lusid.ResourceId
        :param reconciliation_type:  The type of reconciliation to perform. \"Holding\" | \"Transaction\" | \"Valuation\" (required)
        :type reconciliation_type: str
        :param instance_id:  (required)
        :type instance_id: lusid.GroupReconciliationInstanceId
        :param dates_reconciled:  (required)
        :type dates_reconciled: lusid.GroupReconciliationDates
        :param reconciliation_run_as_at:  The date and time the reconciliation was run (required)
        :type reconciliation_run_as_at: str
        :param count_comparison_results:  The total number of comparison results with this InstanceId and ReconciliationType (required)
        :type count_comparison_results: int
        :param link_comparison_results: 
        :type link_comparison_results: lusid.Link
        :param result_types: 
        :type result_types: lusid.GroupReconciliationResultTypes
        :param result_statuses: 
        :type result_statuses: lusid.GroupReconciliationResultStatuses
        :param review_statuses: 
        :type review_statuses: lusid.GroupReconciliationReviewStatuses

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._run_details = None
        self._group_reconciliation_definition_id = None
        self._reconciliation_type = None
        self._instance_id = None
        self._dates_reconciled = None
        self._reconciliation_run_as_at = None
        self._count_comparison_results = None
        self._link_comparison_results = None
        self._result_types = None
        self._result_statuses = None
        self._review_statuses = None
        self.discriminator = None

        if run_details is not None:
            self.run_details = run_details
        if group_reconciliation_definition_id is not None:
            self.group_reconciliation_definition_id = group_reconciliation_definition_id
        self.reconciliation_type = reconciliation_type
        self.instance_id = instance_id
        self.dates_reconciled = dates_reconciled
        self.reconciliation_run_as_at = reconciliation_run_as_at
        self.count_comparison_results = count_comparison_results
        if link_comparison_results is not None:
            self.link_comparison_results = link_comparison_results
        if result_types is not None:
            self.result_types = result_types
        if result_statuses is not None:
            self.result_statuses = result_statuses
        if review_statuses is not None:
            self.review_statuses = review_statuses

    @property
    def run_details(self):
        """Gets the run_details of this GroupReconciliationSummary.  # noqa: E501


        :return: The run_details of this GroupReconciliationSummary.  # noqa: E501
        :rtype: lusid.GroupReconciliationRunDetails
        """
        return self._run_details

    @run_details.setter
    def run_details(self, run_details):
        """Sets the run_details of this GroupReconciliationSummary.


        :param run_details: The run_details of this GroupReconciliationSummary.  # noqa: E501
        :type run_details: lusid.GroupReconciliationRunDetails
        """

        self._run_details = run_details

    @property
    def group_reconciliation_definition_id(self):
        """Gets the group_reconciliation_definition_id of this GroupReconciliationSummary.  # noqa: E501


        :return: The group_reconciliation_definition_id of this GroupReconciliationSummary.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._group_reconciliation_definition_id

    @group_reconciliation_definition_id.setter
    def group_reconciliation_definition_id(self, group_reconciliation_definition_id):
        """Sets the group_reconciliation_definition_id of this GroupReconciliationSummary.


        :param group_reconciliation_definition_id: The group_reconciliation_definition_id of this GroupReconciliationSummary.  # noqa: E501
        :type group_reconciliation_definition_id: lusid.ResourceId
        """

        self._group_reconciliation_definition_id = group_reconciliation_definition_id

    @property
    def reconciliation_type(self):
        """Gets the reconciliation_type of this GroupReconciliationSummary.  # noqa: E501

        The type of reconciliation to perform. \"Holding\" | \"Transaction\" | \"Valuation\"  # noqa: E501

        :return: The reconciliation_type of this GroupReconciliationSummary.  # noqa: E501
        :rtype: str
        """
        return self._reconciliation_type

    @reconciliation_type.setter
    def reconciliation_type(self, reconciliation_type):
        """Sets the reconciliation_type of this GroupReconciliationSummary.

        The type of reconciliation to perform. \"Holding\" | \"Transaction\" | \"Valuation\"  # noqa: E501

        :param reconciliation_type: The reconciliation_type of this GroupReconciliationSummary.  # noqa: E501
        :type reconciliation_type: str
        """
        if self.local_vars_configuration.client_side_validation and reconciliation_type is None:  # noqa: E501
            raise ValueError("Invalid value for `reconciliation_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reconciliation_type is not None and len(reconciliation_type) < 1):
            raise ValueError("Invalid value for `reconciliation_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._reconciliation_type = reconciliation_type

    @property
    def instance_id(self):
        """Gets the instance_id of this GroupReconciliationSummary.  # noqa: E501


        :return: The instance_id of this GroupReconciliationSummary.  # noqa: E501
        :rtype: lusid.GroupReconciliationInstanceId
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this GroupReconciliationSummary.


        :param instance_id: The instance_id of this GroupReconciliationSummary.  # noqa: E501
        :type instance_id: lusid.GroupReconciliationInstanceId
        """
        if self.local_vars_configuration.client_side_validation and instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def dates_reconciled(self):
        """Gets the dates_reconciled of this GroupReconciliationSummary.  # noqa: E501


        :return: The dates_reconciled of this GroupReconciliationSummary.  # noqa: E501
        :rtype: lusid.GroupReconciliationDates
        """
        return self._dates_reconciled

    @dates_reconciled.setter
    def dates_reconciled(self, dates_reconciled):
        """Sets the dates_reconciled of this GroupReconciliationSummary.


        :param dates_reconciled: The dates_reconciled of this GroupReconciliationSummary.  # noqa: E501
        :type dates_reconciled: lusid.GroupReconciliationDates
        """
        if self.local_vars_configuration.client_side_validation and dates_reconciled is None:  # noqa: E501
            raise ValueError("Invalid value for `dates_reconciled`, must not be `None`")  # noqa: E501

        self._dates_reconciled = dates_reconciled

    @property
    def reconciliation_run_as_at(self):
        """Gets the reconciliation_run_as_at of this GroupReconciliationSummary.  # noqa: E501

        The date and time the reconciliation was run  # noqa: E501

        :return: The reconciliation_run_as_at of this GroupReconciliationSummary.  # noqa: E501
        :rtype: str
        """
        return self._reconciliation_run_as_at

    @reconciliation_run_as_at.setter
    def reconciliation_run_as_at(self, reconciliation_run_as_at):
        """Sets the reconciliation_run_as_at of this GroupReconciliationSummary.

        The date and time the reconciliation was run  # noqa: E501

        :param reconciliation_run_as_at: The reconciliation_run_as_at of this GroupReconciliationSummary.  # noqa: E501
        :type reconciliation_run_as_at: str
        """
        if self.local_vars_configuration.client_side_validation and reconciliation_run_as_at is None:  # noqa: E501
            raise ValueError("Invalid value for `reconciliation_run_as_at`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reconciliation_run_as_at is not None and len(reconciliation_run_as_at) < 1):
            raise ValueError("Invalid value for `reconciliation_run_as_at`, length must be greater than or equal to `1`")  # noqa: E501

        self._reconciliation_run_as_at = reconciliation_run_as_at

    @property
    def count_comparison_results(self):
        """Gets the count_comparison_results of this GroupReconciliationSummary.  # noqa: E501

        The total number of comparison results with this InstanceId and ReconciliationType  # noqa: E501

        :return: The count_comparison_results of this GroupReconciliationSummary.  # noqa: E501
        :rtype: int
        """
        return self._count_comparison_results

    @count_comparison_results.setter
    def count_comparison_results(self, count_comparison_results):
        """Sets the count_comparison_results of this GroupReconciliationSummary.

        The total number of comparison results with this InstanceId and ReconciliationType  # noqa: E501

        :param count_comparison_results: The count_comparison_results of this GroupReconciliationSummary.  # noqa: E501
        :type count_comparison_results: int
        """
        if self.local_vars_configuration.client_side_validation and count_comparison_results is None:  # noqa: E501
            raise ValueError("Invalid value for `count_comparison_results`, must not be `None`")  # noqa: E501

        self._count_comparison_results = count_comparison_results

    @property
    def link_comparison_results(self):
        """Gets the link_comparison_results of this GroupReconciliationSummary.  # noqa: E501


        :return: The link_comparison_results of this GroupReconciliationSummary.  # noqa: E501
        :rtype: lusid.Link
        """
        return self._link_comparison_results

    @link_comparison_results.setter
    def link_comparison_results(self, link_comparison_results):
        """Sets the link_comparison_results of this GroupReconciliationSummary.


        :param link_comparison_results: The link_comparison_results of this GroupReconciliationSummary.  # noqa: E501
        :type link_comparison_results: lusid.Link
        """

        self._link_comparison_results = link_comparison_results

    @property
    def result_types(self):
        """Gets the result_types of this GroupReconciliationSummary.  # noqa: E501


        :return: The result_types of this GroupReconciliationSummary.  # noqa: E501
        :rtype: lusid.GroupReconciliationResultTypes
        """
        return self._result_types

    @result_types.setter
    def result_types(self, result_types):
        """Sets the result_types of this GroupReconciliationSummary.


        :param result_types: The result_types of this GroupReconciliationSummary.  # noqa: E501
        :type result_types: lusid.GroupReconciliationResultTypes
        """

        self._result_types = result_types

    @property
    def result_statuses(self):
        """Gets the result_statuses of this GroupReconciliationSummary.  # noqa: E501


        :return: The result_statuses of this GroupReconciliationSummary.  # noqa: E501
        :rtype: lusid.GroupReconciliationResultStatuses
        """
        return self._result_statuses

    @result_statuses.setter
    def result_statuses(self, result_statuses):
        """Sets the result_statuses of this GroupReconciliationSummary.


        :param result_statuses: The result_statuses of this GroupReconciliationSummary.  # noqa: E501
        :type result_statuses: lusid.GroupReconciliationResultStatuses
        """

        self._result_statuses = result_statuses

    @property
    def review_statuses(self):
        """Gets the review_statuses of this GroupReconciliationSummary.  # noqa: E501


        :return: The review_statuses of this GroupReconciliationSummary.  # noqa: E501
        :rtype: lusid.GroupReconciliationReviewStatuses
        """
        return self._review_statuses

    @review_statuses.setter
    def review_statuses(self, review_statuses):
        """Sets the review_statuses of this GroupReconciliationSummary.


        :param review_statuses: The review_statuses of this GroupReconciliationSummary.  # noqa: E501
        :type review_statuses: lusid.GroupReconciliationReviewStatuses
        """

        self._review_statuses = review_statuses

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupReconciliationSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupReconciliationSummary):
            return True

        return self.to_dict() != other.to_dict()
