# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.242
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class CallOnIntermediateSecuritiesEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'expiry_date': 'datetime',
        'payment_date': 'datetime',
        'new_instrument': 'NewInstrument',
        'units_ratio': 'UnitsRatio',
        'price': 'float',
        'exercise_currency': 'str',
        'option_exercise_elections': 'list[OptionExerciseElection]',
        'lapse_elections': 'list[LapseElection]',
        'instrument_event_type': 'str'
    }

    attribute_map = {
        'expiry_date': 'expiryDate',
        'payment_date': 'paymentDate',
        'new_instrument': 'newInstrument',
        'units_ratio': 'unitsRatio',
        'price': 'price',
        'exercise_currency': 'exerciseCurrency',
        'option_exercise_elections': 'optionExerciseElections',
        'lapse_elections': 'lapseElections',
        'instrument_event_type': 'instrumentEventType'
    }

    required_map = {
        'expiry_date': 'required',
        'payment_date': 'required',
        'new_instrument': 'required',
        'units_ratio': 'required',
        'price': 'required',
        'exercise_currency': 'required',
        'option_exercise_elections': 'optional',
        'lapse_elections': 'optional',
        'instrument_event_type': 'required'
    }

    def __init__(self, expiry_date=None, payment_date=None, new_instrument=None, units_ratio=None, price=None, exercise_currency=None, option_exercise_elections=None, lapse_elections=None, instrument_event_type=None, local_vars_configuration=None):  # noqa: E501
        """CallOnIntermediateSecuritiesEvent - a model defined in OpenAPI"
        
        :param expiry_date:  The date on which the issue ends. (required)
        :type expiry_date: datetime
        :param payment_date:  The payment date of the event. (required)
        :type payment_date: datetime
        :param new_instrument:  (required)
        :type new_instrument: lusid.NewInstrument
        :param units_ratio:  (required)
        :type units_ratio: lusid.UnitsRatio
        :param price:  The price at which new units are purchased. (required)
        :type price: float
        :param exercise_currency:  The currency of the exercise. (required)
        :type exercise_currency: str
        :param option_exercise_elections:  Option exercise election for this event.
        :type option_exercise_elections: list[lusid.OptionExerciseElection]
        :param lapse_elections:  Lapse election for this event.
        :type lapse_elections: list[lusid.LapseElection]
        :param instrument_event_type:  The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent (required)
        :type instrument_event_type: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._expiry_date = None
        self._payment_date = None
        self._new_instrument = None
        self._units_ratio = None
        self._price = None
        self._exercise_currency = None
        self._option_exercise_elections = None
        self._lapse_elections = None
        self._instrument_event_type = None
        self.discriminator = None

        self.expiry_date = expiry_date
        self.payment_date = payment_date
        self.new_instrument = new_instrument
        self.units_ratio = units_ratio
        self.price = price
        self.exercise_currency = exercise_currency
        self.option_exercise_elections = option_exercise_elections
        self.lapse_elections = lapse_elections
        self.instrument_event_type = instrument_event_type

    @property
    def expiry_date(self):
        """Gets the expiry_date of this CallOnIntermediateSecuritiesEvent.  # noqa: E501

        The date on which the issue ends.  # noqa: E501

        :return: The expiry_date of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this CallOnIntermediateSecuritiesEvent.

        The date on which the issue ends.  # noqa: E501

        :param expiry_date: The expiry_date of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type expiry_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and expiry_date is None:  # noqa: E501
            raise ValueError("Invalid value for `expiry_date`, must not be `None`")  # noqa: E501

        self._expiry_date = expiry_date

    @property
    def payment_date(self):
        """Gets the payment_date of this CallOnIntermediateSecuritiesEvent.  # noqa: E501

        The payment date of the event.  # noqa: E501

        :return: The payment_date of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this CallOnIntermediateSecuritiesEvent.

        The payment date of the event.  # noqa: E501

        :param payment_date: The payment_date of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type payment_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and payment_date is None:  # noqa: E501
            raise ValueError("Invalid value for `payment_date`, must not be `None`")  # noqa: E501

        self._payment_date = payment_date

    @property
    def new_instrument(self):
        """Gets the new_instrument of this CallOnIntermediateSecuritiesEvent.  # noqa: E501


        :return: The new_instrument of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: lusid.NewInstrument
        """
        return self._new_instrument

    @new_instrument.setter
    def new_instrument(self, new_instrument):
        """Sets the new_instrument of this CallOnIntermediateSecuritiesEvent.


        :param new_instrument: The new_instrument of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type new_instrument: lusid.NewInstrument
        """
        if self.local_vars_configuration.client_side_validation and new_instrument is None:  # noqa: E501
            raise ValueError("Invalid value for `new_instrument`, must not be `None`")  # noqa: E501

        self._new_instrument = new_instrument

    @property
    def units_ratio(self):
        """Gets the units_ratio of this CallOnIntermediateSecuritiesEvent.  # noqa: E501


        :return: The units_ratio of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: lusid.UnitsRatio
        """
        return self._units_ratio

    @units_ratio.setter
    def units_ratio(self, units_ratio):
        """Sets the units_ratio of this CallOnIntermediateSecuritiesEvent.


        :param units_ratio: The units_ratio of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type units_ratio: lusid.UnitsRatio
        """
        if self.local_vars_configuration.client_side_validation and units_ratio is None:  # noqa: E501
            raise ValueError("Invalid value for `units_ratio`, must not be `None`")  # noqa: E501

        self._units_ratio = units_ratio

    @property
    def price(self):
        """Gets the price of this CallOnIntermediateSecuritiesEvent.  # noqa: E501

        The price at which new units are purchased.  # noqa: E501

        :return: The price of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CallOnIntermediateSecuritiesEvent.

        The price at which new units are purchased.  # noqa: E501

        :param price: The price of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type price: float
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def exercise_currency(self):
        """Gets the exercise_currency of this CallOnIntermediateSecuritiesEvent.  # noqa: E501

        The currency of the exercise.  # noqa: E501

        :return: The exercise_currency of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: str
        """
        return self._exercise_currency

    @exercise_currency.setter
    def exercise_currency(self, exercise_currency):
        """Sets the exercise_currency of this CallOnIntermediateSecuritiesEvent.

        The currency of the exercise.  # noqa: E501

        :param exercise_currency: The exercise_currency of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type exercise_currency: str
        """
        if self.local_vars_configuration.client_side_validation and exercise_currency is None:  # noqa: E501
            raise ValueError("Invalid value for `exercise_currency`, must not be `None`")  # noqa: E501

        self._exercise_currency = exercise_currency

    @property
    def option_exercise_elections(self):
        """Gets the option_exercise_elections of this CallOnIntermediateSecuritiesEvent.  # noqa: E501

        Option exercise election for this event.  # noqa: E501

        :return: The option_exercise_elections of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: list[lusid.OptionExerciseElection]
        """
        return self._option_exercise_elections

    @option_exercise_elections.setter
    def option_exercise_elections(self, option_exercise_elections):
        """Sets the option_exercise_elections of this CallOnIntermediateSecuritiesEvent.

        Option exercise election for this event.  # noqa: E501

        :param option_exercise_elections: The option_exercise_elections of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type option_exercise_elections: list[lusid.OptionExerciseElection]
        """

        self._option_exercise_elections = option_exercise_elections

    @property
    def lapse_elections(self):
        """Gets the lapse_elections of this CallOnIntermediateSecuritiesEvent.  # noqa: E501

        Lapse election for this event.  # noqa: E501

        :return: The lapse_elections of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: list[lusid.LapseElection]
        """
        return self._lapse_elections

    @lapse_elections.setter
    def lapse_elections(self, lapse_elections):
        """Sets the lapse_elections of this CallOnIntermediateSecuritiesEvent.

        Lapse election for this event.  # noqa: E501

        :param lapse_elections: The lapse_elections of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type lapse_elections: list[lusid.LapseElection]
        """

        self._lapse_elections = lapse_elections

    @property
    def instrument_event_type(self):
        """Gets the instrument_event_type of this CallOnIntermediateSecuritiesEvent.  # noqa: E501

        The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent  # noqa: E501

        :return: The instrument_event_type of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :rtype: str
        """
        return self._instrument_event_type

    @instrument_event_type.setter
    def instrument_event_type(self, instrument_event_type):
        """Sets the instrument_event_type of this CallOnIntermediateSecuritiesEvent.

        The Type of Event. The available values are: TransitionEvent, InformationalEvent, OpenEvent, CloseEvent, StockSplitEvent, BondDefaultEvent, CashDividendEvent, AmortisationEvent, CashFlowEvent, ExerciseEvent, ResetEvent, TriggerEvent, RawVendorEvent, InformationalErrorEvent, BondCouponEvent, DividendReinvestmentEvent, AccumulationEvent, BondPrincipalEvent, DividendOptionEvent, MaturityEvent, FxForwardSettlementEvent, ExpiryEvent, ScripDividendEvent, StockDividendEvent, ReverseStockSplitEvent, CapitalDistributionEvent, SpinOffEvent, MergerEvent, FutureExpiryEvent, SwapCashFlowEvent, SwapPrincipalEvent, CreditPremiumCashFlowEvent, CdsCreditEvent, CdxCreditEvent, MbsCouponEvent, MbsPrincipalEvent, BonusIssueEvent, MbsPrincipalWriteOffEvent, MbsInterestDeferralEvent, MbsInterestShortfallEvent, TenderEvent, CallOnIntermediateSecuritiesEvent, IntermediateSecuritiesDistributionEvent  # noqa: E501

        :param instrument_event_type: The instrument_event_type of this CallOnIntermediateSecuritiesEvent.  # noqa: E501
        :type instrument_event_type: str
        """
        if self.local_vars_configuration.client_side_validation and instrument_event_type is None:  # noqa: E501
            raise ValueError("Invalid value for `instrument_event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["TransitionEvent", "InformationalEvent", "OpenEvent", "CloseEvent", "StockSplitEvent", "BondDefaultEvent", "CashDividendEvent", "AmortisationEvent", "CashFlowEvent", "ExerciseEvent", "ResetEvent", "TriggerEvent", "RawVendorEvent", "InformationalErrorEvent", "BondCouponEvent", "DividendReinvestmentEvent", "AccumulationEvent", "BondPrincipalEvent", "DividendOptionEvent", "MaturityEvent", "FxForwardSettlementEvent", "ExpiryEvent", "ScripDividendEvent", "StockDividendEvent", "ReverseStockSplitEvent", "CapitalDistributionEvent", "SpinOffEvent", "MergerEvent", "FutureExpiryEvent", "SwapCashFlowEvent", "SwapPrincipalEvent", "CreditPremiumCashFlowEvent", "CdsCreditEvent", "CdxCreditEvent", "MbsCouponEvent", "MbsPrincipalEvent", "BonusIssueEvent", "MbsPrincipalWriteOffEvent", "MbsInterestDeferralEvent", "MbsInterestShortfallEvent", "TenderEvent", "CallOnIntermediateSecuritiesEvent", "IntermediateSecuritiesDistributionEvent"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and instrument_event_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `instrument_event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument_event_type, allowed_values)
            )

        self._instrument_event_type = instrument_event_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallOnIntermediateSecuritiesEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CallOnIntermediateSecuritiesEvent):
            return True

        return self.to_dict() != other.to_dict()
