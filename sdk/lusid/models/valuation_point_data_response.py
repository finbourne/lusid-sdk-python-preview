# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.177
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class ValuationPointDataResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'href': 'str',
        'type': 'str',
        'status': 'str',
        'backout': 'dict(str, float)',
        'dealing': 'dict(str, float)',
        'pn_l': 'dict(str, float)',
        'gav': 'float',
        'fees': 'dict(str, FeeAccrual)',
        'nav': 'float',
        'previous_nav': 'float',
        'links': 'list[Link]'
    }

    attribute_map = {
        'href': 'href',
        'type': 'type',
        'status': 'status',
        'backout': 'backout',
        'dealing': 'dealing',
        'pn_l': 'pnL',
        'gav': 'gav',
        'fees': 'fees',
        'nav': 'nav',
        'previous_nav': 'previousNav',
        'links': 'links'
    }

    required_map = {
        'href': 'optional',
        'type': 'required',
        'status': 'required',
        'backout': 'required',
        'dealing': 'required',
        'pn_l': 'required',
        'gav': 'required',
        'fees': 'required',
        'nav': 'required',
        'previous_nav': 'required',
        'links': 'optional'
    }

    def __init__(self, href=None, type=None, status=None, backout=None, dealing=None, pn_l=None, gav=None, fees=None, nav=None, previous_nav=None, links=None, local_vars_configuration=None):  # noqa: E501
        """ValuationPointDataResponse - a model defined in OpenAPI"
        
        :param href:  The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
        :type href: str
        :param type:  The Type of the associated Diary Entry ('PeriodBoundary','ValuationPoint','Other' or 'Adhoc' when a diary Entry wasn't used). (required)
        :type type: str
        :param status:  The Status of the associated Diary Entry ('Estimate','Final','Candidate' or 'Unofficial'). (required)
        :type status: str
        :param backout:  Bucket of detail for the Valuation Point, where data points have been 'backed out'. (required)
        :type backout: dict(str, float)
        :param dealing:  Bucket of detail for any 'Dealing' that has occured inside the queried period. (required)
        :type dealing: dict(str, float)
        :param pn_l:  Bucket of detail for 'PnL' that has occured inside the queried period. (required)
        :type pn_l: dict(str, float)
        :param gav:  The Gross Asset Value of the Fund at the Period end. This is effectively a summation of all Trial balance entries linked to accounts of types 'Asset' and 'Liabilities'. (required)
        :type gav: float
        :param fees:  Bucket of detail for any 'Fees' that have been charged in the selected period. (required)
        :type fees: dict[str, lusid.FeeAccrual]
        :param nav:  The Net Asset Value of the Fund at the Period end. This represents the GAV with any fees applied in the period. (required)
        :type nav: float
        :param previous_nav:  The Net Asset Value of the Fund at the End of the last Period. (required)
        :type previous_nav: float
        :param links:  Collection of links.
        :type links: list[lusid.Link]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._href = None
        self._type = None
        self._status = None
        self._backout = None
        self._dealing = None
        self._pn_l = None
        self._gav = None
        self._fees = None
        self._nav = None
        self._previous_nav = None
        self._links = None
        self.discriminator = None

        self.href = href
        self.type = type
        self.status = status
        self.backout = backout
        self.dealing = dealing
        self.pn_l = pn_l
        self.gav = gav
        self.fees = fees
        self.nav = nav
        self.previous_nav = previous_nav
        self.links = links

    @property
    def href(self):
        """Gets the href of this ValuationPointDataResponse.  # noqa: E501

        The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.  # noqa: E501

        :return: The href of this ValuationPointDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ValuationPointDataResponse.

        The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.  # noqa: E501

        :param href: The href of this ValuationPointDataResponse.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def type(self):
        """Gets the type of this ValuationPointDataResponse.  # noqa: E501

        The Type of the associated Diary Entry ('PeriodBoundary','ValuationPoint','Other' or 'Adhoc' when a diary Entry wasn't used).  # noqa: E501

        :return: The type of this ValuationPointDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ValuationPointDataResponse.

        The Type of the associated Diary Entry ('PeriodBoundary','ValuationPoint','Other' or 'Adhoc' when a diary Entry wasn't used).  # noqa: E501

        :param type: The type of this ValuationPointDataResponse.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def status(self):
        """Gets the status of this ValuationPointDataResponse.  # noqa: E501

        The Status of the associated Diary Entry ('Estimate','Final','Candidate' or 'Unofficial').  # noqa: E501

        :return: The status of this ValuationPointDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ValuationPointDataResponse.

        The Status of the associated Diary Entry ('Estimate','Final','Candidate' or 'Unofficial').  # noqa: E501

        :param status: The status of this ValuationPointDataResponse.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                status is not None and len(status) < 1):
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def backout(self):
        """Gets the backout of this ValuationPointDataResponse.  # noqa: E501

        Bucket of detail for the Valuation Point, where data points have been 'backed out'.  # noqa: E501

        :return: The backout of this ValuationPointDataResponse.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._backout

    @backout.setter
    def backout(self, backout):
        """Sets the backout of this ValuationPointDataResponse.

        Bucket of detail for the Valuation Point, where data points have been 'backed out'.  # noqa: E501

        :param backout: The backout of this ValuationPointDataResponse.  # noqa: E501
        :type backout: dict(str, float)
        """
        if self.local_vars_configuration.client_side_validation and backout is None:  # noqa: E501
            raise ValueError("Invalid value for `backout`, must not be `None`")  # noqa: E501

        self._backout = backout

    @property
    def dealing(self):
        """Gets the dealing of this ValuationPointDataResponse.  # noqa: E501

        Bucket of detail for any 'Dealing' that has occured inside the queried period.  # noqa: E501

        :return: The dealing of this ValuationPointDataResponse.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._dealing

    @dealing.setter
    def dealing(self, dealing):
        """Sets the dealing of this ValuationPointDataResponse.

        Bucket of detail for any 'Dealing' that has occured inside the queried period.  # noqa: E501

        :param dealing: The dealing of this ValuationPointDataResponse.  # noqa: E501
        :type dealing: dict(str, float)
        """
        if self.local_vars_configuration.client_side_validation and dealing is None:  # noqa: E501
            raise ValueError("Invalid value for `dealing`, must not be `None`")  # noqa: E501

        self._dealing = dealing

    @property
    def pn_l(self):
        """Gets the pn_l of this ValuationPointDataResponse.  # noqa: E501

        Bucket of detail for 'PnL' that has occured inside the queried period.  # noqa: E501

        :return: The pn_l of this ValuationPointDataResponse.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._pn_l

    @pn_l.setter
    def pn_l(self, pn_l):
        """Sets the pn_l of this ValuationPointDataResponse.

        Bucket of detail for 'PnL' that has occured inside the queried period.  # noqa: E501

        :param pn_l: The pn_l of this ValuationPointDataResponse.  # noqa: E501
        :type pn_l: dict(str, float)
        """
        if self.local_vars_configuration.client_side_validation and pn_l is None:  # noqa: E501
            raise ValueError("Invalid value for `pn_l`, must not be `None`")  # noqa: E501

        self._pn_l = pn_l

    @property
    def gav(self):
        """Gets the gav of this ValuationPointDataResponse.  # noqa: E501

        The Gross Asset Value of the Fund at the Period end. This is effectively a summation of all Trial balance entries linked to accounts of types 'Asset' and 'Liabilities'.  # noqa: E501

        :return: The gav of this ValuationPointDataResponse.  # noqa: E501
        :rtype: float
        """
        return self._gav

    @gav.setter
    def gav(self, gav):
        """Sets the gav of this ValuationPointDataResponse.

        The Gross Asset Value of the Fund at the Period end. This is effectively a summation of all Trial balance entries linked to accounts of types 'Asset' and 'Liabilities'.  # noqa: E501

        :param gav: The gav of this ValuationPointDataResponse.  # noqa: E501
        :type gav: float
        """
        if self.local_vars_configuration.client_side_validation and gav is None:  # noqa: E501
            raise ValueError("Invalid value for `gav`, must not be `None`")  # noqa: E501

        self._gav = gav

    @property
    def fees(self):
        """Gets the fees of this ValuationPointDataResponse.  # noqa: E501

        Bucket of detail for any 'Fees' that have been charged in the selected period.  # noqa: E501

        :return: The fees of this ValuationPointDataResponse.  # noqa: E501
        :rtype: dict[str, lusid.FeeAccrual]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this ValuationPointDataResponse.

        Bucket of detail for any 'Fees' that have been charged in the selected period.  # noqa: E501

        :param fees: The fees of this ValuationPointDataResponse.  # noqa: E501
        :type fees: dict[str, lusid.FeeAccrual]
        """
        if self.local_vars_configuration.client_side_validation and fees is None:  # noqa: E501
            raise ValueError("Invalid value for `fees`, must not be `None`")  # noqa: E501

        self._fees = fees

    @property
    def nav(self):
        """Gets the nav of this ValuationPointDataResponse.  # noqa: E501

        The Net Asset Value of the Fund at the Period end. This represents the GAV with any fees applied in the period.  # noqa: E501

        :return: The nav of this ValuationPointDataResponse.  # noqa: E501
        :rtype: float
        """
        return self._nav

    @nav.setter
    def nav(self, nav):
        """Sets the nav of this ValuationPointDataResponse.

        The Net Asset Value of the Fund at the Period end. This represents the GAV with any fees applied in the period.  # noqa: E501

        :param nav: The nav of this ValuationPointDataResponse.  # noqa: E501
        :type nav: float
        """
        if self.local_vars_configuration.client_side_validation and nav is None:  # noqa: E501
            raise ValueError("Invalid value for `nav`, must not be `None`")  # noqa: E501

        self._nav = nav

    @property
    def previous_nav(self):
        """Gets the previous_nav of this ValuationPointDataResponse.  # noqa: E501

        The Net Asset Value of the Fund at the End of the last Period.  # noqa: E501

        :return: The previous_nav of this ValuationPointDataResponse.  # noqa: E501
        :rtype: float
        """
        return self._previous_nav

    @previous_nav.setter
    def previous_nav(self, previous_nav):
        """Sets the previous_nav of this ValuationPointDataResponse.

        The Net Asset Value of the Fund at the End of the last Period.  # noqa: E501

        :param previous_nav: The previous_nav of this ValuationPointDataResponse.  # noqa: E501
        :type previous_nav: float
        """
        if self.local_vars_configuration.client_side_validation and previous_nav is None:  # noqa: E501
            raise ValueError("Invalid value for `previous_nav`, must not be `None`")  # noqa: E501

        self._previous_nav = previous_nav

    @property
    def links(self):
        """Gets the links of this ValuationPointDataResponse.  # noqa: E501

        Collection of links.  # noqa: E501

        :return: The links of this ValuationPointDataResponse.  # noqa: E501
        :rtype: list[lusid.Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ValuationPointDataResponse.

        Collection of links.  # noqa: E501

        :param links: The links of this ValuationPointDataResponse.  # noqa: E501
        :type links: list[lusid.Link]
        """

        self._links = links

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValuationPointDataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValuationPointDataResponse):
            return True

        return self.to_dict() != other.to_dict()
