# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.242
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class CancelOrderAndMoveRemainingResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'cancelled_order': 'Order',
        'new_order': 'Order',
        'new_block_id': 'ResourceId'
    }

    attribute_map = {
        'cancelled_order': 'cancelledOrder',
        'new_order': 'newOrder',
        'new_block_id': 'newBlockId'
    }

    required_map = {
        'cancelled_order': 'optional',
        'new_order': 'optional',
        'new_block_id': 'optional'
    }

    def __init__(self, cancelled_order=None, new_order=None, new_block_id=None, local_vars_configuration=None):  # noqa: E501
        """CancelOrderAndMoveRemainingResult - a model defined in OpenAPI"
        
        :param cancelled_order: 
        :type cancelled_order: lusid.Order
        :param new_order: 
        :type new_order: lusid.Order
        :param new_block_id: 
        :type new_block_id: lusid.ResourceId

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cancelled_order = None
        self._new_order = None
        self._new_block_id = None
        self.discriminator = None

        if cancelled_order is not None:
            self.cancelled_order = cancelled_order
        if new_order is not None:
            self.new_order = new_order
        if new_block_id is not None:
            self.new_block_id = new_block_id

    @property
    def cancelled_order(self):
        """Gets the cancelled_order of this CancelOrderAndMoveRemainingResult.  # noqa: E501


        :return: The cancelled_order of this CancelOrderAndMoveRemainingResult.  # noqa: E501
        :rtype: lusid.Order
        """
        return self._cancelled_order

    @cancelled_order.setter
    def cancelled_order(self, cancelled_order):
        """Sets the cancelled_order of this CancelOrderAndMoveRemainingResult.


        :param cancelled_order: The cancelled_order of this CancelOrderAndMoveRemainingResult.  # noqa: E501
        :type cancelled_order: lusid.Order
        """

        self._cancelled_order = cancelled_order

    @property
    def new_order(self):
        """Gets the new_order of this CancelOrderAndMoveRemainingResult.  # noqa: E501


        :return: The new_order of this CancelOrderAndMoveRemainingResult.  # noqa: E501
        :rtype: lusid.Order
        """
        return self._new_order

    @new_order.setter
    def new_order(self, new_order):
        """Sets the new_order of this CancelOrderAndMoveRemainingResult.


        :param new_order: The new_order of this CancelOrderAndMoveRemainingResult.  # noqa: E501
        :type new_order: lusid.Order
        """

        self._new_order = new_order

    @property
    def new_block_id(self):
        """Gets the new_block_id of this CancelOrderAndMoveRemainingResult.  # noqa: E501


        :return: The new_block_id of this CancelOrderAndMoveRemainingResult.  # noqa: E501
        :rtype: lusid.ResourceId
        """
        return self._new_block_id

    @new_block_id.setter
    def new_block_id(self, new_block_id):
        """Sets the new_block_id of this CancelOrderAndMoveRemainingResult.


        :param new_block_id: The new_block_id of this CancelOrderAndMoveRemainingResult.  # noqa: E501
        :type new_block_id: lusid.ResourceId
        """

        self._new_block_id = new_block_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CancelOrderAndMoveRemainingResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CancelOrderAndMoveRemainingResult):
            return True

        return self.to_dict() != other.to_dict()
