# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 1.1.216
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from lusid.api_client import ApiClient
from lusid.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)
from lusid.models.deleted_entity_response import DeletedEntityResponse
from lusid.models.lusid_problem_details import LusidProblemDetails
from lusid.models.lusid_validation_problem_details import LusidValidationProblemDetails
from lusid.models.paged_resource_list_of_workspace import PagedResourceListOfWorkspace
from lusid.models.paged_resource_list_of_workspace_item import PagedResourceListOfWorkspaceItem
from lusid.models.workspace import Workspace
from lusid.models.workspace_creation_request import WorkspaceCreationRequest
from lusid.models.workspace_item import WorkspaceItem
from lusid.models.workspace_item_creation_request import WorkspaceItemCreationRequest
from lusid.models.workspace_item_update_request import WorkspaceItemUpdateRequest
from lusid.models.workspace_update_request import WorkspaceUpdateRequest


class WorkspaceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_personal_item(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] CreatePersonalItem: Create a new item in a personal workspace.  # noqa: E501

        Create a new item in a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_personal_item(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The item's workspace name. (required)
        :type workspace_name: str
        :param workspace_item_creation_request: The item to be created.
        :type workspace_item_creation_request: WorkspaceItemCreationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkspaceItem
        """
        kwargs['_return_http_data_only'] = True
        return self.create_personal_item_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def create_personal_item_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] CreatePersonalItem: Create a new item in a personal workspace.  # noqa: E501

        Create a new item in a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_personal_item_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The item's workspace name. (required)
        :type workspace_name: str
        :param workspace_item_creation_request: The item to be created.
        :type workspace_item_creation_request: WorkspaceItemCreationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (WorkspaceItem, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'workspace_item_creation_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_personal_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `create_personal_item`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `create_personal_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `create_personal_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `create_personal_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_item_creation_request' in local_var_params:
            body_params = local_var_params['workspace_item_creation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            201: "WorkspaceItem",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal/{workspaceName}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_personal_workspace(self, **kwargs):  # noqa: E501
        """[EARLY ACCESS] CreatePersonalWorkspace: Create a new personal workspace.  # noqa: E501

        Create a new personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_personal_workspace(async_req=True)
        >>> result = thread.get()

        :param workspace_creation_request: The workspace to be created.
        :type workspace_creation_request: WorkspaceCreationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs['_return_http_data_only'] = True
        return self.create_personal_workspace_with_http_info(**kwargs)  # noqa: E501

    def create_personal_workspace_with_http_info(self, **kwargs):  # noqa: E501
        """[EARLY ACCESS] CreatePersonalWorkspace: Create a new personal workspace.  # noqa: E501

        Create a new personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_personal_workspace_with_http_info(async_req=True)
        >>> result = thread.get()

        :param workspace_creation_request: The workspace to be created.
        :type workspace_creation_request: WorkspaceCreationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (Workspace, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_creation_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_personal_workspace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_creation_request' in local_var_params:
            body_params = local_var_params['workspace_creation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            201: "Workspace",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_shared_item(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] CreateSharedItem: Create a new item in a shared workspace.  # noqa: E501

        Create a new item in a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shared_item(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The item's workspace name. (required)
        :type workspace_name: str
        :param workspace_item_creation_request: The item to be created.
        :type workspace_item_creation_request: WorkspaceItemCreationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkspaceItem
        """
        kwargs['_return_http_data_only'] = True
        return self.create_shared_item_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def create_shared_item_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] CreateSharedItem: Create a new item in a shared workspace.  # noqa: E501

        Create a new item in a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shared_item_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The item's workspace name. (required)
        :type workspace_name: str
        :param workspace_item_creation_request: The item to be created.
        :type workspace_item_creation_request: WorkspaceItemCreationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (WorkspaceItem, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'workspace_item_creation_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_shared_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `create_shared_item`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `create_shared_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `create_shared_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `create_shared_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_item_creation_request' in local_var_params:
            body_params = local_var_params['workspace_item_creation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            201: "WorkspaceItem",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared/{workspaceName}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_shared_workspace(self, **kwargs):  # noqa: E501
        """[EARLY ACCESS] CreateSharedWorkspace: Create a new shared workspace.  # noqa: E501

        Create a new shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shared_workspace(async_req=True)
        >>> result = thread.get()

        :param workspace_creation_request: The workspace to be created.
        :type workspace_creation_request: WorkspaceCreationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs['_return_http_data_only'] = True
        return self.create_shared_workspace_with_http_info(**kwargs)  # noqa: E501

    def create_shared_workspace_with_http_info(self, **kwargs):  # noqa: E501
        """[EARLY ACCESS] CreateSharedWorkspace: Create a new shared workspace.  # noqa: E501

        Create a new shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shared_workspace_with_http_info(async_req=True)
        >>> result = thread.get()

        :param workspace_creation_request: The workspace to be created.
        :type workspace_creation_request: WorkspaceCreationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (Workspace, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_creation_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_shared_workspace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_creation_request' in local_var_params:
            body_params = local_var_params['workspace_creation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            201: "Workspace",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_personal_item(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] DeletePersonalItem: Delete an item from a personal workspace.  # noqa: E501

        Delete an item from a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_personal_item(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the personal workspace. (required)
        :type workspace_name: str
        :param item_name: The name of the item. (required)
        :type item_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeletedEntityResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_personal_item_with_http_info(workspace_name, item_name, **kwargs)  # noqa: E501

    def delete_personal_item_with_http_info(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] DeletePersonalItem: Delete an item from a personal workspace.  # noqa: E501

        Delete an item from a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_personal_item_with_http_info(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the personal workspace. (required)
        :type workspace_name: str
        :param item_name: The name of the item. (required)
        :type item_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (DeletedEntityResponse, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'item_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_personal_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `delete_personal_item`")  # noqa: E501
        # verify the required parameter 'item_name' is set
        if self.api_client.client_side_validation and ('item_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_name` when calling `delete_personal_item`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_personal_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_personal_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_personal_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `delete_personal_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `delete_personal_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'item_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['item_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `delete_personal_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501
        if 'item_name' in local_var_params:
            path_params['itemName'] = local_var_params['item_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "DeletedEntityResponse",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal/{workspaceName}/items/{itemName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_personal_workspace(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] DeletePersonalWorkspace: Delete a personal workspace.  # noqa: E501

        Delete a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_personal_workspace(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the personal workspace. (required)
        :type workspace_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeletedEntityResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_personal_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def delete_personal_workspace_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] DeletePersonalWorkspace: Delete a personal workspace.  # noqa: E501

        Delete a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_personal_workspace_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the personal workspace. (required)
        :type workspace_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (DeletedEntityResponse, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_personal_workspace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `delete_personal_workspace`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_personal_workspace`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_personal_workspace`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_personal_workspace`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "DeletedEntityResponse",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal/{workspaceName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_shared_item(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] DeleteSharedItem: Delete an item from a shared workspace.  # noqa: E501

        Delete an item from a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shared_item(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the shared workspace. (required)
        :type workspace_name: str
        :param item_name: The name of the item. (required)
        :type item_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeletedEntityResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_shared_item_with_http_info(workspace_name, item_name, **kwargs)  # noqa: E501

    def delete_shared_item_with_http_info(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] DeleteSharedItem: Delete an item from a shared workspace.  # noqa: E501

        Delete an item from a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shared_item_with_http_info(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the shared workspace. (required)
        :type workspace_name: str
        :param item_name: The name of the item. (required)
        :type item_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (DeletedEntityResponse, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'item_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_shared_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `delete_shared_item`")  # noqa: E501
        # verify the required parameter 'item_name' is set
        if self.api_client.client_side_validation and ('item_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_name` when calling `delete_shared_item`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_shared_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_shared_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_shared_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `delete_shared_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `delete_shared_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'item_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['item_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `delete_shared_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501
        if 'item_name' in local_var_params:
            path_params['itemName'] = local_var_params['item_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "DeletedEntityResponse",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared/{workspaceName}/items/{itemName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_shared_workspace(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] DeleteSharedWorkspace: Delete a shared workspace.  # noqa: E501

        Delete a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shared_workspace(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the shared workspace. (required)
        :type workspace_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeletedEntityResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_shared_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def delete_shared_workspace_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] DeleteSharedWorkspace: Delete a shared workspace.  # noqa: E501

        Delete a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shared_workspace_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the shared workspace. (required)
        :type workspace_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (DeletedEntityResponse, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_shared_workspace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `delete_shared_workspace`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_shared_workspace`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_shared_workspace`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `delete_shared_workspace`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "DeletedEntityResponse",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared/{workspaceName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_personal_item(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] GetPersonalItem: Get a single personal workspace item.  # noqa: E501

        Get a single personal workspace item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_personal_item(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the personal workspace. (required)
        :type workspace_name: str
        :param item_name: The name of the item. (required)
        :type item_name: str
        :param as_at: The datetime at which to request the workspace item. If not provided, defaults to 'latest'.
        :type as_at: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkspaceItem
        """
        kwargs['_return_http_data_only'] = True
        return self.get_personal_item_with_http_info(workspace_name, item_name, **kwargs)  # noqa: E501

    def get_personal_item_with_http_info(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] GetPersonalItem: Get a single personal workspace item.  # noqa: E501

        Get a single personal workspace item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_personal_item_with_http_info(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the personal workspace. (required)
        :type workspace_name: str
        :param item_name: The name of the item. (required)
        :type item_name: str
        :param as_at: The datetime at which to request the workspace item. If not provided, defaults to 'latest'.
        :type as_at: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (WorkspaceItem, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'item_name',
            'as_at'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_personal_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `get_personal_item`")  # noqa: E501
        # verify the required parameter 'item_name' is set
        if self.api_client.client_side_validation and ('item_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_name` when calling `get_personal_item`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_personal_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_personal_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_personal_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `get_personal_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `get_personal_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'item_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['item_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `get_personal_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501
        if 'item_name' in local_var_params:
            path_params['itemName'] = local_var_params['item_name']  # noqa: E501

        query_params = []
        if 'as_at' in local_var_params and local_var_params['as_at'] is not None:  # noqa: E501
            query_params.append(('asAt', local_var_params['as_at']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "WorkspaceItem",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal/{workspaceName}/items/{itemName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_personal_workspace(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] GetPersonalWorkspace: Get a personal workspace.  # noqa: E501

        Get a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_personal_workspace(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The personal workspace name. (required)
        :type workspace_name: str
        :param as_at: The asAt datetime at which to retrieve workspaces. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs['_return_http_data_only'] = True
        return self.get_personal_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def get_personal_workspace_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] GetPersonalWorkspace: Get a personal workspace.  # noqa: E501

        Get a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_personal_workspace_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The personal workspace name. (required)
        :type workspace_name: str
        :param as_at: The asAt datetime at which to retrieve workspaces. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (Workspace, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'as_at'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_personal_workspace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `get_personal_workspace`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_personal_workspace`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_personal_workspace`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_personal_workspace`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []
        if 'as_at' in local_var_params and local_var_params['as_at'] is not None:  # noqa: E501
            query_params.append(('asAt', local_var_params['as_at']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "Workspace",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal/{workspaceName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_shared_item(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] GetSharedItem: Get a single shared workspace item.  # noqa: E501

        Get a single shared workspace item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shared_item(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the shared workspace. (required)
        :type workspace_name: str
        :param item_name: The name of the item. (required)
        :type item_name: str
        :param as_at: The datetime at which to request the workspace item. If not provided, defaults to 'latest'.
        :type as_at: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkspaceItem
        """
        kwargs['_return_http_data_only'] = True
        return self.get_shared_item_with_http_info(workspace_name, item_name, **kwargs)  # noqa: E501

    def get_shared_item_with_http_info(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] GetSharedItem: Get a single shared workspace item.  # noqa: E501

        Get a single shared workspace item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shared_item_with_http_info(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The name of the shared workspace. (required)
        :type workspace_name: str
        :param item_name: The name of the item. (required)
        :type item_name: str
        :param as_at: The datetime at which to request the workspace item. If not provided, defaults to 'latest'.
        :type as_at: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (WorkspaceItem, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'item_name',
            'as_at'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `get_shared_item`")  # noqa: E501
        # verify the required parameter 'item_name' is set
        if self.api_client.client_side_validation and ('item_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_name` when calling `get_shared_item`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_shared_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_shared_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_shared_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `get_shared_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `get_shared_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'item_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['item_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `get_shared_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501
        if 'item_name' in local_var_params:
            path_params['itemName'] = local_var_params['item_name']  # noqa: E501

        query_params = []
        if 'as_at' in local_var_params and local_var_params['as_at'] is not None:  # noqa: E501
            query_params.append(('asAt', local_var_params['as_at']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "WorkspaceItem",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared/{workspaceName}/items/{itemName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_shared_workspace(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] GetSharedWorkspace: Get a shared workspace.  # noqa: E501

        Get a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shared_workspace(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The shared workspace name. (required)
        :type workspace_name: str
        :param as_at: The asAt datetime at which to retrieve workspaces. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs['_return_http_data_only'] = True
        return self.get_shared_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def get_shared_workspace_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] GetSharedWorkspace: Get a shared workspace.  # noqa: E501

        Get a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shared_workspace_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The shared workspace name. (required)
        :type workspace_name: str
        :param as_at: The asAt datetime at which to retrieve workspaces. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (Workspace, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'as_at'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_workspace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `get_shared_workspace`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_shared_workspace`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_shared_workspace`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `get_shared_workspace`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []
        if 'as_at' in local_var_params and local_var_params['as_at'] is not None:  # noqa: E501
            query_params.append(('asAt', local_var_params['as_at']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "Workspace",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared/{workspaceName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_personal_items(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] ListPersonalItems: List the items in a personal workspace.  # noqa: E501

        List the items in a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_personal_items(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The item's workspace name. (required)
        :type workspace_name: str
        :param as_at: The asAt datetime at which to retrieve workspace items. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param page: The pagination token to use to continue listing workspaces items from a previous call to list workspaces items.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields              must not have changed since the original request.
        :type page: str
        :param sort_by: A list of field names to sort by, each suffixed by \" ASC\" or \" DESC\".
        :type sort_by: list[str]
        :param limit: When paginating, limit the number of returned results to this many.
        :type limit: int
        :param filter: Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid.
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagedResourceListOfWorkspaceItem
        """
        kwargs['_return_http_data_only'] = True
        return self.list_personal_items_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def list_personal_items_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] ListPersonalItems: List the items in a personal workspace.  # noqa: E501

        List the items in a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_personal_items_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The item's workspace name. (required)
        :type workspace_name: str
        :param as_at: The asAt datetime at which to retrieve workspace items. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param page: The pagination token to use to continue listing workspaces items from a previous call to list workspaces items.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields              must not have changed since the original request.
        :type page: str
        :param sort_by: A list of field names to sort by, each suffixed by \" ASC\" or \" DESC\".
        :type sort_by: list[str]
        :param limit: When paginating, limit the number of returned results to this many.
        :type limit: int
        :param filter: Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid.
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (PagedResourceListOfWorkspaceItem, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'as_at',
            'page',
            'sort_by',
            'limit',
            'filter'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_personal_items" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `list_personal_items`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `list_personal_items`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `list_personal_items`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `list_personal_items`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in local_var_params and  # noqa: E501
                                                        len(local_var_params['page']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_personal_items`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in local_var_params and  # noqa: E501
                                                        len(local_var_params['page']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_personal_items`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'page' in local_var_params and not re.search(r'^[a-zA-Z0-9\+\/]*={0,3}$', local_var_params['page']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_personal_items`, must conform to the pattern `/^[a-zA-Z0-9\+\/]*={0,3}$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_personal_items`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_personal_items`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('filter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['filter']) > 16384):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_personal_items`, length must be less than or equal to `16384`")  # noqa: E501
        if self.api_client.client_side_validation and ('filter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['filter']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_personal_items`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'filter' in local_var_params and not re.search(r'^[\s\S]*$', local_var_params['filter']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_personal_items`, must conform to the pattern `/^[\s\S]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []
        if 'as_at' in local_var_params and local_var_params['as_at'] is not None:  # noqa: E501
            query_params.append(('asAt', local_var_params['as_at']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sortBy', local_var_params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "PagedResourceListOfWorkspaceItem",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal/{workspaceName}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_personal_workspaces(self, **kwargs):  # noqa: E501
        """[EARLY ACCESS] ListPersonalWorkspaces: List personal workspaces.  # noqa: E501

        List personal workspaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_personal_workspaces(async_req=True)
        >>> result = thread.get()

        :param as_at: The asAt datetime at which to retrieve workspaces. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param page: The pagination token to use to continue listing workspaces from a previous call to list workspaces.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields              must not have changed since the original request.
        :type page: str
        :param sort_by: A list of field names to sort by, each suffixed by \" ASC\" or \" DESC\".
        :type sort_by: list[str]
        :param limit: When paginating, limit the number of returned results to this many.
        :type limit: int
        :param filter: Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid.
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagedResourceListOfWorkspace
        """
        kwargs['_return_http_data_only'] = True
        return self.list_personal_workspaces_with_http_info(**kwargs)  # noqa: E501

    def list_personal_workspaces_with_http_info(self, **kwargs):  # noqa: E501
        """[EARLY ACCESS] ListPersonalWorkspaces: List personal workspaces.  # noqa: E501

        List personal workspaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_personal_workspaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param as_at: The asAt datetime at which to retrieve workspaces. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param page: The pagination token to use to continue listing workspaces from a previous call to list workspaces.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields              must not have changed since the original request.
        :type page: str
        :param sort_by: A list of field names to sort by, each suffixed by \" ASC\" or \" DESC\".
        :type sort_by: list[str]
        :param limit: When paginating, limit the number of returned results to this many.
        :type limit: int
        :param filter: Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid.
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (PagedResourceListOfWorkspace, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'as_at',
            'page',
            'sort_by',
            'limit',
            'filter'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_personal_workspaces" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('page' in local_var_params and  # noqa: E501
                                                        len(local_var_params['page']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_personal_workspaces`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in local_var_params and  # noqa: E501
                                                        len(local_var_params['page']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_personal_workspaces`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'page' in local_var_params and not re.search(r'^[a-zA-Z0-9\+\/]*={0,3}$', local_var_params['page']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_personal_workspaces`, must conform to the pattern `/^[a-zA-Z0-9\+\/]*={0,3}$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_personal_workspaces`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_personal_workspaces`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('filter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['filter']) > 16384):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_personal_workspaces`, length must be less than or equal to `16384`")  # noqa: E501
        if self.api_client.client_side_validation and ('filter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['filter']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_personal_workspaces`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'filter' in local_var_params and not re.search(r'^[\s\S]*$', local_var_params['filter']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_personal_workspaces`, must conform to the pattern `/^[\s\S]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'as_at' in local_var_params and local_var_params['as_at'] is not None:  # noqa: E501
            query_params.append(('asAt', local_var_params['as_at']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sortBy', local_var_params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "PagedResourceListOfWorkspace",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_shared_items(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] ListSharedItems: List the items in a shared workspace.  # noqa: E501

        List the items in a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_shared_items(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The item's workspace name. (required)
        :type workspace_name: str
        :param as_at: The asAt datetime at which to retrieve workspace items. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param page: The pagination token to use to continue listing workspaces items from a previous call to list workspaces items.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields              must not have changed since the original request.
        :type page: str
        :param sort_by: A list of field names to sort by, each suffixed by \" ASC\" or \" DESC\".
        :type sort_by: list[str]
        :param limit: When paginating, limit the number of returned results to this many.
        :type limit: int
        :param filter: Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid.
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagedResourceListOfWorkspaceItem
        """
        kwargs['_return_http_data_only'] = True
        return self.list_shared_items_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def list_shared_items_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] ListSharedItems: List the items in a shared workspace.  # noqa: E501

        List the items in a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_shared_items_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The item's workspace name. (required)
        :type workspace_name: str
        :param as_at: The asAt datetime at which to retrieve workspace items. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param page: The pagination token to use to continue listing workspaces items from a previous call to list workspaces items.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields              must not have changed since the original request.
        :type page: str
        :param sort_by: A list of field names to sort by, each suffixed by \" ASC\" or \" DESC\".
        :type sort_by: list[str]
        :param limit: When paginating, limit the number of returned results to this many.
        :type limit: int
        :param filter: Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid.
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (PagedResourceListOfWorkspaceItem, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'as_at',
            'page',
            'sort_by',
            'limit',
            'filter'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_shared_items" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `list_shared_items`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `list_shared_items`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `list_shared_items`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `list_shared_items`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in local_var_params and  # noqa: E501
                                                        len(local_var_params['page']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_shared_items`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in local_var_params and  # noqa: E501
                                                        len(local_var_params['page']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_shared_items`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'page' in local_var_params and not re.search(r'^[a-zA-Z0-9\+\/]*={0,3}$', local_var_params['page']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_shared_items`, must conform to the pattern `/^[a-zA-Z0-9\+\/]*={0,3}$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_shared_items`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_shared_items`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('filter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['filter']) > 16384):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_shared_items`, length must be less than or equal to `16384`")  # noqa: E501
        if self.api_client.client_side_validation and ('filter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['filter']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_shared_items`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'filter' in local_var_params and not re.search(r'^[\s\S]*$', local_var_params['filter']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_shared_items`, must conform to the pattern `/^[\s\S]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []
        if 'as_at' in local_var_params and local_var_params['as_at'] is not None:  # noqa: E501
            query_params.append(('asAt', local_var_params['as_at']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sortBy', local_var_params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "PagedResourceListOfWorkspaceItem",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared/{workspaceName}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_shared_workspaces(self, **kwargs):  # noqa: E501
        """[EARLY ACCESS] ListSharedWorkspaces: List shared workspaces.  # noqa: E501

        List shared workspaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_shared_workspaces(async_req=True)
        >>> result = thread.get()

        :param as_at: The asAt datetime at which to retrieve workspaces. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param page: The pagination token to use to continue listing workspaces from a previous call to list workspaces.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields              must not have changed since the original request.
        :type page: str
        :param sort_by: A list of field names to sort by, each suffixed by \" ASC\" or \" DESC\".
        :type sort_by: list[str]
        :param limit: When paginating, limit the number of returned results to this many.
        :type limit: int
        :param filter: Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid.
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagedResourceListOfWorkspace
        """
        kwargs['_return_http_data_only'] = True
        return self.list_shared_workspaces_with_http_info(**kwargs)  # noqa: E501

    def list_shared_workspaces_with_http_info(self, **kwargs):  # noqa: E501
        """[EARLY ACCESS] ListSharedWorkspaces: List shared workspaces.  # noqa: E501

        List shared workspaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_shared_workspaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param as_at: The asAt datetime at which to retrieve workspaces. Defaults to 'latest' if not specified.
        :type as_at: datetime
        :param page: The pagination token to use to continue listing workspaces from a previous call to list workspaces.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields              must not have changed since the original request.
        :type page: str
        :param sort_by: A list of field names to sort by, each suffixed by \" ASC\" or \" DESC\".
        :type sort_by: list[str]
        :param limit: When paginating, limit the number of returned results to this many.
        :type limit: int
        :param filter: Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid.
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (PagedResourceListOfWorkspace, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'as_at',
            'page',
            'sort_by',
            'limit',
            'filter'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_shared_workspaces" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('page' in local_var_params and  # noqa: E501
                                                        len(local_var_params['page']) > 500):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_shared_workspaces`, length must be less than or equal to `500`")  # noqa: E501
        if self.api_client.client_side_validation and ('page' in local_var_params and  # noqa: E501
                                                        len(local_var_params['page']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_shared_workspaces`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'page' in local_var_params and not re.search(r'^[a-zA-Z0-9\+\/]*={0,3}$', local_var_params['page']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page` when calling `list_shared_workspaces`, must conform to the pattern `/^[a-zA-Z0-9\+\/]*={0,3}$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_shared_workspaces`, must be a value less than or equal to `5000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_shared_workspaces`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('filter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['filter']) > 16384):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_shared_workspaces`, length must be less than or equal to `16384`")  # noqa: E501
        if self.api_client.client_side_validation and ('filter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['filter']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_shared_workspaces`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and 'filter' in local_var_params and not re.search(r'^[\s\S]*$', local_var_params['filter']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `filter` when calling `list_shared_workspaces`, must conform to the pattern `/^[\s\S]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'as_at' in local_var_params and local_var_params['as_at'] is not None:  # noqa: E501
            query_params.append(('asAt', local_var_params['as_at']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sortBy', local_var_params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"


        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "PagedResourceListOfWorkspace",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_personal_item(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] UpdatePersonalItem: Update an item in a personal workspace.  # noqa: E501

        Update an item in a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_personal_item(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The personal workspace name. (required)
        :type workspace_name: str
        :param item_name: The item name. (required)
        :type item_name: str
        :param workspace_item_update_request: The new item details.
        :type workspace_item_update_request: WorkspaceItemUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkspaceItem
        """
        kwargs['_return_http_data_only'] = True
        return self.update_personal_item_with_http_info(workspace_name, item_name, **kwargs)  # noqa: E501

    def update_personal_item_with_http_info(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] UpdatePersonalItem: Update an item in a personal workspace.  # noqa: E501

        Update an item in a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_personal_item_with_http_info(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The personal workspace name. (required)
        :type workspace_name: str
        :param item_name: The item name. (required)
        :type item_name: str
        :param workspace_item_update_request: The new item details.
        :type workspace_item_update_request: WorkspaceItemUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (WorkspaceItem, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'item_name',
            'workspace_item_update_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_personal_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `update_personal_item`")  # noqa: E501
        # verify the required parameter 'item_name' is set
        if self.api_client.client_side_validation and ('item_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_name` when calling `update_personal_item`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_personal_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_personal_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_personal_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `update_personal_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `update_personal_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'item_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['item_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `update_personal_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501
        if 'item_name' in local_var_params:
            path_params['itemName'] = local_var_params['item_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_item_update_request' in local_var_params:
            body_params = local_var_params['workspace_item_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "WorkspaceItem",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal/{workspaceName}/items/{itemName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_personal_workspace(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] UpdatePersonalWorkspace: Update a personal workspace.  # noqa: E501

        Update a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_personal_workspace(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The personal workspace name. (required)
        :type workspace_name: str
        :param workspace_update_request: The new workspace details.
        :type workspace_update_request: WorkspaceUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs['_return_http_data_only'] = True
        return self.update_personal_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def update_personal_workspace_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] UpdatePersonalWorkspace: Update a personal workspace.  # noqa: E501

        Update a personal workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_personal_workspace_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The personal workspace name. (required)
        :type workspace_name: str
        :param workspace_update_request: The new workspace details.
        :type workspace_update_request: WorkspaceUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (Workspace, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'workspace_update_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_personal_workspace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `update_personal_workspace`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_personal_workspace`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_personal_workspace`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_personal_workspace`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_update_request' in local_var_params:
            body_params = local_var_params['workspace_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "Workspace",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/personal/{workspaceName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_shared_item(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] UpdateSharedItem: Update an item in a shared workspace.  # noqa: E501

        Update an item in a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_shared_item(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The shared workspace name. (required)
        :type workspace_name: str
        :param item_name: The item name. (required)
        :type item_name: str
        :param workspace_item_update_request: The new item details.
        :type workspace_item_update_request: WorkspaceItemUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkspaceItem
        """
        kwargs['_return_http_data_only'] = True
        return self.update_shared_item_with_http_info(workspace_name, item_name, **kwargs)  # noqa: E501

    def update_shared_item_with_http_info(self, workspace_name, item_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] UpdateSharedItem: Update an item in a shared workspace.  # noqa: E501

        Update an item in a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_shared_item_with_http_info(workspace_name, item_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The shared workspace name. (required)
        :type workspace_name: str
        :param item_name: The item name. (required)
        :type item_name: str
        :param workspace_item_update_request: The new item details.
        :type workspace_item_update_request: WorkspaceItemUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (WorkspaceItem, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'item_name',
            'workspace_item_update_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_shared_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `update_shared_item`")  # noqa: E501
        # verify the required parameter 'item_name' is set
        if self.api_client.client_side_validation and ('item_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_name` when calling `update_shared_item`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_shared_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_shared_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_shared_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `update_shared_item`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('item_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['item_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `update_shared_item`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'item_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['item_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `item_name` when calling `update_shared_item`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501
        if 'item_name' in local_var_params:
            path_params['itemName'] = local_var_params['item_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_item_update_request' in local_var_params:
            body_params = local_var_params['workspace_item_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "WorkspaceItem",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared/{workspaceName}/items/{itemName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_shared_workspace(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] UpdateSharedWorkspace: Update a shared workspace.  # noqa: E501

        Update a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_shared_workspace(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The shared workspace name. (required)
        :type workspace_name: str
        :param workspace_update_request: The new workspace details.
        :type workspace_update_request: WorkspaceUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs['_return_http_data_only'] = True
        return self.update_shared_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501

    def update_shared_workspace_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """[EARLY ACCESS] UpdateSharedWorkspace: Update a shared workspace.  # noqa: E501

        Update a shared workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_shared_workspace_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param workspace_name: The shared workspace name. (required)
        :type workspace_name: str
        :param workspace_update_request: The new workspace details.
        :type workspace_update_request: WorkspaceUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object, the HTTP status code, and the headers.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: (Workspace, int, HTTPHeaderDict)
        """

        local_var_params = locals()

        all_params = [
            'workspace_name',
            'workspace_update_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_shared_workspace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if self.api_client.client_side_validation and ('workspace_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['workspace_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workspace_name` when calling `update_shared_workspace`")  # noqa: E501

        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_shared_workspace`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and ('workspace_name' in local_var_params and  # noqa: E501
                                                        len(local_var_params['workspace_name']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_shared_workspace`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'workspace_name' in local_var_params and not re.search(r'^[a-zA-Z0-9\-_]+$', local_var_params['workspace_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `workspace_name` when calling `update_shared_workspace`, must conform to the pattern `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'workspace_name' in local_var_params:
            path_params['workspaceName'] = local_var_params['workspace_name']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace_update_request' in local_var_params:
            body_params = local_var_params['workspace_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        header_params['Accept-Encoding'] = "gzip, deflate, br"

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '1.1.216'

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        response_types_map = {
            200: "Workspace",
            400: "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/workspaces/shared/{workspaceName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
