{
  "openapi": "3.0.1",
  "info": {
    "title": "LUSID API",
    "description": "FINBOURNE Technology",
    "termsOfService": "https://www.finbourne.com/legal/terms-conditions",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "version": "0.11.2901",
    "x-logo": {
      "url": "https://content.finbourne.com/LUSID-header.png",
      "backgroundColor": "#415464"
    }
  },
  "servers": [
    {
      "url": "https://fbn-prd.lusid.com/api"
    }
  ],
  "paths": {
    "/api/aggregation/{scope}/{code}/$generateconfigurationrecipe": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[EXPERIMENTAL] Generates a recipe sufficient to perform valuations for the given portfolio.",
        "description": "Given a set of scopes, a portfolio Id and a basic recipe, this endpoint generates a configuration recipe with relevant rules that can value the instruments in the portfolio.",
        "operationId": "GenerateConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The request specifying the parameters to generating the recipe",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeRequest"
              },
              "example": {
                "recipeCreationMarketDataScopes": [
                  "MyScope"
                ],
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeRequest"
              },
              "example": {
                "recipeCreationMarketDataScopes": [
                  "MyScope"
                ],
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeRequest"
              },
              "example": {
                "recipeCreationMarketDataScopes": [
                  "MyScope"
                ],
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeRequest"
              },
              "example": {
                "recipeCreationMarketDataScopes": [
                  "MyScope"
                ],
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRecipe"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRecipe"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRecipe"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/aggregation/$valuation": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[EXPERIMENTAL] Perform valuation for a list of portfolios and/or portfolio groups",
        "description": "Perform valuation on specified list of portfolio and/or portfolio groups for a set of dates.",
        "operationId": "GetValuation",
        "requestBody": {
          "description": "The request specifying the set of portfolios and dates on which to calculate a set of valuation metrics",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/aggregation/$valuationinlined": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[EXPERIMENTAL] Perform valuation for an inlined portfolio",
        "description": "Perform valuation on the portfolio that is defined by the weighted set of instruments passed to the request.",
        "operationId": "GetValuationOfWeightedInstruments",
        "requestBody": {
          "description": "The request specifying the set of portfolios and dates on which to calculate a set of valuation metrics",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/allocations": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EXPERIMENTAL] List Allocations",
        "description": "Fetch the last pre-AsAt date version of each allocation in scope (does not fetch the entire history).",
        "operationId": "ListAllocations",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing allocations from a previous call to list allocations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing allocations from a previous call to list allocations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Allocation the results by these fields. Use use the '-' sign to denote descending allocation e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Allocation the results by these fields. Use use the '-' sign to denote descending allocation e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Allocations\" domain to decorate onto each allocation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Allocations\" domain to decorate onto each allocation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Allocations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EXPERIMENTAL] Upsert Allocations",
        "description": "Upsert; update existing allocations with given ids, or create new allocations otherwise.",
        "operationId": "UpsertAllocations",
        "requestBody": {
          "description": "The collection of allocation requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A collection of allocations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/allocations/{scope}/{code}": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EXPERIMENTAL] Get Allocation",
        "description": "Fetch an Allocation matching the provided identifier",
        "operationId": "GetAllocation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the allocation belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the allocation belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The allocation's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Allocations\" domain to decorate onto the allocation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Allocations\" domain to decorate onto the allocation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The allocation matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EXPERIMENTAL] Delete allocation",
        "description": "Delete an allocation. Deletion will be valid from the allocation's creation datetime.\r\nThis means that the allocation will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteAllocation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The allocation scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The allocation's code. This, together with the scope uniquely identifies the allocation to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation's code. This, together with the scope uniquely identifies the allocation to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an allocation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/calendars/businessday/{scope}/{code}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Check whether a DateTime is a \"Business DateTime\"",
        "description": "A Business DateTime is defined as a point in time that:\r\n    * Does not represent a day that overlaps with the calendars WeekendMask\r\n    * If the calendar is a \"Holiday Calendar\" Does not overlap with any dates in the calendar\r\n    * If the calendar is a \"TradingHours Calendar\" Does overlap with a date in the calendar\r\n            \r\nAll dates specified must be UTC and the upper bound of a calendar is not inclusive \r\ne.g. From: 2020-12-25-00-00-00 \r\n     To: 2020-12-26-00-00-00\r\nIsBusinessDay(2020-12-26-00-00-00) == false",
        "operationId": "IsBusinessDateTime",
        "parameters": [
          {
            "name": "dateTime",
            "in": "query",
            "description": "DateTime to check - This DateTime must be UTC",
            "required": true,
            "schema": {
              "type": "string",
              "description": "DateTime to check - This DateTime must be UTC",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "AsAt for the request",
            "schema": {
              "type": "string",
              "description": "AsAt for the request",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Whether or not the requested DateTime is a BusinessDay or not",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/calendars/generic": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] List Calenders",
        "description": "List calendars at a point in AsAt time.",
        "operationId": "ListCalendars",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendars",
            "schema": {
              "type": "string",
              "description": "The AsAt datetime at which to retrieve the calendars",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Calendars",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Create a calendar in its generic form",
        "description": "Create a calendar in a generic form which can be used to store date events.",
        "operationId": "CreateCalendar",
        "requestBody": {
          "description": "A request to create the calendar",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne Calendar Service",
                "properties": [
                  {
                    "key": "Calendar/default/Center",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne Calendar Service",
                "properties": [
                  {
                    "key": "Calendar/default/Center",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne Calendar Service",
                "properties": [
                  {
                    "key": "Calendar/default/Center",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne Calendar Service",
                "properties": [
                  {
                    "key": "Calendar/default/Center",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/calendars/generic/{scope}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] List all calenders in a specified scope",
        "description": "List calendars at a point in AsAt time.",
        "operationId": "ListCalendarsInScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendars",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendars"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendars",
            "schema": {
              "type": "string",
              "description": "The AsAt datetime at which to retrieve the calendars",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendars in the requested scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne Calendar Service",
                      "properties": [
                        {
                          "key": "Calendar/default/Center",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/calendars/generic/{scope}/{code}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Get a calendar in its generic form",
        "description": "Retrieve a generic calendar by a specific ID at a point in AsAt time",
        "operationId": "GetCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar identifier",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar identifier"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar identifier",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar identifier"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendar",
            "schema": {
              "type": "string",
              "description": "The AsAt datetime at which to retrieve the calendar",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Update a calendar",
        "description": "Update the calendars WeekendMask, SourceProvider or Properties",
        "operationId": "UpdateCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the request",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the request"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the request",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the request"
            }
          }
        ],
        "requestBody": {
          "description": "The new state of the calendar",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne Calendar Service",
                "properties": [
                  {
                    "key": "Calendar/default/Center",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne Calendar Service",
                "properties": [
                  {
                    "key": "Calendar/default/Center",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne Calendar Service",
                "properties": [
                  {
                    "key": "Calendar/default/Center",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne Calendar Service",
                "properties": [
                  {
                    "key": "Calendar/default/Center",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Delete a calendar",
        "description": "Delete a calendar and all of its respective dates",
        "operationId": "DeleteCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne Calendar Service",
                  "properties": [
                    {
                      "key": "Calendar/default/Center",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/calendars/generic/{scope}/{code}/dates": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Get dates for a specific calendar",
        "description": "Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.\r\nProviding an id filter can further refine the results.",
        "operationId": "GetDates",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Where the effective window of dates should begin from",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Where the effective window of dates should begin from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Where the effective window of dates should end",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Where the effective window of dates should end",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "AsAt the dates should be retrieved at",
            "schema": {
              "type": "string",
              "description": "AsAt the dates should be retrieved at",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "idFilter",
            "in": "query",
            "description": "An additional filter that will filter dates based on their identifer",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An additional filter that will filter dates based on their identifer",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "put": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Add a date to a calendar",
        "description": "Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.\r\nA local date will be calculated by the system and applied to the calendar before processing.",
        "operationId": "AddDateToCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          }
        ],
        "requestBody": {
          "description": "Add date to calendar request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/calendars/generic/{scope}/{code}/dates/{dateId}": {
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Remove a date from a calendar",
        "description": "Remove a date from a calendar.",
        "operationId": "DeleteDateFromCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          },
          {
            "name": "dateId",
            "in": "path",
            "description": "Identifier of the date to be removed",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Identifier of the date to be removed"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/conventions/credit/conventions": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] List the set of CDS Flow Conventions",
        "description": "List the set of CDS Flow Conventions at the specified date/time",
        "operationId": "ListCdsFlowConventions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested CDS Flow conventions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCdsFlowConventionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCdsFlowConventionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCdsFlowConventionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "post": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Upsert a set of CDS Flow Conventions. This creates or updates the data in Lusid.",
        "description": "Update or insert CDS Flow Conventions in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted CDS Flow Conventions or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertCdsFlowConventions",
        "requestBody": {
          "description": "The CDS Flow Conventions to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCdsFlowConventionsRequest"
              },
              "example": {
                "cdsFlowConventions": {
                  "rollFrequency": "6M",
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleCdsFlowConventionsName"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCdsFlowConventionsRequest"
              },
              "example": {
                "cdsFlowConventions": {
                  "rollFrequency": "6M",
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleCdsFlowConventionsName"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCdsFlowConventionsRequest"
              },
              "example": {
                "cdsFlowConventions": {
                  "rollFrequency": "6M",
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleCdsFlowConventionsName"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCdsFlowConventionsRequest"
              },
              "example": {
                "cdsFlowConventions": {
                  "rollFrequency": "6M",
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleCdsFlowConventionsName"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/credit/conventions/{scope}/{code}": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Get CDS Flow Conventions",
        "description": "Get a CDS Flow Conventions from a single scope.\r\nThe response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetCdsFlowConventions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the CDS Flow Conventions to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the CDS Flow Conventions to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the CDS Flow Conventions to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the CDS Flow Conventions to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the CDS Flow Conventions. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the CDS Flow Conventions. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved CDS Flow Conventions or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCdsFlowConventionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCdsFlowConventionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCdsFlowConventionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Delete the CDS Flow Conventions of given scope and code, assuming that it is present.",
        "description": "Delete the specified CDS Flow Conventions from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteCdsFlowConventions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the CDS Flow Conventions to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the CDS Flow Conventions to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The CDS Flow Conventions to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The CDS Flow Conventions to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/rates/flowconventions": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] List the set of Flow Conventions",
        "description": "List the set of Flow Conventions at the specified date/time",
        "operationId": "ListFlowConventions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Flow conventions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetFlowConventionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetFlowConventionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetFlowConventionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "post": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Upsert Flow Conventions. This creates or updates the data in Lusid.",
        "description": "Update or insert Flow Conventions in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Flow Conventions or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertFlowConventions",
        "requestBody": {
          "description": "The Flow Conventions to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFlowConventionsRequest"
              },
              "example": {
                "flowConventions": {
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleFlowConventionsName"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFlowConventionsRequest"
              },
              "example": {
                "flowConventions": {
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleFlowConventionsName"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFlowConventionsRequest"
              },
              "example": {
                "flowConventions": {
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleFlowConventionsName"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFlowConventionsRequest"
              },
              "example": {
                "flowConventions": {
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleFlowConventionsName"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/rates/flowconventions/{scope}/{code}": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Get Flow Conventions",
        "description": "Get a Flow Conventions from a single scope.\r\nThe response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetFlowConventions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Flow Conventions to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Flow Conventions to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Flow Conventions to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the Flow Conventions to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Flow Conventions. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Flow Conventions. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Flow Conventions or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFlowConventionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFlowConventionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFlowConventionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Delete the Flow Conventions of given scope and code, assuming that it is present.",
        "description": "Delete the specified conventions from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteFlowConventions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Flow Conventions to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Flow Conventions to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Flow Conventions to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Flow Conventions to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/rates/indexconventions": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] List the set of Index Conventions",
        "description": "List the set of Index Conventions at the specified date/time",
        "operationId": "ListIndexConvention",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Index conventions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetIndexConventionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetIndexConventionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetIndexConventionResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "post": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Upsert a set of Index Convention. This creates or updates the data in Lusid.",
        "description": "Update or insert Index Convention in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Index Convention or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertIndexConvention",
        "requestBody": {
          "description": "The Index Conventions to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertIndexConventionRequest"
              },
              "example": {
                "indexConvention": {
                  "fixingReference": "Unknown",
                  "publicationDayLag": 2,
                  "paymentTenor": "1Y",
                  "dayCountConvention": "Act360",
                  "currency": "GBP",
                  "scope": "someScope",
                  "code": "exampleIndexonventionsName"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertIndexConventionRequest"
              },
              "example": {
                "indexConvention": {
                  "fixingReference": "Unknown",
                  "publicationDayLag": 2,
                  "paymentTenor": "1Y",
                  "dayCountConvention": "Act360",
                  "currency": "GBP",
                  "scope": "someScope",
                  "code": "exampleIndexonventionsName"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertIndexConventionRequest"
              },
              "example": {
                "indexConvention": {
                  "fixingReference": "Unknown",
                  "publicationDayLag": 2,
                  "paymentTenor": "1Y",
                  "dayCountConvention": "Act360",
                  "currency": "GBP",
                  "scope": "someScope",
                  "code": "exampleIndexonventionsName"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertIndexConventionRequest"
              },
              "example": {
                "indexConvention": {
                  "fixingReference": "Unknown",
                  "publicationDayLag": 2,
                  "paymentTenor": "1Y",
                  "dayCountConvention": "Act360",
                  "currency": "GBP",
                  "scope": "someScope",
                  "code": "exampleIndexonventionsName"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/rates/indexconventions/{scope}/{code}": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Get Index Convention",
        "description": "Get a Index Convention from a single scope.\r\nThe response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetIndexConvention",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Index Convention to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Index Convention to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Index Convention to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the Index Convention to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Index Convention. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Index Convention. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Index Convention or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetIndexConventionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIndexConventionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIndexConventionResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Delete the Index Convention of given scope and code, assuming that it is present.",
        "description": "Delete the specified Index Convention from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteIndexConvention",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Index Convention to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Index Convention to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Index Convention to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Index Convention to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/corporateactionsources": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] Create Corporate Action Source",
        "description": "Attempt to create a corporate action source.",
        "operationId": "CreateCorporateActionSource",
        "requestBody": {
          "description": "The corporate action source definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created corporate action source",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] List corporate action sources",
        "description": "Gets a list of all corporate action sources",
        "operationId": "ListCorporateActionSources",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "schema": {
              "type": "string",
              "description": "Optional. The AsAt date of the data",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many. If not specified, a default\r\nof 100 is used.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many. If not specified, a default\r\nof 100 is used.",
              "format": "int32",
              "default": 100,
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. For example, to\r\nfilter on the Display Name, use \"displayName eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Optional. Expression to filter the result set. For example, to\r\nfilter on the Display Name, use \"displayName eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. The pagination token to use to continue listing items from a previous call. Page values are\r\nreturn from list calls, and must be supplied exactly as returned. Additionally, when specifying this\r\nvalue, the filter, asAt, and limit must not\r\nbe modified.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "Optional. The pagination token to use to continue listing items from a previous call. Page values are\r\nreturn from list calls, and must be supplied exactly as returned. Additionally, when specifying this\r\nvalue, the filter, asAt, and limit must not\r\nbe modified.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All Existing Corporate Action Sources",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/corporateactionsources/{scope}/{code}": {
      "delete": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] Delete a corporate action source",
        "description": "Deletes a single corporate action source",
        "operationId": "DeleteCorporateActionSource",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The Scope of the Corporate Action Source to be deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Scope of the Corporate Action Source to be deleted",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Corporate Action Source to be deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Corporate Action Source to be deleted",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Action Source Deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/corporateactionsources/{scope}/{code}/corporateactions": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] Upsert corporate actions",
        "description": "Attempt to create/update one or more corporate action in a specified corporate action source. Failed actions will be identified in the body of the response.",
        "operationId": "BatchUpsertCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of corporate action source",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The corporate action definitions",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created corporate actions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] Get corporate actions",
        "description": "Gets corporate actions from a specific corporate action source",
        "operationId": "GetCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the corporate action source",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Optional. The start effective date of the data range",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Optional. The start effective date of the data range",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Optional. The end effective date of the data range",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Optional. The end effective date of the data range",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "schema": {
              "type": "string",
              "description": "Optional. The AsAt date of the data",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Announcement Date, use \"announcementDate eq '2020-03-06'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Announcement Date, use \"announcementDate eq '2020-03-06'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Actions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EXPERIMENTAL] Delete one or more corporate actions",
        "description": "Deletes one or more corporate actions from the specified corporate action source",
        "operationId": "DeleteCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the corporate action source",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source",
              "nullable": true
            }
          },
          {
            "name": "corporateActionIds",
            "in": "query",
            "description": "The ids of the corporate actions to delete",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ids of the corporate actions to delete"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Actions Deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/counterparties/counterparties/counterparty": {
      "get": {
        "tags": [
          "Counterparty"
        ],
        "summary": "[EXPERIMENTAL] List the set of Counterparties",
        "description": "List the set of Counterparties at the specified AsAt date/time",
        "operationId": "ListCounterparties",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the counterparty. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the counterparty. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested counterparties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Counterparty"
        ],
        "summary": "[EXPERIMENTAL] Upsert Counterparty. This creates or updates the data in Lusid.",
        "description": "Update or insert Counterparty in a single scope. An item will be updated if it already exists and inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Counterparty or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertCounterparty",
        "requestBody": {
          "description": "The Counterparty to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyRequest"
              },
              "example": {
                "counterparty": {
                  "counterpartyId": "12345",
                  "counterpartyName": "some-bank-of-somewhere",
                  "countryOfRisk": "United States",
                  "issuerRatings": [
                    {
                      "ratingSource": "S&P",
                      "rating": "BB"
                    }
                  ],
                  "industryScheme": {
                    "schemeName": "TRCS",
                    "schemeId": "5010201010",
                    "economicSector": "Energy",
                    "businessSector": "Energy - Fossil Fuels",
                    "industry": "Oil & Gas",
                    "industryActivity": "Integrated Oil & Gas"
                  },
                  "scope": "some-scope",
                  "code": "some-code"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyRequest"
              },
              "example": {
                "counterparty": {
                  "counterpartyId": "12345",
                  "counterpartyName": "some-bank-of-somewhere",
                  "countryOfRisk": "United States",
                  "issuerRatings": [
                    {
                      "ratingSource": "S&P",
                      "rating": "BB"
                    }
                  ],
                  "industryScheme": {
                    "schemeName": "TRCS",
                    "schemeId": "5010201010",
                    "economicSector": "Energy",
                    "businessSector": "Energy - Fossil Fuels",
                    "industry": "Oil & Gas",
                    "industryActivity": "Integrated Oil & Gas"
                  },
                  "scope": "some-scope",
                  "code": "some-code"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyRequest"
              },
              "example": {
                "counterparty": {
                  "counterpartyId": "12345",
                  "counterpartyName": "some-bank-of-somewhere",
                  "countryOfRisk": "United States",
                  "issuerRatings": [
                    {
                      "ratingSource": "S&P",
                      "rating": "BB"
                    }
                  ],
                  "industryScheme": {
                    "schemeName": "TRCS",
                    "schemeId": "5010201010",
                    "economicSector": "Energy",
                    "businessSector": "Energy - Fossil Fuels",
                    "industry": "Oil & Gas",
                    "industryActivity": "Integrated Oil & Gas"
                  },
                  "scope": "some-scope",
                  "code": "some-code"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyRequest"
              },
              "example": {
                "counterparty": {
                  "counterpartyId": "12345",
                  "counterpartyName": "some-bank-of-somewhere",
                  "countryOfRisk": "United States",
                  "issuerRatings": [
                    {
                      "ratingSource": "S&P",
                      "rating": "BB"
                    }
                  ],
                  "industryScheme": {
                    "schemeName": "TRCS",
                    "schemeId": "5010201010",
                    "economicSector": "Energy",
                    "businessSector": "Energy - Fossil Fuels",
                    "industry": "Oil & Gas",
                    "industryActivity": "Integrated Oil & Gas"
                  },
                  "scope": "some-scope",
                  "code": "some-code"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/counterparties/counterparties/counterparty/{scope}/{code}": {
      "get": {
        "tags": [
          "Counterparty"
        ],
        "summary": "[EXPERIMENTAL] Get Counterparty",
        "description": "Get a Counterparty from a single scope.\r\nThe response will return either the counterparty that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetCounterparty",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Counterparty to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Counterparty to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Counterparty to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the Counterparty to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the counterparty. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the counterparty. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved counterparty or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Counterparty"
        ],
        "summary": "[EXPERIMENTAL] Delete the Counterparty of given scope and code, assuming that it is present.",
        "description": "Delete the specified Counterparty from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteCounterparty",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Counterparty to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Counterparty to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Counterparty to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Counterparty to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/counterparties/counterparties/csa": {
      "get": {
        "tags": [
          "Counterparty"
        ],
        "summary": "[EXPERIMENTAL] List the set of CSAs",
        "description": "List the set of CSAs at the specified AsAt date/time",
        "operationId": "ListCreditSupportAnnexes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the CSAs. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the CSAs. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested CSAs",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Counterparty"
        ],
        "summary": "[EXPERIMENTAL] Upsert CSA. This creates or updates the data in Lusid.",
        "description": "Update or insert CSA in a single scope. An item will be updated if it already exists and inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted CSA or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertCreditSupportAnnex",
        "requestBody": {
          "description": "The CSA to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "scope": "some-scope",
                  "code": "some-code"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "scope": "some-scope",
                  "code": "some-code"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "scope": "some-scope",
                  "code": "some-code"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "scope": "some-scope",
                  "code": "some-code"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/counterparties/counterparties/csa/{scope}/{code}": {
      "get": {
        "tags": [
          "Counterparty"
        ],
        "summary": "[EXPERIMENTAL] Get CSA",
        "description": "Get a CSA from a single scope.\r\nThe response will return either the CSA that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetCreditSupportAnnex",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the CSA to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the CSA to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the CSA to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the CSA to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the CSA. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the CSA. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved credit support annexes or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Counterparty"
        ],
        "summary": "[EXPERIMENTAL] Delete the CSA of given scope and code, assuming that it is present.",
        "description": "Delete the specified CSA from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteCreditSupportAnnex",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the CSA to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the CSA to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The CSA to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The CSA to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/datatypes": {
      "post": {
        "tags": [
          "Data Types"
        ],
        "summary": "[BETA] Create data type definition",
        "description": "Create a new data type definition\r\n\r\nData types cannot be created in either the \"default\" or \"system\" scopes.",
        "operationId": "CreateDataType",
        "requestBody": {
          "description": "The definition of the new data type",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/datatypes/{scope}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] List data types",
        "description": "List all data types in a specified scope",
        "operationId": "ListDataTypes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The requested scope of the data types",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The requested scope of the data types",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as at of the requested data types",
            "schema": {
              "type": "string",
              "description": "The as at of the requested data types",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "includeSystem",
            "in": "query",
            "description": "Whether to additionally include those data types in the \"system\" scope",
            "schema": {
              "type": "boolean",
              "description": "Whether to additionally include those data types in the \"system\" scope",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}": {
      "put": {
        "tags": [
          "Data Types"
        ],
        "summary": "[BETA] Update data type definition",
        "description": "Update the definition of the specified existing data type\r\n\r\nNot all elements within a data type definition are modifiable due to the potential implications for data\r\nalready stored against the types",
        "operationId": "UpdateDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated definition of the data type",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] Get data type definition",
        "description": "Get the definition of a specified data type",
        "operationId": "GetDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}/units": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] Get units from data type",
        "description": "Get the definitions of the specified units associated bound to a specific data type",
        "operationId": "GetUnitsFromDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          },
          {
            "name": "units",
            "in": "query",
            "description": "One or more unit identifiers for which the definition is being requested",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "One or more unit identifiers for which the definition is being requested",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The as at of the requested data type",
            "schema": {
              "type": "string",
              "description": "Optional. The as at of the requested data type",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Create derived transaction portfolio",
        "description": "Creates a transaction portfolio that derives from an existing transaction portfolio. In a derived portfolio, parts of the portfolio can either be specific to this portfolio, or can be inherited from a \"parent\". Different parts of the portfolio (e.g. transactions or properties) are combined in different ways. The portfolio details are either overridden in entirety, or not at all. The same is true for properties. Transactions on a derived portfolio are merged with its parent portfolio's transactions. If the parent portfolio is itself a derived portfolio, transactions from that parent are also merged (and that parent's portfolio's, if it is also a derived portfolio, and so on).",
        "operationId": "CreateDerivedPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope into which to create the new derived portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope into which to create the new derived portfolio",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The root object of the new derived portfolio, containing a populated reference portfolio id and reference scope",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created derived portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}/{code}/details": {
      "delete": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Delete portfolio details",
        "description": "Deletes the portfolio details for the specified derived transaction portfolio",
        "operationId": "DeleteDerivedPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the change",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective date of the change",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/entities/changes/portfolios": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "[EARLY ACCESS] Get the next change to each portfolio in a scope.",
        "description": "Gets the time of the next (earliest effective at) modification (correction and/or amendment) to each portfolio in a scope relative to a point in bitemporal time.\r\nIncludes changes from parent portfolios in different scopes.\r\nExcludes changes from subcriptions (e.g corporate actions).",
        "operationId": "GetPortfolioChanges",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the origin.",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective date of the origin.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as-at date of the origin.",
            "schema": {
              "type": "string",
              "description": "The as-at date of the origin.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "A list of portfolio changes in the requested scope relative to the specified time.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Upsert instruments",
        "description": "Update or insert one or more instruments into the LUSID instrument master. An instrument will be updated\r\nif it already exists and inserted if it does not.\r\n            \r\nIn the request each instrument definition should be keyed by a unique correlation id. This id is ephemeral\r\nand is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted instruments, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the instrument could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.\n\nThe maximum number of instruments that this method can upsert per request is 2,000.",
        "operationId": "UpsertInstruments",
        "requestBody": {
          "description": "The definitions of the instruments to update or insert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to update or insert."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to update or insert."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to update or insert."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to update or insert."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The successfully updated or inserted instruments along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] List instruments",
        "description": "List all the instruments that have been mastered in the LUSID instrument master.\n\nThe maximum number of instruments that this method can list per request is 2,000.",
        "operationId": "ListInstruments",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instruments. Defaults to return the latest\r\n            version of each instruments if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the instruments. Defaults to return the latest\r\n            version of each instruments if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the instruments.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the instruments.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing instruments from a previous call to list instruments.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing instruments from a previous call to list instruments.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Defaults to filter down to active instruments only, i.e. those\r\n            that have not been deleted. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Defaults to filter down to active instruments only, i.e. those\r\n            that have not been deleted. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "default": "State eq 'Active'",
              "nullable": true
            }
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto each instrument. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto each instrument. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instruments",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get instrument",
        "description": "Get the definition of a single instrument identified by a unique instrument identifier.",
        "operationId": "GetInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier being supplied e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier being supplied e.g. \"Figi\".",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The value of the identifier for the requested instrument.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value of the identifier for the requested instrument.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument definition.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the instrument definition.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instrument",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Update instrument identifier",
        "description": "Update, insert or delete a single instrument identifier for a single instrument. If it is not being deleted\r\nthe identifier will be updated if it already exists and inserted if it does not.",
        "operationId": "UpdateInstrumentIdentifier",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier to use to resolve the instrument e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier to use to resolve the instrument e.g. \"Figi\".",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The original value of the identifier for the requested instrument.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The original value of the identifier for the requested instrument.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The identifier to update or remove. This may or may not be the same identifier used\r\n            to resolve the instrument.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated instrument definition with the identifier updated, inserted or deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Delete instrument",
        "description": "Delete a single instrument identified by a unique instrument identifier. Once an instrument has been\r\ndeleted it will be marked as 'inactive' and it can no longer be used when updating or inserting transactions or holdings.\r\nYou can still query existing transactions and holdings related to the deleted instrument.",
        "operationId": "DeleteInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier being supplied e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier being supplied e.g. \"Figi\".",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The value of the identifier that resolves to the instrument to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value of the identifier that resolves to the instrument to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the instrument was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EXPERIMENTAL] Get instrument properties",
        "description": "List all the properties of a single instrument.",
        "operationId": "GetInstrumentProperties",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier being supplied e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier being supplied e.g. \"Figi\".",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The value of the identifier for the requested instrument.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value of the identifier for the requested instrument.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the instrument's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the instrument's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instrument's properties. Defaults to return the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the instrument's properties. Defaults to return the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified instrument",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/$delete": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EXPERIMENTAL] Delete properties from an instrument",
        "description": "Delete a collection of property values from an instrument, optionally, at the specified effective date, returning a\r\nFinbourne.WebApi.Interface.Dto.Instruments.DeleteInstrumentPropertiesResponse value, containing the AsAtTime at which the operation was completed.",
        "operationId": "DeleteInstrumentProperties",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier type of the instrument, e.g., \"Figi\"",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier type of the instrument, e.g., \"Figi\"",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the instrument to delete properties from.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the instrument to delete properties from.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete the properties from. Note that this is only valid to set if the properties being deleted\r\nare defined to be Finbourne.WebApi.Interface.Dto.PropertyLifeTime.TimeVariant, otherwise this value must not be set.",
            "schema": {
              "type": "string",
              "description": "The effective date to delete the properties from. Note that this is only valid to set if the properties being deleted\r\nare defined to be Finbourne.WebApi.Interface.Dto.PropertyLifeTime.TimeVariant, otherwise this value must not be set.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The property keys of the properties to be deleted from the instrument. Only properties in the\r\nFinbourne.WebApi.Interface.Dto.PropertyDomain.Instrument domain can be supplied.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to be deleted from the instrument. Only properties in the\r\nFinbourne.WebApi.Interface.Dto.PropertyDomain.Instrument domain can be supplied."
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to be deleted from the instrument. Only properties in the\r\nFinbourne.WebApi.Interface.Dto.PropertyDomain.Instrument domain can be supplied."
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to be deleted from the instrument. Only properties in the\r\nFinbourne.WebApi.Interface.Dto.PropertyDomain.Instrument domain can be supplied."
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to be deleted from the instrument. Only properties in the\r\nFinbourne.WebApi.Interface.Dto.PropertyDomain.Instrument domain can be supplied."
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The AsAt time of at which the properties were deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/time-series": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Get the time series of an instrument property",
        "description": "List the complete time series of an instrument property.",
        "operationId": "GetInstrumentPropertyTimeSeries",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier type of the instrument, e.g., \"Figi\"",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier type of the instrument, e.g., \"Figi\"",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The value of the identifier for the requested instrument.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value of the identifier for the requested instrument.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".\r\n            Each property must be from the \"Instrument\" domain.",
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}.",
              "nullable": true
            }
          },
          {
            "name": "identifierEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the instrument from the provided identifier. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the instrument from the provided identifier. Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instrument's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the instrument's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/$get": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get instruments",
        "description": "Get the definition of one or more instruments identified by a collection of unique instrument identifiers.",
        "operationId": "GetInstruments",
        "parameters": [
          {
            "name": "identifierType",
            "in": "query",
            "description": "The identifier being supplied e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier being supplied e.g. \"Figi\"."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n            Defaults to return the latest version of each instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n            Defaults to return the latest version of each instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The values of the identifier for the requested instruments.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the identifier for the requested instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the identifier for the requested instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the identifier for the requested instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the identifier for the requested instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested instruments which could be identified along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/$upsertproperties": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Upsert instruments properties",
        "description": "Update or insert one or more instrument properties for one or more instruments. Each instrument property will be updated\r\nif it already exists and inserted if it does not. If any properties fail to be updated or inserted, none will be updated or inserted and\r\nthe reason for the failure will be returned.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertInstrumentsProperties",
        "requestBody": {
          "description": "A collection of instruments and associated instrument properties to update or insert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A collection of instruments and associated instrument properties to update or insert."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A collection of instruments and associated instrument properties to update or insert."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A collection of instruments and associated instrument properties to update or insert."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A collection of instruments and associated instrument properties to update or insert."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The asAt time at which the properties were updated, inserted or deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/identifierTypes": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Get instrument identifier types",
        "description": "Get the allowable instrument identifier types and their descriptions.",
        "operationId": "GetInstrumentIdentifierTypes",
        "responses": {
          "200": {
            "description": "The allowable instrument identifier types",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities": {
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Upsert Legal Entity",
        "description": "Create or update a legal entity",
        "operationId": "UpsertLegalEntity",
        "requestBody": {
          "description": "Request to create or update a legal entity.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created or updated legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] List Legal Entities",
        "description": "List legal entities which has identifier of specific identifier type's scope and code, and satisfies filter criteria.",
        "operationId": "ListLegalEntities",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Legal Entities with specified identifier type",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Get Legal Entity",
        "description": "Retrieve the definition of a legal entity.",
        "operationId": "GetLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for found legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for found legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Delete Legal Entity",
        "description": "Delete a legal entity. Deletion will be valid from the legal entity's creation datetime.\r\nThis means that the legal entity will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "The scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the legal entity identifier type."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "The code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the legal entity identifier type."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/metadata": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get Access Metadata rules for a Legal Entity",
        "description": "Pass the Scope and Code of the Legal Entity identifier along with the Legal Entity code parameter to retrieve the associated Access Metadata",
        "operationId": "GetAllLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the Legal Entity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/metadata/{metadataKey}": {
      "put": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Legal Entity Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Legal Entity Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Legal Entity Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to upsert the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Legal Entity Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Legal Entity",
        "description": "Get a specific Legal Entity Access Metadata by specifying the corresponding identifier parts and Legal Entity code\r\n            \r\nNo matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry",
        "operationId": "GetLegalEntityAccessMetadataByKey",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Legal Entity access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Delete a Legal Entity Access Metadata entry",
        "description": "Deletes the Legal Entity Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Access Metadata with the given metadataKey has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get Legal Entity Property Time Series",
        "description": "List the complete time series of a legal entity property.",
        "operationId": "GetLegalEntityPropertyTimeSeries",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the legal entity.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".\r\n            Each property must be from the \"LegalEntity\" domain.",
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/relations": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get Relations for Legal Entity",
        "description": "Get relations for the specified Legal Entity",
        "operationId": "GetLegalEntityRelations",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the legal entity's relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the legal entity's relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specific legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/relationships": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get Relationships for Legal Entity",
        "description": "Get Relationships for the specified Legal Entity",
        "operationId": "GetLegalEntityRelationships",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/login/saml/{domain}": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Get SAML Identity Provider",
        "description": "Get the unique identifier for the SAML 2.0 Identity Provider to be used for domain.",
        "operationId": "GetSamlIdentityProviderId",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain that the user will be logging in to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The domain that the user will be logging in to",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ID of the SAML Identity Provider to be used (may be null)",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/metadata/access/resources": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Get resources available for access control",
        "description": "Get the comprehensive set of resources that are available for access control",
        "operationId": "ListAccessControlledResources",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/downloads/exceladdin": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Download Excel Addin",
        "description": "Download the LUSID Excel Addin for Microsoft Excel. Not providing a specific value will return the latest version being returned",
        "operationId": "GetExcelAddin",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The requested version of the Excel plugin",
            "schema": {
              "type": "string",
              "description": "The requested version of the Excel plugin",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/quotes/rules": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EXPERIMENTAL] Get a quote access metadata rule",
        "description": "Get a specific quote access metadata rule by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetQuotesAccessMetadataRule",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "The Provider of the rule",
            "schema": {
              "type": "string",
              "description": "The Provider of the rule",
              "nullable": true
            }
          },
          {
            "name": "priceSource",
            "in": "query",
            "description": "The PriceSource of the rule",
            "schema": {
              "type": "string",
              "description": "The PriceSource of the rule",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdType",
            "in": "query",
            "description": "The InstrumentIdType of the rule",
            "schema": {
              "type": "string",
              "description": "The InstrumentIdType of the rule",
              "nullable": true
            }
          },
          {
            "name": "instrumentId",
            "in": "query",
            "description": "The InstrumentId of the rule",
            "schema": {
              "type": "string",
              "description": "The InstrumentId of the rule",
              "nullable": true
            }
          },
          {
            "name": "quoteType",
            "in": "query",
            "description": "The QuoteType of the rule",
            "schema": {
              "type": "string",
              "description": "The QuoteType of the rule",
              "nullable": true
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The Field of the rule",
            "schema": {
              "type": "string",
              "description": "The Field of the rule",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the rule",
            "schema": {
              "type": "string",
              "description": "The effective date of the rule",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the access metadata rule. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the access metadata rule. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Quote Access Metadata Rule or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/metadata/quotes/rules/{scope}": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EXPERIMENTAL] List all quote access metadata rules in a scope",
        "description": "Get all the quote access metadata rules in the specified scope",
        "operationId": "ListQuotesAccessMetadataRules",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the access metadata rule. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the access metadata rule. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The filtered list of results",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuoteAccessMetadataRule"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuoteAccessMetadataRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuoteAccessMetadataRule"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Quote Access Metadata Rule. This creates or updates the data in LUSID.",
        "description": "Update or insert one Quote Access Metadata Rule in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n\r\nThe response will return the successfully updated or inserted Quote Access Metadata Rule or failure message if unsuccessful\r\n\r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a key can exists with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched",
        "operationId": "UpsertQuoteAccessMetadataRule",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the Quote Access Metadata Rule.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the Quote Access Metadata Rule."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will effective from",
            "schema": {
              "type": "string",
              "description": "The date this rule will effective from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Quote Access Metadata Rule to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertQuoteAccessMetadataRuleRequest"
              },
              "example": {
                "id": {
                  "provider": "ExampleDataProvider",
                  "field": "ExampleQuoteField"
                },
                "metadata": {
                  "informationClassification": [
                    {
                      "value": "Public"
                    }
                  ],
                  "region": [
                    {
                      "value": "EMEA"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertQuoteAccessMetadataRuleRequest"
              },
              "example": {
                "id": {
                  "provider": "ExampleDataProvider",
                  "field": "ExampleQuoteField"
                },
                "metadata": {
                  "informationClassification": [
                    {
                      "value": "Public"
                    }
                  ],
                  "region": [
                    {
                      "value": "EMEA"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertQuoteAccessMetadataRuleRequest"
              },
              "example": {
                "id": {
                  "provider": "ExampleDataProvider",
                  "field": "ExampleQuoteField"
                },
                "metadata": {
                  "informationClassification": [
                    {
                      "value": "Public"
                    }
                  ],
                  "region": [
                    {
                      "value": "EMEA"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertQuoteAccessMetadataRuleRequest"
              },
              "example": {
                "id": {
                  "provider": "ExampleDataProvider",
                  "field": "ExampleQuoteField"
                },
                "metadata": {
                  "informationClassification": [
                    {
                      "value": "Public"
                    }
                  ],
                  "region": [
                    {
                      "value": "EMEA"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EXPERIMENTAL] Delete a Quote Access Metadata Rule",
        "description": "Delete the Quote Access Metadata Rule that exactly matches the provided identifier parts",
        "operationId": "DeleteQuoteAcccesMetadataRule",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "The Provider of the rule",
            "schema": {
              "type": "string",
              "description": "The Provider of the rule",
              "nullable": true
            }
          },
          {
            "name": "priceSource",
            "in": "query",
            "description": "The PriceSource of the rule",
            "schema": {
              "type": "string",
              "description": "The PriceSource of the rule",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdType",
            "in": "query",
            "description": "The InstrumentIdType of the rule",
            "schema": {
              "type": "string",
              "description": "The InstrumentIdType of the rule",
              "nullable": true
            }
          },
          {
            "name": "instrumentId",
            "in": "query",
            "description": "The InstrumentId of the rule",
            "schema": {
              "type": "string",
              "description": "The InstrumentId of the rule",
              "nullable": true
            }
          },
          {
            "name": "quoteType",
            "in": "query",
            "description": "The QuoteType of the rule",
            "schema": {
              "type": "string",
              "description": "The QuoteType of the rule",
              "nullable": true
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The Field of the rule",
            "schema": {
              "type": "string",
              "description": "The Field of the rule",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The rule that has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/metadata/versions": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Get LUSID versions",
        "description": "Get the semantic versions associated with LUSID and its ecosystem",
        "operationId": "GetLusidVersions",
        "responses": {
          "200": {
            "description": "Collection of versions associated with LUSID",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "[EXPERIMENTAL] List Orders",
        "description": "Fetch the last pre-AsAt date version of each order in scope (does not fetch the entire history).",
        "operationId": "ListOrders",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing orders from a previous call to list orders.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing orders from a previous call to list orders.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Orders\" domain to decorate onto each order.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Orders\" domain to decorate onto each order.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Orders in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "[EXPERIMENTAL] Upsert Order",
        "description": "Upsert; update existing orders with given ids, or create new orders otherwise.",
        "operationId": "UpsertOrders",
        "requestBody": {
          "description": "The collection of order requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of orders.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/orders/{scope}/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "[EXPERIMENTAL] Get Order",
        "description": "Fetch an Order that matches the specified identifier",
        "operationId": "GetOrder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the order belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the order belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The order's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Orders\" domain to decorate onto the order.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Orders\" domain to decorate onto the order.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The order matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "[EXPERIMENTAL] Delete order",
        "description": "Delete an order. Deletion will be valid from the order's creation datetime.\r\nThis means that the order will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteOrder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The order scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The order's code. This, together with the scope uniquely identifies the order to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order's code. This, together with the scope uniquely identifies the order to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an order.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Upsert Person",
        "description": "Create or update a new person under the specified scope.",
        "operationId": "UpsertPerson",
        "requestBody": {
          "description": "Request to create or update a person.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "person/PersonalDetails/Name": [
                    {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  ],
                  "person/CompanyDetails/Role": [
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "SalesRepresentative"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "CustomerServiceRepresentative"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "person/PersonalDetails/Name": [
                    {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  ],
                  "person/CompanyDetails/Role": [
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "SalesRepresentative"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "CustomerServiceRepresentative"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "person/PersonalDetails/Name": [
                    {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  ],
                  "person/CompanyDetails/Role": [
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "SalesRepresentative"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "CustomerServiceRepresentative"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "person/PersonalDetails/Name": [
                    {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  ],
                  "person/CompanyDetails/Role": [
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "SalesRepresentative"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "CustomerServiceRepresentative"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created or updated person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] List Persons",
        "description": "List persons which have identifiers of a specific identifier type's scope and code, and satisfies filter criteria.",
        "operationId": "ListPersons",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the LUPID, use \"lusidPersonId eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the LUPID, use \"lusidPersonId eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Person\" domain to decorate onto each person.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Person\" domain to decorate onto each person.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "People in specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId1",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "John Smith"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "SalesRepresentative"
                            },
                            "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                          },
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "CustomerServiceRepresentative"
                            },
                            "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId2",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "Emily Evans"
                            }
                          }
                        ],
                        "person/ContactDetails/Phone": [
                          {
                            "key": "Person/ContactDetails/Phone",
                            "value": {
                              "labelValue": "01005675678"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "Manager"
                            },
                            "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId1",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "John Smith"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "SalesRepresentative"
                            },
                            "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                          },
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "CustomerServiceRepresentative"
                            },
                            "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId2",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "Emily Evans"
                            }
                          }
                        ],
                        "person/ContactDetails/Phone": [
                          {
                            "key": "Person/ContactDetails/Phone",
                            "value": {
                              "labelValue": "01005675678"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "Manager"
                            },
                            "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId1",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "John Smith"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "SalesRepresentative"
                            },
                            "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                          },
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "CustomerServiceRepresentative"
                            },
                            "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId2",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "Emily Evans"
                            }
                          }
                        ],
                        "person/ContactDetails/Phone": [
                          {
                            "key": "Person/ContactDetails/Phone",
                            "value": {
                              "labelValue": "01005675678"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "Manager"
                            },
                            "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Person",
        "description": "Retrieve the definition of a person.",
        "operationId": "GetPerson",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Person\" domain to decorate onto each person.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\". Defaults to include all properties if not specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Person\" domain to decorate onto each person.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\". Defaults to include all properties if not specified.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the person. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the person. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the person. Defaults to return the latest version of the person if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the person. Defaults to return the latest version of the person if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested person definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Delete person",
        "description": "Delete a person. Deletion will be valid from the person's creation datetime.\r\nThis means that the person will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePerson",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "The scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the person identifier type."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "The code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the person identifier type."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type scope and code. This together with defined\r\n            identifier type uniquely identifies the person to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type scope and code. This together with defined\r\n            identifier type uniquely identifies the person to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/identifiers": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Set Person Identifiers",
        "description": "Set identifiers of the person.",
        "operationId": "SetPersonIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request containing identifiers to set for the person. Identifiers not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Person with updated identifiers.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Delete Person Identifiers",
        "description": "Delete identifiers that belong to the given property keys of the person.",
        "operationId": "DeletePersonIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the identifiers to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Identifiers or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the identifiers to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Identifiers or identifiers not specified in request will not be changed."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the identifiers. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime of identifiers are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete the identifiers. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime of identifiers are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the identifiers were deleted from the specified person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/metadata": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Access Metadata rules for a Person",
        "description": "Pass the Scope and Code of the Person identifier along with the person code parameter to retrieve the associated Access Metadata",
        "operationId": "GetAllPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the Person or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/metadata/{metadataKey}": {
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Person Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Person Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Person Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to upsert the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Person Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Person",
        "description": "Get a specific Person Access Metadata by specifying the corresponding identifier parts and Person code\r\n            \r\nNo matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry",
        "operationId": "GetPersonAccessMetadataByKey",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Person access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Delete a Person Access Metadata entry",
        "description": "Deletes the Person Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeletePersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Access Metadata with the given metadataKey has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/properties": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Set Person Properties",
        "description": "Set properties of the person.",
        "operationId": "SetPersonProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request containing properties to set for the person. Properties not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "person/ContactDetails/Phone": [
                    {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "person/ContactDetails/Phone": [
                    {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "person/ContactDetails/Phone": [
                    {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "person/ContactDetails/Phone": [
                    {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Person with updated properties or identifiers.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Delete Person Properties",
        "description": "Delete all properties that belong to the given property keys of the person.",
        "operationId": "DeletePersonProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the person's properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Properties or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the person's properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Properties or identifiers not specified in request will not be changed."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the properties. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime of properties are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete the properties. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime of properties are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Person Property Time Series",
        "description": "List the complete time series of a person property.",
        "operationId": "GetPersonPropertyTimeSeries",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\".\r\n            Each property must be from the \"Person\" domain.",
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/relations": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Relations for Person",
        "description": "Get relations for the specified person.",
        "operationId": "GetPersonRelations",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the person's relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the person's relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specified person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/relationships": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Relationships for Person",
        "description": "Get relationships for the specified person.",
        "operationId": "GetPersonRelationships",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the person's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Create portfolio group",
        "description": "Create a portfolio group in a specific scope.",
        "operationId": "CreatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that the portfolio group will be created in.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope that the portfolio group will be created in.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition and details of the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] List portfolio groups",
        "description": "List all the portfolio groups in a single scope.",
        "operationId": "ListPortfolioGroups",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to list the portfolio groups in.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope to list the portfolio groups in.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio groups in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}": {
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Update portfolio group",
        "description": "Update the definition of a single portfolio group. Not all elements within a portfolio group definition are modifiable\r\ndue to the potential implications for data already stored against the portfolio group.",
        "operationId": "UpdatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to update the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to update the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to update the definition.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to update the definition.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The updated portfolio group definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The updated definition of the portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete portfolio group",
        "description": "Delete a single portfolio group. A portfolio group can be deleted while it still contains portfolios or sub groups.\r\nIn this case any portfolios or sub groups contained in this group will not be deleted, however they will no longer be grouped together by this portfolio group.\r\nThe deletion will be valid from the portfolio group's creation datetime, ie. the portfolio group will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to delete.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio group was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group",
        "description": "Retrieve the definition of a single portfolio group.",
        "operationId": "GetPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to retrieve the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio group definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group commands",
        "description": "Gets all the commands that modified a single portfolio group.",
        "operationId": "GetPortfolioGroupCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the commands for.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the portfolio group to retrieve the commands for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/expansion": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group expansion",
        "description": "List all the portfolios in a group, including all portfolios within sub groups in the group. Each portfolio will be decorated with all of its properties unless a property filter is specified.",
        "operationId": "GetPortfolioGroupExpansion",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to expand.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The expanded portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/holdings": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get holdings for transaction portfolios in portfolio group",
        "description": "Get the holdings of transaction portfolios in specified portfolio group.",
        "operationId": "GetHoldingsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings of transaction portfolios in a specific version of portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/metadata": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get Access Metadata rules for Portfolio Group",
        "description": "Pass the scope and Portfolio Group code parameters to retrieve the associated Access Metadata",
        "operationId": "GetPortfolioGroupMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the portfolio group or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Portfolio Group",
        "description": "Get a specific Portfolio Group access metadata by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetPortfolioGroupAccessMetadataByKey",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the access metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the access metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the access metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the access metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Portfolio group access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Portfolio Group Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Portfolio Group Access Metadata Entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Portfolio Group Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the access metadata entry to upsert",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the access metadata entry to upsert"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will be effective from",
            "schema": {
              "type": "string",
              "description": "The date this rule will be effective from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Portfolio Group Access Metadata rule to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Delete a Portfolio Group Access Metadata entry",
        "description": "Deletes the Portfolio Group Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteKeyFromPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the Access Metadata entry to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the Access Metadata entry to delete"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Add portfolio to group",
        "description": "Add a single portfolio to a portfolio group.",
        "operationId": "AddPortfolioToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to add a portfolio to.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the portfolio will be added to the group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the portfolio will be added to the group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio to add to the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios/{portfolioScope}/{portfolioCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete portfolio from group",
        "description": "Remove a single portfolio from a portfolio group.",
        "operationId": "DeletePortfolioFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the portfolio from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to remove the portfolio from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "portfolioScope",
            "in": "path",
            "description": "The scope of the portfolio being removed from the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the portfolio being removed from the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the portfolio will be removed from the portfolio group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the portfolio will be removed from the portfolio group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the portfolio removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get group properties",
        "description": "List all the properties of a single portfolio group.",
        "operationId": "GetGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to list the properties for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to list the properties for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$delete": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete group properties",
        "description": "Delete one or more properties from a single portfolio group. If the properties are time variant then an effective date time from which the properties\r\nwill be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
        "operationId": "DeleteGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to delete properties from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the properties.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete the properties.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$upsert": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Upsert group properties",
        "description": "Update or insert one or more properties onto a single group. A property will be updated if it\r\nalready exists and inserted if it does not. All properties must be of the domain 'PortfolioGroup'.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to update or insert the properties onto.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to update or insert the properties onto.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get the time series of a portfolio group property",
        "description": "List the complete time series of a portfolio group property.",
        "operationId": "GetPortfolioGroupPropertyTimeSeries",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".\r\n            Each property must be from the \"PortfolioGroup\" domain.",
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}.",
              "nullable": true
            }
          },
          {
            "name": "portfolioGroupEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio group's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio group's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/relations": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get Relations for Portfolio Group",
        "description": "Get relations for the specified Portfolio Group",
        "operationId": "GetPortfolioGroupRelations",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specific portfolio group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/relationships": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get Relationships for Portfolio Group",
        "description": "Get relationships for the specified Portfolio Group",
        "operationId": "GetPortfolioGroupRelationships",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relationship. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relationship. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specific portfolio group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Add sub group to group",
        "description": "Add a portfolio group to a portfolio group as a sub group.",
        "operationId": "AddSubGroupToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio group to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to add a portfolio group to.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the sub group will be added to the group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the sub group will be added to the group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio group to add to the portfolio group as a sub group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio group as a sub group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups/{subgroupScope}/{subgroupCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete sub group from group",
        "description": "Remove a single portfolio group (sub group) from a portfolio group.",
        "operationId": "DeleteSubGroupFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the sub group from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to remove the sub group from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "subgroupScope",
            "in": "path",
            "description": "The scope of the sub group to remove from the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the sub group to remove from the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "subgroupCode",
            "in": "path",
            "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the sub group will be removed from the portfolio group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the sub group will be removed from the portfolio group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the sub group removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get transactions for transaction portfolios in a portfolio group",
        "description": "Get transactions for transaction portfolios in a portfolio group over a given interval of effective time. \r\n\r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "GetTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Build transactions for transaction portfolios in a portfolio group",
        "description": "Build transactions for transaction portfolios in a portfolio group over a given interval of effective time. \r\n\r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "BuildTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "List portfolios",
        "description": "List all the portfolios matching the specified criteria.",
        "operationId": "ListPortfolios",
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Type, use \"type eq 'Transaction'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Type, use \"type eq 'Transaction'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Expression specifying the criteria that the returned portfolios must meet e.g. to see which\r\n            portfolios have holdings in the instruments with a Lusid Instrument Id (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6'\r\n            you would specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
            "schema": {
              "type": "string",
              "description": "Expression specifying the criteria that the returned portfolios must meet e.g. to see which\r\n            portfolios have holdings in the instruments with a Lusid Instrument Id (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6'\r\n            you would specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolios",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "List portfolios for scope",
        "description": "List all the portfolios in a single scope.",
        "operationId": "ListPortfoliosForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolios.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolios.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Type, use \"type eq 'Transaction'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Type, use \"type eq 'Transaction'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolios in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get portfolio",
        "description": "Retrieve the definition of a single portfolio.",
        "operationId": "GetPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the definition for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the definition for. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to return the latest version of the portfolio definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to return the latest version of the portfolio definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Portfolio\" domain to decorate onto the portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Portfolio\" domain to decorate onto the portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete portfolio",
        "description": "Delete a single portfolio. The deletion of the portfolio will be valid from the portfolio's creation datetime. This means that the portfolio will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Update portfolio",
        "description": "Update the definition of a single portfolio. Not all elements within a portfolio definition are\r\nmodifiable due to the potential implications for data already stored against the portfolio.",
        "operationId": "UpdatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to update the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to update the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to update the definition for. Together with the scope this uniquely\r\n            identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to update the definition for. Together with the scope this uniquely\r\n            identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n            LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n            LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated portfolio definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated definition of the portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] Get portfolio commands",
        "description": "Gets all the commands that modified a single portfolio, including any input transactions.",
        "operationId": "GetPortfolioCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the commands for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the commands for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the commands for. Together with the scope this uniquely identifies\r\n            the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the commands for. Together with the scope this uniquely identifies\r\n            the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/metadata": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get access metadata rules for a portfolio",
        "description": "Pass the scope and portfolio code parameters to retrieve the AccessMetadata associated with a portfolio",
        "operationId": "GetPortfolioMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the access metadata rule.",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the access metadata rule.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The filtered list of results",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get an entry identified by a metadataKey in the access metadata object",
        "description": "Get a specific portfolio access metadata rule by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetPortfoliosAccessMetadataByKey",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the rule",
            "schema": {
              "type": "string",
              "description": "The effective date of the rule",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Portfolio Access Metadata Rule or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Portfolio Access Metadata Rule associated with specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Portfolio Access Metadata Rule in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n\r\nThe response will return the successfully updated or inserted Portfolio Access Metadata Rule or failure message if unsuccessful\r\n\r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exists with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched",
        "operationId": "UpsertPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the Portfolio Access Metadata Rule.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the Portfolio Access Metadata Rule."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the access metadata to upsert",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the access metadata to upsert"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will effective from",
            "schema": {
              "type": "string",
              "description": "The date this rule will effective from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Portfolio Access Metadata Rule to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Delete a Portfolio Access Metadata Rule",
        "description": "Delete the Portfolio Access Metadata Rule that exactly matches the provided identifier parts",
        "operationId": "DeleteKeyFromPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "The metadataKey identifying the access metadata entry to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The metadataKey identifying the access metadata entry to delete"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The rule that has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get portfolio properties",
        "description": "List all the properties of a single portfolio.",
        "operationId": "GetPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to list the properties for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to list the properties for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to list the properties for. Together with the scope this uniquely\r\n            identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to list the properties for. Together with the scope this uniquely\r\n            identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio's properties. Defaults to return the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio's properties. Defaults to return the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete portfolio properties",
        "description": "Delete one or more properties from a single portfolio. If the properties are time variant then an effective date time from which the properties\r\nwill be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
        "operationId": "DeletePortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to delete properties from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to delete properties from. Together with the scope this uniquely\r\n            identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to delete properties from. Together with the scope this uniquely\r\n            identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the properties.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete the properties.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\". Each property must be from the \"Portfolio\" domain.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\". Each property must be from the \"Portfolio\" domain."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Upsert portfolio properties",
        "description": "Update or insert one or more properties onto a single portfolio. A property will be updated if it\r\nalready exists and inserted if it does not. All properties must be of the domain 'Portfolio'.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to update or insert the properties onto.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to update or insert the properties onto.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to update or insert the properties onto. Together with the scope\r\n             this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to update or insert the properties onto. Together with the scope\r\n             this uniquely identifies the portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\"."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\"."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\"."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\"."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get the time series of a portfolio property",
        "description": "List the complete time series of a portfolio property.",
        "operationId": "GetPortfolioPropertyTimeSeries",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies\r\n            the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies\r\n            the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".\r\n            Each property must be from the \"Portfolio\" domain.",
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}.",
              "nullable": true
            }
          },
          {
            "name": "portfolioEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the portfolio. Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/relations": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get Relations for Portfolio",
        "description": "Get relations for the specified Portfolio",
        "operationId": "GetPortfolioRelations",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies\r\n            the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies\r\n            the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/relationships": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get Relationships for Portfolio",
        "description": "Get relationships for the specified Portfolio",
        "operationId": "GetPortfolioRelationships",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies\r\n            the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies\r\n            the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Upsert Returns",
        "description": "Update or insert returns into the specified portfolio.",
        "operationId": "UpsertPortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "This contains the Returns which need to be upsert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 10,
                  "openingMarketValue": 5,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": 100,
                  "openingMarketValue": 15,
                  "period": "Daily"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 10,
                  "openingMarketValue": 5,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": 100,
                  "openingMarketValue": 15,
                  "period": "Daily"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 10,
                  "openingMarketValue": 5,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": 100,
                  "openingMarketValue": 15,
                  "period": "Daily"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 10,
                  "openingMarketValue": 5,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": 100,
                  "openingMarketValue": 15,
                  "period": "Daily"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the portfolio that contains the newly updated or inserted Returns.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get Returns",
        "description": "Get Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to delete the Returns.",
            "schema": {
              "type": "string",
              "description": "The start date from which to delete the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date from which to delete the Returns",
            "schema": {
              "type": "string",
              "description": "The end date from which to delete the Returns",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Show the Returns on a Daily or Monthly period.",
            "schema": {
              "type": "string",
              "description": "Show the Returns on a Daily or Monthly period.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Returns on the given time period.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}/aggregated": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Aggregate Returns",
        "description": "Aggregate Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioAggregateReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to delete the Returns.",
            "schema": {
              "type": "string",
              "description": "The start date from which to delete the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date from which to delete the Returns",
            "schema": {
              "type": "string",
              "description": "The end date from which to delete the Returns",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "compositeMethod",
            "in": "query",
            "description": "The method used to calculate the Portfolio performance:\r\n            Equal/Asset.",
            "schema": {
              "type": "string",
              "description": "The method used to calculate the Portfolio performance:\r\n            Equal/Asset.",
              "nullable": true
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "the type of the returns used to calculate the aggregation result.",
            "schema": {
              "type": "string",
              "description": "the type of the returns used to calculate the aggregation result.",
              "nullable": true
            }
          },
          {
            "name": "outputFrequency",
            "in": "query",
            "description": "The type of calculated output.",
            "schema": {
              "type": "string",
              "description": "The type of calculated output.",
              "nullable": true
            }
          },
          {
            "name": "metrics",
            "in": "query",
            "description": "The period time to calculate the aggregate return.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The period time to calculate the aggregate return.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The aggregated returns.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/$reconcileholdings": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] Reconcile portfolio holdings",
        "description": "Reconcile the holdings of two portfolios.",
        "operationId": "ReconcileHoldings",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/$reconcileInline": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EXPERIMENTAL] Reconcile valuations performed on one or two sets of inline instruments using one or two configuration recipes.",
        "description": "Perform valuation of one or two set of inline instruments using different one or two configuration recipes. Produce a breakdown of the resulting differences in valuation.",
        "operationId": "ReconcileInline",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "scope": "MySourceScope",
                  "aggregation": {
                    "request": {
                      "recipeId": {
                        "scope": "MyScope",
                        "code": "default"
                      },
                      "asAt": "2018-03-05T00:00:00.0000000+00:00",
                      "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                      "metrics": [
                        {
                          "key": "Holding/default/PV",
                          "op": "Proportion"
                        },
                        {
                          "key": "Holding/default/PV",
                          "op": "Sum"
                        }
                      ],
                      "groupBy": [
                        "Instrument/default/Name"
                      ],
                      "portfolioIdentifierCode": "SinglePortfolio"
                    },
                    "instruments": [
                      {
                        "quantity": 10000,
                        "holdingIdentifier": "fx-fwd-GBPUSD",
                        "instrument": {
                          "startDate": "2018-03-01T00:00:00.0000000+00:00",
                          "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                          "domAmount": 100,
                          "domCcy": "GBP",
                          "fgnAmount": -150,
                          "fgnCcy": "USD",
                          "refSpotRate": 1.5,
                          "isNdf": false,
                          "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                          "instrumentType": "FxForward"
                        }
                      }
                    ]
                  }
                },
                "right": {
                  "scope": "MyTargetScope",
                  "aggregation": {
                    "request": {
                      "recipeId": {
                        "scope": "MyScope",
                        "code": "default"
                      },
                      "asAt": "2018-03-05T00:00:00.0000000+00:00",
                      "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                      "metrics": [
                        {
                          "key": "Holding/default/PV",
                          "op": "Proportion"
                        },
                        {
                          "key": "Holding/default/PV",
                          "op": "Sum"
                        }
                      ],
                      "groupBy": [
                        "Instrument/default/Name"
                      ],
                      "portfolioIdentifierCode": "SinglePortfolio"
                    },
                    "instruments": [
                      {
                        "quantity": 10000,
                        "holdingIdentifier": "fx-fwd-GBPJPY",
                        "instrument": {
                          "startDate": "2018-03-01T00:00:00.0000000+00:00",
                          "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                          "domAmount": 100,
                          "domCcy": "GBP",
                          "fgnAmount": -150,
                          "fgnCcy": "JPY",
                          "refSpotRate": 132,
                          "isNdf": false,
                          "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                          "instrumentType": "FxForward"
                        }
                      }
                    ]
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "scope": "MySourceScope",
                  "aggregation": {
                    "request": {
                      "recipeId": {
                        "scope": "MyScope",
                        "code": "default"
                      },
                      "asAt": "2018-03-05T00:00:00.0000000+00:00",
                      "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                      "metrics": [
                        {
                          "key": "Holding/default/PV",
                          "op": "Proportion"
                        },
                        {
                          "key": "Holding/default/PV",
                          "op": "Sum"
                        }
                      ],
                      "groupBy": [
                        "Instrument/default/Name"
                      ],
                      "portfolioIdentifierCode": "SinglePortfolio"
                    },
                    "instruments": [
                      {
                        "quantity": 10000,
                        "holdingIdentifier": "fx-fwd-GBPUSD",
                        "instrument": {
                          "startDate": "2018-03-01T00:00:00.0000000+00:00",
                          "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                          "domAmount": 100,
                          "domCcy": "GBP",
                          "fgnAmount": -150,
                          "fgnCcy": "USD",
                          "refSpotRate": 1.5,
                          "isNdf": false,
                          "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                          "instrumentType": "FxForward"
                        }
                      }
                    ]
                  }
                },
                "right": {
                  "scope": "MyTargetScope",
                  "aggregation": {
                    "request": {
                      "recipeId": {
                        "scope": "MyScope",
                        "code": "default"
                      },
                      "asAt": "2018-03-05T00:00:00.0000000+00:00",
                      "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                      "metrics": [
                        {
                          "key": "Holding/default/PV",
                          "op": "Proportion"
                        },
                        {
                          "key": "Holding/default/PV",
                          "op": "Sum"
                        }
                      ],
                      "groupBy": [
                        "Instrument/default/Name"
                      ],
                      "portfolioIdentifierCode": "SinglePortfolio"
                    },
                    "instruments": [
                      {
                        "quantity": 10000,
                        "holdingIdentifier": "fx-fwd-GBPJPY",
                        "instrument": {
                          "startDate": "2018-03-01T00:00:00.0000000+00:00",
                          "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                          "domAmount": 100,
                          "domCcy": "GBP",
                          "fgnAmount": -150,
                          "fgnCcy": "JPY",
                          "refSpotRate": 132,
                          "isNdf": false,
                          "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                          "instrumentType": "FxForward"
                        }
                      }
                    ]
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "scope": "MySourceScope",
                  "aggregation": {
                    "request": {
                      "recipeId": {
                        "scope": "MyScope",
                        "code": "default"
                      },
                      "asAt": "2018-03-05T00:00:00.0000000+00:00",
                      "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                      "metrics": [
                        {
                          "key": "Holding/default/PV",
                          "op": "Proportion"
                        },
                        {
                          "key": "Holding/default/PV",
                          "op": "Sum"
                        }
                      ],
                      "groupBy": [
                        "Instrument/default/Name"
                      ],
                      "portfolioIdentifierCode": "SinglePortfolio"
                    },
                    "instruments": [
                      {
                        "quantity": 10000,
                        "holdingIdentifier": "fx-fwd-GBPUSD",
                        "instrument": {
                          "startDate": "2018-03-01T00:00:00.0000000+00:00",
                          "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                          "domAmount": 100,
                          "domCcy": "GBP",
                          "fgnAmount": -150,
                          "fgnCcy": "USD",
                          "refSpotRate": 1.5,
                          "isNdf": false,
                          "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                          "instrumentType": "FxForward"
                        }
                      }
                    ]
                  }
                },
                "right": {
                  "scope": "MyTargetScope",
                  "aggregation": {
                    "request": {
                      "recipeId": {
                        "scope": "MyScope",
                        "code": "default"
                      },
                      "asAt": "2018-03-05T00:00:00.0000000+00:00",
                      "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                      "metrics": [
                        {
                          "key": "Holding/default/PV",
                          "op": "Proportion"
                        },
                        {
                          "key": "Holding/default/PV",
                          "op": "Sum"
                        }
                      ],
                      "groupBy": [
                        "Instrument/default/Name"
                      ],
                      "portfolioIdentifierCode": "SinglePortfolio"
                    },
                    "instruments": [
                      {
                        "quantity": 10000,
                        "holdingIdentifier": "fx-fwd-GBPJPY",
                        "instrument": {
                          "startDate": "2018-03-01T00:00:00.0000000+00:00",
                          "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                          "domAmount": 100,
                          "domCcy": "GBP",
                          "fgnAmount": -150,
                          "fgnCcy": "JPY",
                          "refSpotRate": 132,
                          "isNdf": false,
                          "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                          "instrumentType": "FxForward"
                        }
                      }
                    ]
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "scope": "MySourceScope",
                  "aggregation": {
                    "request": {
                      "recipeId": {
                        "scope": "MyScope",
                        "code": "default"
                      },
                      "asAt": "2018-03-05T00:00:00.0000000+00:00",
                      "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                      "metrics": [
                        {
                          "key": "Holding/default/PV",
                          "op": "Proportion"
                        },
                        {
                          "key": "Holding/default/PV",
                          "op": "Sum"
                        }
                      ],
                      "groupBy": [
                        "Instrument/default/Name"
                      ],
                      "portfolioIdentifierCode": "SinglePortfolio"
                    },
                    "instruments": [
                      {
                        "quantity": 10000,
                        "holdingIdentifier": "fx-fwd-GBPUSD",
                        "instrument": {
                          "startDate": "2018-03-01T00:00:00.0000000+00:00",
                          "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                          "domAmount": 100,
                          "domCcy": "GBP",
                          "fgnAmount": -150,
                          "fgnCcy": "USD",
                          "refSpotRate": 1.5,
                          "isNdf": false,
                          "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                          "instrumentType": "FxForward"
                        }
                      }
                    ]
                  }
                },
                "right": {
                  "scope": "MyTargetScope",
                  "aggregation": {
                    "request": {
                      "recipeId": {
                        "scope": "MyScope",
                        "code": "default"
                      },
                      "asAt": "2018-03-05T00:00:00.0000000+00:00",
                      "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                      "metrics": [
                        {
                          "key": "Holding/default/PV",
                          "op": "Proportion"
                        },
                        {
                          "key": "Holding/default/PV",
                          "op": "Sum"
                        }
                      ],
                      "groupBy": [
                        "Instrument/default/Name"
                      ],
                      "portfolioIdentifierCode": "SinglePortfolio"
                    },
                    "instruments": [
                      {
                        "quantity": 10000,
                        "holdingIdentifier": "fx-fwd-GBPJPY",
                        "instrument": {
                          "startDate": "2018-03-01T00:00:00.0000000+00:00",
                          "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                          "domAmount": 100,
                          "domCcy": "GBP",
                          "fgnAmount": -150,
                          "fgnCcy": "JPY",
                          "refSpotRate": 132,
                          "isNdf": false,
                          "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                          "instrumentType": "FxForward"
                        }
                      }
                    ]
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/$reconcileValuation": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EXPERIMENTAL] Reconcile valuations performed on one or two sets of holdings using one or two configuration recipes.",
        "description": "Perform valuation of one or two set of holdings using different one or two configuration recipes. Produce a breakdown of the resulting differences in valuation.",
        "operationId": "ReconcileValuation",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "aggregation": {
                    "recipeId": {
                      "scope": "MyScope",
                      "code": "default"
                    },
                    "asAt": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "metrics": [
                      {
                        "key": "Holding/default/PV",
                        "op": "Proportion"
                      },
                      {
                        "key": "Holding/default/PV",
                        "op": "Sum"
                      }
                    ],
                    "groupBy": [
                      "Instrument/default/Name"
                    ],
                    "portfolioIdentifierCode": "SinglePortfolio"
                  }
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "aggregation": {
                    "recipeId": {
                      "scope": "MyScope",
                      "code": "default"
                    },
                    "asAt": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "metrics": [
                      {
                        "key": "Holding/default/PV",
                        "op": "Proportion"
                      },
                      {
                        "key": "Holding/default/PV",
                        "op": "Sum"
                      }
                    ],
                    "groupBy": [
                      "Instrument/default/Name"
                    ],
                    "portfolioIdentifierCode": "SinglePortfolio"
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "aggregation": {
                    "recipeId": {
                      "scope": "MyScope",
                      "code": "default"
                    },
                    "asAt": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "metrics": [
                      {
                        "key": "Holding/default/PV",
                        "op": "Proportion"
                      },
                      {
                        "key": "Holding/default/PV",
                        "op": "Sum"
                      }
                    ],
                    "groupBy": [
                      "Instrument/default/Name"
                    ],
                    "portfolioIdentifierCode": "SinglePortfolio"
                  }
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "aggregation": {
                    "recipeId": {
                      "scope": "MyScope",
                      "code": "default"
                    },
                    "asAt": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "metrics": [
                      {
                        "key": "Holding/default/PV",
                        "op": "Proportion"
                      },
                      {
                        "key": "Holding/default/PV",
                        "op": "Sum"
                      }
                    ],
                    "groupBy": [
                      "Instrument/default/Name"
                    ],
                    "portfolioIdentifierCode": "SinglePortfolio"
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "aggregation": {
                    "recipeId": {
                      "scope": "MyScope",
                      "code": "default"
                    },
                    "asAt": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "metrics": [
                      {
                        "key": "Holding/default/PV",
                        "op": "Proportion"
                      },
                      {
                        "key": "Holding/default/PV",
                        "op": "Sum"
                      }
                    ],
                    "groupBy": [
                      "Instrument/default/Name"
                    ],
                    "portfolioIdentifierCode": "SinglePortfolio"
                  }
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "aggregation": {
                    "recipeId": {
                      "scope": "MyScope",
                      "code": "default"
                    },
                    "asAt": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "metrics": [
                      {
                        "key": "Holding/default/PV",
                        "op": "Proportion"
                      },
                      {
                        "key": "Holding/default/PV",
                        "op": "Sum"
                      }
                    ],
                    "groupBy": [
                      "Instrument/default/Name"
                    ],
                    "portfolioIdentifierCode": "SinglePortfolio"
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "aggregation": {
                    "recipeId": {
                      "scope": "MyScope",
                      "code": "default"
                    },
                    "asAt": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "metrics": [
                      {
                        "key": "Holding/default/PV",
                        "op": "Proportion"
                      },
                      {
                        "key": "Holding/default/PV",
                        "op": "Sum"
                      }
                    ],
                    "groupBy": [
                      "Instrument/default/Name"
                    ],
                    "portfolioIdentifierCode": "SinglePortfolio"
                  }
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "aggregation": {
                    "recipeId": {
                      "scope": "MyScope",
                      "code": "default"
                    },
                    "asAt": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "metrics": [
                      {
                        "key": "Holding/default/PV",
                        "op": "Proportion"
                      },
                      {
                        "key": "Holding/default/PV",
                        "op": "Sum"
                      }
                    ],
                    "groupBy": [
                      "Instrument/default/Name"
                    ],
                    "portfolioIdentifierCode": "SinglePortfolio"
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/preview/$reconcileholdings": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EXPERIMENTAL] Reconcile portfolio holdings with given tolerance",
        "description": "Reconcile the holdings of two portfolios.",
        "operationId": "ReconcileHoldingsPreview",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation. This request can take tolerance for units and cost.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequestPreview"
              },
              "example": {
                "tolerance": {
                  "/Holding/Units": {
                    "value": 0,
                    "type": "Absolute"
                  },
                  "/Holding/Cost": {
                    "value": 0,
                    "type": "Relative"
                  }
                },
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequestPreview"
              },
              "example": {
                "tolerance": {
                  "/Holding/Units": {
                    "value": 0,
                    "type": "Absolute"
                  },
                  "/Holding/Cost": {
                    "value": 0,
                    "type": "Relative"
                  }
                },
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequestPreview"
              },
              "example": {
                "tolerance": {
                  "/Holding/Units": {
                    "value": 0,
                    "type": "Absolute"
                  },
                  "/Holding/Cost": {
                    "value": 0,
                    "type": "Relative"
                  }
                },
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequestPreview"
              },
              "example": {
                "tolerance": {
                  "/Holding/Units": {
                    "value": 0,
                    "type": "Absolute"
                  },
                  "/Holding/Cost": {
                    "value": 0,
                    "type": "Relative"
                  }
                },
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/propertydefinitions": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Create property definition",
        "description": "Define a new property.",
        "operationId": "CreatePropertyDefinition",
        "requestBody": {
          "description": "The definition of the new property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Get multiple property definitions",
        "description": "Retrieve the definition of one or more specified properties.",
        "operationId": "GetMultiplePropertyDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definitions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}": {
      "put": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Update property definition",
        "description": "Update the definition of a specified existing property. Not all elements within a property definition\r\nare modifiable due to the potential implications for values already stored against the property.",
        "operationId": "UpdatePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property being updated.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the property being updated.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated definition of the property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Delete property definition",
        "description": "Delete the definition of the specified property.",
        "operationId": "DeletePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property to be deleted.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the property to be deleted.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time that the property definition was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Get property definition",
        "description": "Retrieve the definition of a specified property.",
        "operationId": "GetPropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the specified property.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified property.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/propertydefinitions/derived": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "[EXPERIMENTAL] Create derived property definition",
        "description": "Define a new derived property.",
        "operationId": "CreateDerivedPropertyDefinition",
        "requestBody": {
          "description": "The definition of the new derived property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created derived property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/quotes/{scope}": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Upsert quotes",
        "description": "Update or insert one or more quotes in a single scope. A quote will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.\n\nThe maximum number of quotes that this method can upsert per request is 2,000.",
        "operationId": "UpsertQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the quotes.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the quotes.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] List quotes for scope",
        "description": "List all the quotes from a single scope at the specified date/time",
        "operationId": "ListQuotesForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the quotes to list.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/quotes/{scope}/$delete": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Delete quotes",
        "description": "Delete one or more specified quotes from a single scope. A quote is identified by its unique id which includes information about\r\nthe type of quote as well as the exact effective datetime (to the microsecond) from which it became valid.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to delete.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to delete keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully deleted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/quotes/{scope}/$deprecated": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[DEPRECATED] List quotes",
        "description": "List all the quotes from a single scope at the specified date/time\r\nPlease use M:Finbourne.WebApi.Controllers.QuotesController.ListQuotesForScope(System.String,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String) - the signature and behaviour of this endpoint will be changing to omit scope",
        "operationId": "ListQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the quotes to list.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/quotes/{scope}/$get": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Get quotes",
        "description": "Get one or more quotes from a single scope.\r\n            \r\nEach quote can be identified by its time invariant quote series id.\r\n            \r\nFor each quote series id LUSID will return the most recent quote with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for a quote from the specified effective datetime.\r\nLUSID will return the most recent quote within this window.\r\n            \r\nIn the request each quote series id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved quotes. Two, those that had a\r\nvalid quote series id but could not be found. Three, those that failed because LUSID could not construct a valid quote series id from the request.\r\n\r\nFor the quotes that failed or could not be found a reason will be provided explaining why the quote could not be retrieved.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.\n\nThe maximum number of quotes that this method can get per request is 2,000.",
        "operationId": "GetQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to retrieve.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/recipes": {
      "post": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid.",
        "description": "Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertConfigurationRecipe",
        "requestBody": {
          "description": "The Configuration Recipe to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false
                    }
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": ""
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false
                    }
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": ""
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false
                    }
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": ""
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false
                    }
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": ""
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "[EXPERIMENTAL] List the set of Configuration Recipes",
        "description": "List the set of configuration recipes at the specified date/time and scope",
        "operationId": "ListConfigurationRecipes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested configuration recipes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/recipes/{scope}/{code}": {
      "get": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "[EXPERIMENTAL] Get Configuration Recipe",
        "description": "Get a Configuration Recipe from a single scope.\r\n            \r\nThe response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.\r\n            \r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Configuration Recipe to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Configuration Recipe to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the recipe to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the recipe to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Configuration Recipe or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "[EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present.",
        "description": "Delete the specified Configuration Recipe from a single scope.\r\n            \r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Configuration Recipe to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Configuration Recipe to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Configuration Recipe to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Configuration Recipe to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/referenceportfolios/{scope}": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Create reference portfolio",
        "description": "Create a new reference portfolio.",
        "operationId": "CreateReferencePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The intended scope of the portfolio",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The intended scope of the portfolio",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The portfolio creation request object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created reference portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituents": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Add constituents",
        "description": "Add constituents to the specified reference portfolio.",
        "operationId": "UpsertReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The constituents to upload to the portfolio",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Get constituents",
        "description": "Get constituents from the specified reference portfolio at an effective time.",
        "operationId": "GetReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"ReferenceHolding\" domain to decorate onto\r\n            the constituents. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"ReferenceHolding/strategy/quantsignal\". Defaults to return all available instrument and reference holding properties if not specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"ReferenceHolding\" domain to decorate onto\r\n            the constituents. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"ReferenceHolding/strategy/quantsignal\". Defaults to return all available instrument and reference holding properties if not specified.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reference portfolio constituents",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituentsadjustments": {
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "List constituents adjustments",
        "description": "List the constituent adjustments made to the specified reference portfolio over a specified interval of effective time.",
        "operationId": "ListConstituentsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code for the portfolio",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAtTime",
            "in": "query",
            "description": "The as-at time for which the result is valid.",
            "schema": {
              "type": "string",
              "description": "The as-at time for which the result is valid.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/relationdefinitions": {
      "post": {
        "tags": [
          "Relation Definitions"
        ],
        "summary": "[EXPERIMENTAL] Create a relation definition",
        "description": "Define a new relation.",
        "operationId": "CreateRelationDefinition",
        "requestBody": {
          "description": "The definition of the new relation.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relation definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationdefinitions/{scope}/{code}": {
      "get": {
        "tags": [
          "Relation Definitions"
        ],
        "summary": "[EXPERIMENTAL] Get relation definition",
        "description": "Retrieve the definition of a specified relation.",
        "operationId": "GetRelationDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified relation.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified relation.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified relation. Together with the domain and scope this uniquely\r\n            identifies the relation.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified relation. Together with the domain and scope this uniquely\r\n            identifies the relation.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relation definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the relation definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relation definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relations/{scope}/{code}": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "[EXPERIMENTAL] Create Relation",
        "description": "Create a relation between two entity objects by their identifiers",
        "operationId": "CreateRelation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the relation should be effective from. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the relation should be effective from. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relation to create.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly created relation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relations/{scope}/{code}/$delete": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "[EXPERIMENTAL] Delete a relation",
        "description": "Delete a relation between two entity objects represented by their identifiers",
        "operationId": "DeleteRelation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the relation should the deletion be effective from. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the relation should the deletion be effective from. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relation to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the relation is deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationshipdefinitions": {
      "post": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EXPERIMENTAL] Create Relationship Definition",
        "description": "Create a new relationship definition to be used for creating relationships between entities.",
        "operationId": "CreateRelationshipDefinition",
        "requestBody": {
          "description": "The definition of the new relationship.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}": {
      "put": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EXPERIMENTAL] Update Relationship Definition",
        "description": "Update the definition of a specified existing relationship. Not all elements within a relationship definition\r\nare modifiable due to the potential implications for values already stored against the relationship.",
        "operationId": "UpdateRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship definition being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship definition being updated.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship definition being updated. Together with the scope this uniquely\r\n            identifies the relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship definition being updated. Together with the scope this uniquely\r\n            identifies the relationship definition.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of relationship definition to update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EXPERIMENTAL] Get relationship definition",
        "description": "Retrieve the specified relationship definition",
        "operationId": "GetRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified relationship definition.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified relationship definition. Together with the domain and scope this uniquely\r\n            identifies the relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified relationship definition. Together with the domain and scope this uniquely\r\n            identifies the relationship definition.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relationship definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the relationship definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}/relationships": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "[EXPERIMENTAL] Create Relationship",
        "description": "Create a relationship between two entity objects by their identifiers",
        "operationId": "CreateRelationship",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relationship to create.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relationship.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {}
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {}
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {}
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {}
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {}
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {}
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}/relationships/$delete": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "[EXPERIMENTAL] Delete Relationship",
        "description": "Delete a relationship between two entity objects represented by their identifiers",
        "operationId": "DeleteRelationship",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relationship to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the relationship is deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/results/{scope}/{resultsKey}/$aggregate": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[EXPERIMENTAL] Aggregate using result data",
        "description": "Aggregate data from a previously-run Result data set into a flat row of results",
        "operationId": "GetAggregationByResultSet",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Result data set",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Result data set",
              "nullable": true
            }
          },
          {
            "name": "resultsKey",
            "in": "path",
            "description": "The key of the Result data set",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key of the Result data set",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The request specifying the parameters of the aggregation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Holding/default/PV",
                    "op": "Proportion"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Sum"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "portfolioIdentifierCode": "SinglePortfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Holding/default/PV",
                    "op": "Proportion"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Sum"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "portfolioIdentifierCode": "SinglePortfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Holding/default/PV",
                    "op": "Proportion"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Sum"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "portfolioIdentifierCode": "SinglePortfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Holding/default/PV",
                    "op": "Proportion"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Sum"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "portfolioIdentifierCode": "SinglePortfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/results/queryable/keys": {
      "get": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[EXPERIMENTAL] Query the set of supported \"addresses\" that can be queried from the aggregation endpoint.",
        "description": "When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,\r\nwhat they are and what they return.",
        "operationId": "GetQueryableKeys",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing queryable keys from a previous call to list queryable keys.\r\n            This value is returned from the previous call.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing queryable keys from a previous call to list queryable keys.\r\n            This value is returned from the previous call.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/schemas/entities": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[BETA] List entities",
        "description": "List all available entities for which schema information is available.",
        "operationId": "ListEntities",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/schemas/entities/{entity}": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[BETA] Get schema",
        "description": "Gets the schema and meta-data for a given entity",
        "operationId": "GetEntitySchema",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "description": "The name of a valid entity",
            "required": true,
            "schema": {
              "maxLength": 6000,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of a valid entity",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/schemas/properties": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[BETA] Get property schema",
        "description": "Get the schemas for the provided list of property keys.",
        "operationId": "GetPropertySchema",
        "parameters": [
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more property keys for which the schema is requested",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "One or more property keys for which the schema is requested",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "schema": {
              "type": "string",
              "description": "Optional. The AsAt date of the data",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/schemas/types": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[BETA] Get value types",
        "description": "Gets the available value types for which a schema is available.",
        "operationId": "GetValueTypes",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/scopes": {
      "get": {
        "tags": [
          "Scopes"
        ],
        "summary": "[EARLY ACCESS] List Scopes",
        "description": "List all the scopes that contain data.",
        "operationId": "ListScopes",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scopes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/search/instruments": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[EXPERIMENTAL] Instruments search",
        "description": "Search across all instruments that have been mastered in LUSID. Optionally augment the results with instruments from an external symbology service,\r\ncurrently OpenFIGI.",
        "operationId": "InstrumentsSearch",
        "parameters": [
          {
            "name": "masteredEffectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label to use when searching mastered instruments. This parameter has no effect on instruments that\r\nhave not been mastered within LUSID. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label to use when searching mastered instruments. This parameter has no effect on instruments that\r\nhave not been mastered within LUSID. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "masteredOnly",
            "in": "query",
            "description": "If set to true, only search over instruments that have been mastered within LUSID. Defaults to false.",
            "schema": {
              "type": "boolean",
              "description": "If set to true, only search over instruments that have been mastered within LUSID. Defaults to false.",
              "default": false
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                },
                "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties."
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                },
                "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties."
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                },
                "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties."
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                },
                "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties."
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The instruments found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/search/portfoliogroups": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Portfolio Groups",
        "description": "Search through all portfolio groups",
        "operationId": "SearchPortfolioGroups",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[DEPRECATED] Portfolio groups search",
        "description": "Search across all portfolio groups across all scopes.",
        "operationId": "PortfolioGroupsSearch",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The portfolio groups found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/search/portfolios": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Portfolios",
        "description": "Search through all portfolios",
        "operationId": "SearchPortfolios",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[DEPRECATED] Portfolios search",
        "description": "Search across all portfolios across all scopes.",
        "operationId": "PortfoliosSearch",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The portfolios found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioSearchResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/search/propertydefinitions": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Property Definitions",
        "description": "Search through all Property Definitions",
        "operationId": "SearchProperties",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[DEPRECATED] Search property definitions",
        "description": "Search across all user defined property definitions across all scopes.",
        "operationId": "PropertiesSearch",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The property definitions found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/structured/{scope}": {
      "post": {
        "tags": [
          "Structured Market Data"
        ],
        "summary": "[EXPERIMENTAL] Upsert a set of structured market data items. This creates or updates the data in Lusid.",
        "description": "Update or insert one or more structured market data items in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each structured market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each structured market data in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted structured market data, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the item could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "UpsertStructuredMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the structured market data.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the structured market data."
            }
          }
        ],
        "requestBody": {
          "description": "The set of structured market data items to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredMarketDataRequest"
                },
                "description": "The set of structured market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "FxVolSurface",
                    "marketAsset": "USDJPY"
                  },
                  "marketData": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "IrVolCube",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredMarketDataRequest"
                },
                "description": "The set of structured market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "FxVolSurface",
                    "marketAsset": "USDJPY"
                  },
                  "marketData": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "IrVolCube",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredMarketDataRequest"
                },
                "description": "The set of structured market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "FxVolSurface",
                    "marketAsset": "USDJPY"
                  },
                  "marketData": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "IrVolCube",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredMarketDataRequest"
                },
                "description": "The set of structured market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "FxVolSurface",
                    "marketAsset": "USDJPY"
                  },
                  "marketData": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "IrVolCube",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted StructuredMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/structured/{scope}/$delete": {
      "post": {
        "tags": [
          "Structured Market Data"
        ],
        "summary": "[EXPERIMENTAL] Delete one or more items of structured market data, assuming they are present.",
        "description": "Delete one or more specified structured market data items from a single scope. Each item is identified by a unique id which includes\r\ninformation about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).\r\n            \r\nIn the request each market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted market data items, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the it could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteStructuredMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the structured market data to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the structured market data to delete."
            }
          }
        ],
        "requestBody": {
          "description": "The structured market data Ids to delete, each keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The structured market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The structured market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The structured market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The structured market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully deleted StructuredMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/structured/{scope}/$get": {
      "post": {
        "tags": [
          "Structured Market Data"
        ],
        "summary": "[EXPERIMENTAL] Get structured market data",
        "description": "Get one or more items of structured market data from a single scope.\r\n            \r\nEach item can be identified by its time invariant structured market data identifier.\r\n            \r\nFor each id LUSID will return the most recent matched item with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for data from the specified effective datetime.\r\nLUSID will return the most recent item within this window.\r\n            \r\nIn the request each structured market data id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each item in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved structured market data. Two, those that had a\r\nvalid identifier but could not be found. Three, those that failed because LUSID could not construct a valid identifier from the request.\r\n\r\nFor the ids that failed to resolve or could not be found a reason will be provided explaining why that is the case.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.",
        "operationId": "GetStructuredMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the structured market data to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the structured market data to retrieve."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the structured market data. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime at which to retrieve the structured market data. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the structured market data. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the structured market data. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a structured market data item must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a structured market data item must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved structured market data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredMarketDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredMarketDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredMarketDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/systemconfiguration/cutlabels": {
      "post": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Create a Cut Label",
        "description": "Create a Cut Label valid in all scopes",
        "operationId": "CreateCutLabelDefinition",
        "requestBody": {
          "description": "The cut label definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] List Existing Cut Labels",
        "description": "List all the Cut Label Definitions that are valid at the given AsAt time",
        "operationId": "ListCutLabelDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The As At time at which listed Cut Labels are valid",
            "schema": {
              "type": "string",
              "description": "Optional. The As At time at which listed Cut Labels are valid",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cut labels",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/cutlabels/{code}": {
      "put": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Update a Cut Label",
        "description": "Update a specified cut label",
        "operationId": "UpdateCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being updated",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being updated",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The cut label update definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Get a Cut Label",
        "description": "Get a specified cut label at a given time",
        "operationId": "GetCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being queried",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being queried",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The time at which to get the Cut Label",
            "schema": {
              "type": "string",
              "description": "The time at which to get the Cut Label",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Delete a Cut Label",
        "description": "Delete a specified cut label",
        "operationId": "DeleteCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being Deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being Deleted",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time of deletion",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactions": {
      "put": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EXPERIMENTAL] Set transaction types",
        "description": "Set all transaction types to be used by the movements engine, for the organisation\r\n            \r\nWARNING! Changing these mappings will have a material impact on how data, new and old, is processed and aggregated by LUSID. This will affect your whole organisation. Only change if you are fully aware of the implications of the change.",
        "operationId": "SetConfigurationTransactionTypes",
        "requestBody": {
          "description": "The complete set of transaction type definitions",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSetConfigurationDataRequest"
              },
              "example": {
                "transactionConfigRequests": [
                  {
                    "aliases": [
                      {
                        "type": "Simple-Sell",
                        "description": "Sale",
                        "transactionClass": "MyDefault",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {},
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {}
                  },
                  {
                    "aliases": [
                      {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                          "transactionConfiguration/default/TaxLotSelectionMethod": {
                            "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                            "value": {
                              "labelValue": "FirstInFirstOut"
                            }
                          }
                        },
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {
                      "transactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                          "labelValue": "Value"
                        }
                      }
                    }
                  }
                ],
                "sideConfigRequests": [
                  {
                    "side": "Side1",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.5",
                    "units": "500",
                    "amount": "1000"
                  },
                  {
                    "side": "Side2",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.75",
                    "units": "250",
                    "amount": "2000"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSetConfigurationDataRequest"
              },
              "example": {
                "transactionConfigRequests": [
                  {
                    "aliases": [
                      {
                        "type": "Simple-Sell",
                        "description": "Sale",
                        "transactionClass": "MyDefault",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {},
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {}
                  },
                  {
                    "aliases": [
                      {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                          "transactionConfiguration/default/TaxLotSelectionMethod": {
                            "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                            "value": {
                              "labelValue": "FirstInFirstOut"
                            }
                          }
                        },
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {
                      "transactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                          "labelValue": "Value"
                        }
                      }
                    }
                  }
                ],
                "sideConfigRequests": [
                  {
                    "side": "Side1",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.5",
                    "units": "500",
                    "amount": "1000"
                  },
                  {
                    "side": "Side2",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.75",
                    "units": "250",
                    "amount": "2000"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSetConfigurationDataRequest"
              },
              "example": {
                "transactionConfigRequests": [
                  {
                    "aliases": [
                      {
                        "type": "Simple-Sell",
                        "description": "Sale",
                        "transactionClass": "MyDefault",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {},
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {}
                  },
                  {
                    "aliases": [
                      {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                          "transactionConfiguration/default/TaxLotSelectionMethod": {
                            "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                            "value": {
                              "labelValue": "FirstInFirstOut"
                            }
                          }
                        },
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {
                      "transactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                          "labelValue": "Value"
                        }
                      }
                    }
                  }
                ],
                "sideConfigRequests": [
                  {
                    "side": "Side1",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.5",
                    "units": "500",
                    "amount": "1000"
                  },
                  {
                    "side": "Side2",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.75",
                    "units": "250",
                    "amount": "2000"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSetConfigurationDataRequest"
              },
              "example": {
                "transactionConfigRequests": [
                  {
                    "aliases": [
                      {
                        "type": "Simple-Sell",
                        "description": "Sale",
                        "transactionClass": "MyDefault",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {},
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {}
                  },
                  {
                    "aliases": [
                      {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                          "transactionConfiguration/default/TaxLotSelectionMethod": {
                            "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                            "value": {
                              "labelValue": "FirstInFirstOut"
                            }
                          }
                        },
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {
                      "transactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                          "labelValue": "Value"
                        }
                      }
                    }
                  }
                ],
                "sideConfigRequests": [
                  {
                    "side": "Side1",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.5",
                    "units": "500",
                    "amount": "1000"
                  },
                  {
                    "side": "Side2",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.75",
                    "units": "250",
                    "amount": "2000"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] List transaction types",
        "description": "Get the list of persisted transaction types",
        "operationId": "ListConfigurationTransactionTypes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Transaction configuration types. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Transaction configuration types. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactions/side": {
      "post": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EXPERIMENTAL] Create side definition",
        "description": "Create a new side definition for us in transaction type configuration",
        "operationId": "CreateSideDefinition",
        "requestBody": {
          "description": "The definition of the side to be created.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SideConfigurationDataRequest"
              },
              "example": {
                "side": "Side1",
                "security": "security",
                "currency": "currency",
                "rate": "0.5",
                "units": "500",
                "amount": "1000"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SideConfigurationDataRequest"
              },
              "example": {
                "side": "Side1",
                "security": "security",
                "currency": "currency",
                "rate": "0.5",
                "units": "500",
                "amount": "1000"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SideConfigurationDataRequest"
              },
              "example": {
                "side": "Side1",
                "security": "security",
                "currency": "currency",
                "rate": "0.5",
                "units": "500",
                "amount": "1000"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SideConfigurationDataRequest"
              },
              "example": {
                "side": "Side1",
                "security": "security",
                "currency": "currency",
                "rate": "0.5",
                "units": "500",
                "amount": "1000"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/systemconfiguration/transactions/type": {
      "post": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] Create transaction type",
        "description": "Create a new transaction type by specifying a definition and the mappings to movements",
        "operationId": "CreateConfigurationTransactionType",
        "requestBody": {
          "description": "A transaction type definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Create portfolio",
        "description": "Create a transaction portfolio in a specific scope.",
        "operationId": "CreatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope in which to create the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition and details of the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/$resolve": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Resolve Instrument",
        "description": "Try to resolve the instrument for transaction and holdings for a given instrument identifier and a specified  \r\nperiod of time. Also update the instrument identifiers with the given instrument identifiers collection.",
        "operationId": "ResolveInstrument",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdentifierType",
            "in": "query",
            "description": "The instrument identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "instrumentIdentifierValue",
            "in": "query",
            "description": "The value for the given instrument identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value for the given instrument identifier."
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashflows": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get the set of cash flows that occur in a window for the given portfolio instruments.",
        "description": "Get the set of cash flows that occur in a window for the given portfolio instruments.\r\n            \r\nNote that grouping can affect the quantity of information returned; where a holding is an amalgamation of one or more (e.g. cash) instruments, a unique\r\ntransaction identifier will not be available. The same may go for diagnostic information (e.g. multiple sources of an aggregate cash amount on a date that is\r\nnot split out. Grouping at the transaction and instrument level is recommended for those seeking to attribute individual flows.",
        "operationId": "GetPortfolioCashFlows",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the cashflow for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the cashflow for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the cashflow for. Together with the scope this\r\n             uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the cashflow for. Together with the scope this\r\n             uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n             There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n             There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n             The upper bound defaults to 'today' if it is not specified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n             The upper bound defaults to 'today' if it is not specified",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n             of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n             of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio instruments' cash flow data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentCashFlow"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentCashFlow"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentCashFlow"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashstatement": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Get CashStatement for the given portfolio.",
        "description": "Get CashStatement for the given portfolio.",
        "operationId": "GetPortfolioCashStatement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the CashStatement for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the CashStatement for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the CashStatement for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the CashStatement for. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio cash flow data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/details": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get details",
        "description": "Get the details associated with a transaction portfolio.",
        "operationId": "GetDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio to retrieve the details for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio to retrieve the details for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio to retrieve the details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio to retrieve the details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert portfolio details",
        "description": "Update or insert details for the specified transaction portfolio. The details will be updated\r\nif they already exist and inserted if they do not.",
        "operationId": "UpsertPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio to update or insert details for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio to update or insert details for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio to update or insert details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio to update or insert details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details to update or insert for the specified transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly updated or inserted details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/executions": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Upsert executions",
        "description": "Update or insert executions into the specified transaction portfolio. An execution will be updated\r\nif it already exists and inserted if it does not.",
        "operationId": "UpsertExecutions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The executions to update or insert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionRequest"
                },
                "description": "The executions to update or insert.",
                "nullable": true
              },
              "example": [
                {
                  "executionId": "ExecutionId-11111",
                  "side": "SellShort",
                  "instrumentIdentifiers": {
                    "clientInternal": "CLI-183461"
                  },
                  "transactionTime": "2018-03-05T12:00:00.0000000+00:00",
                  "lastShares": 1000,
                  "lastPx": 1.23,
                  "currency": "USD"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionRequest"
                },
                "description": "The executions to update or insert.",
                "nullable": true
              },
              "example": [
                {
                  "executionId": "ExecutionId-11111",
                  "side": "SellShort",
                  "instrumentIdentifiers": {
                    "clientInternal": "CLI-183461"
                  },
                  "transactionTime": "2018-03-05T12:00:00.0000000+00:00",
                  "lastShares": 1000,
                  "lastPx": 1.23,
                  "currency": "USD"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionRequest"
                },
                "description": "The executions to update or insert.",
                "nullable": true
              },
              "example": [
                {
                  "executionId": "ExecutionId-11111",
                  "side": "SellShort",
                  "instrumentIdentifiers": {
                    "clientInternal": "CLI-183461"
                  },
                  "transactionTime": "2018-03-05T12:00:00.0000000+00:00",
                  "lastShares": 1000,
                  "lastPx": 1.23,
                  "currency": "USD"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionRequest"
                },
                "description": "The executions to update or insert.",
                "nullable": true
              },
              "example": [
                {
                  "executionId": "ExecutionId-11111",
                  "side": "SellShort",
                  "instrumentIdentifiers": {
                    "clientInternal": "CLI-183461"
                  },
                  "transactionTime": "2018-03-05T12:00:00.0000000+00:00",
                  "lastShares": 1000,
                  "lastPx": 1.23,
                  "currency": "USD"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted executions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioExecutionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioExecutionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioExecutionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Cancel executions",
        "description": "Cancel one or more executions which exist in a specified transaction portfolio.",
        "operationId": "CancelExecutions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "executionIds",
            "in": "query",
            "description": "The ids of the executions to cancel.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ids of the executions to cancel."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the executions were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdings": {
      "put": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Set holdings",
        "description": "Set the holdings of the specified transaction portfolio to the provided targets. LUSID will automatically\r\nconstruct adjustment transactions to ensure that the entire set of holdings for the transaction portfolio\r\nare always set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "SetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The complete set of target holdings for the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly set holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Adjust holdings",
        "description": "Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will\r\nautomatically construct adjustment transactions to ensure that the holdings which have been adjusted are\r\nalways set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "AdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly adjusted holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Cancel adjust holdings",
        "description": "Cancel all previous holding adjustments made on the specified transaction portfolio for a specified effective\r\ndatetime. This should be used to undo holding adjustments made via set holdings or adjust holdings.",
        "operationId": "CancelAdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the holding adjustments were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get holdings",
        "description": "Get the holdings of the specified transaction portfolio.",
        "operationId": "GetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings and version of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "List holdings adjustments",
        "description": "List the holdings adjustments made to the specified transaction portfolio over a specified interval of effective time.",
        "operationId": "ListHoldingsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The record of holdings adjustments made to the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments/{effectiveAt}": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get holdings adjustment",
        "description": "Get a holdings adjustment made to a transaction portfolio at a specific effective datetime. Note that a\r\nholdings adjustment will only be returned if one exists for the specified effective datetime.",
        "operationId": "GetHoldingsAdjustment",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective datetime or cut label of the holdings adjustment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label of the holdings adjustment.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the requested holdings adjustment",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsWithOrders": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get holdings. Treat outstanding orders (and related records) as if they had been realised at moment of query.",
        "description": "Get the holdings of the specified transaction portfolio. Create virtual holdings for any outstanding orders,\r\nand account for order state/fulfillment.",
        "operationId": "GetHoldingsWithOrders",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings and version of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "O",
                      "units": 100,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "GBP",
                      "holdingType": "OC",
                      "units": -250,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "O",
                      "units": 100,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "GBP",
                      "holdingType": "OC",
                      "units": -250,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "O",
                      "units": 100,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "GBP",
                      "holdingType": "OC",
                      "units": -250,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get transactions",
        "description": "Get transactions from the specified transaction portfolio over a given interval of effective time. \r\n\r\nWhen the specified portfolio is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.\n\nThe maximum number of transactions that this method can get per request is 2,000.",
        "operationId": "GetTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert transactions",
        "description": "Update or insert transactions into the specified transaction portfolio. A transaction will be updated\r\nif it already exists and inserted if it does not.\n\nThe maximum number of transactions that this method can upsert per request is 10,000.",
        "operationId": "UpsertTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The transactions to be updated or inserted.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "The transactions to be updated or inserted."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "The transactions to be updated or inserted."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "The transactions to be updated or inserted."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "The transactions to be updated or inserted."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Cancel transactions",
        "description": "Cancel one or more transactions from the specified transaction portfolio.",
        "operationId": "CancelTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionIds",
            "in": "query",
            "description": "The ids of the transactions to cancel.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ids of the transactions to cancel."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the transactions were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/{transactionId}/properties": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert transaction properties",
        "description": "Update or insert one or more transaction properties to a single transaction in a transaction portfolio.\r\nEach property will be updated if it already exists and inserted if it does not.\r\nBoth transaction and portfolio must exist at the time when properties are updated or inserted.",
        "operationId": "UpsertTransactionProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique id of the transaction to update or insert properties against.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique id of the transaction to update or insert properties against.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties with their associated values to update or insert onto the\r\n            transaction.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties with their associated values to update or insert onto the\r\n            transaction."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties with their associated values to update or insert onto the\r\n            transaction."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties with their associated values to update or insert onto the\r\n            transaction."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties with their associated values to update or insert onto the\r\n            transaction."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transaction property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Delete properties from transaction",
        "description": "Delete one or more property values from a single transaction in a transaction portfolio.",
        "operationId": "DeletePropertiesFromTransaction",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique id of the transaction to delete the property value from.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique id of the transaction to delete the property value from.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete from the transaction.\r\n            This must be from the \"Transaction\" domain and will have the format {domain}/{scope}/{code} e.g.\r\n            \"Transaction/strategy/quantsignal\".",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the properties to delete from the transaction.\r\n            This must be from the \"Transaction\" domain and will have the format {domain}/{scope}/{code} e.g.\r\n            \"Transaction/strategy/quantsignal\"."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the property was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Build transactions",
        "description": "Builds and returns all transactions that affect the holdings of a portfolio over a given interval of\r\neffective time into a set of output transactions. This includes transactions automatically generated by\r\nLUSID such as holding adjustments.",
        "operationId": "BuildTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/upsertablecashflows": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get the set of cash flows that occur in a window for the given portfolio instruments as a set of upsertable transactions (DTOs).",
        "description": "Get the set of cash flows that occur in a window for the given portfolio instruments as a set of upsertable transactions (DTOs).\r\n            \r\nNote that grouping can affect the quantity of information returned; where a holding is an amalgamation of one or more (e.g. cash) instruments, a unique\r\ntransaction identifier will not be available. The same may go for diagnostic information (e.g. multiple sources of an aggregate cash amount on a date that is\r\nnot split out. Grouping at the transaction and instrument level is recommended for those seeking to attribute individual flows.\r\n            \r\nIn essence this is identical to the 'GetCashFlows' endpoint but returns the cash flows as a set of transactions suitable for directly putting back into LUSID.\r\nThere are a couple of important points:\r\n(1) Internally it can not be fully known where the user wishes to insert these transactions, e.g. portfolio and movement type.\r\n    These are therefore defaulted to a sensible option; the user will likely need to change these.\r\n(2) Similarly, knowledge of any properties the user might wish to add to a transaction are unknown and consequently left empty.\r\n(3) The transaction id that is added is simply a concatenation of the original transaction id, instrument id and payment date and direction. The user can happily override this.",
        "operationId": "GetUpsertablePortfolioCashFlows",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the cashflow for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the cashflow for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the cashflow for. Together with the scope this\r\n             uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the cashflow for. Together with the scope this\r\n             uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n             There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n             There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n             The upper bound defaults to 'today' if it is not specified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n             The upper bound defaults to 'today' if it is not specified",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n             of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n             of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio instruments' cash flow data as a set of upsertable transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfTransaction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfTransaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfTransaction"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/{scope}": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Upsert a set of structured result data items. This creates or updates the data in Lusid.",
        "description": "Update or insert one or more structured result data items in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each structured result data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each structured result data in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted structured result data, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the item could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "UpsertStructuredResultData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the structured result data.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the structured result data."
            }
          }
        ],
        "requestBody": {
          "description": "The set of structured result data items to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredResultDataRequest"
                },
                "description": "The set of structured result data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 2",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredResultDataRequest"
                },
                "description": "The set of structured result data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 2",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredResultDataRequest"
                },
                "description": "The set of structured result data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 2",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredResultDataRequest"
                },
                "description": "The set of structured result data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 2",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted result data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/{scope}/$delete": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Delete one or more items of structured result data, assuming they are present.",
        "description": "Delete one or more specified structured result data items from a single scope. Each item is identified by a unique id which includes\r\ninformation about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).\r\n            \r\nIn the request each market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted market data items, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the it could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteStructuredResultData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the structured result data to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the structured result data to delete."
            }
          }
        ],
        "requestBody": {
          "description": "The structured result data Ids to delete, each keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The structured result data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The structured result data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The structured result data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The structured result data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully deleted result data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/{scope}/$get": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Get structured result data",
        "description": "Get one or more items of structured result data from a single scope.\r\n            \r\nEach item can be identified by its time invariant structured result data identifier.\r\n            \r\nFor each id LUSID will return the most recent matched item with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for data from the specified effective datetime.\r\nLUSID will return the most recent item within this window.\r\n            \r\nIn the request each structured result data id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each item in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved structured result data. Two, those that had a\r\nvalid identifier but could not be found. Three, those that failed because LUSID could not construct a valid identifier from the request.\r\n\r\nFor the ids that failed to resolve or could not be found a reason will be provided explaining why that is the case.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.",
        "operationId": "GetStructuredResultData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the structured result data to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the structured result data to retrieve."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the structured result data. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the structured result data. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a structured result data item must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a structured result data item must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved structured result data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredResultDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredResultDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredResultDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/datamap/{scope}": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Upsert a set of structured result address definition maps. This creates or updates the data in Lusid.",
        "description": "Create one or more structured result address definition map items in a single scope. These are immutable and cannot be changed once inserted\r\n            \r\nIn the request each data map item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each structured result data in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted data maps, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the item could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "CreateDataMap",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope in which to upsert the result address definition maps",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope in which to upsert the result address definition maps"
            }
          }
        ],
        "requestBody": {
          "description": "Individual result address definition map creation requests",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateDataMapRequest"
                },
                "description": "Individual result address definition map creation requests"
              },
              "example": {}
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateDataMapRequest"
                },
                "description": "Individual result address definition map creation requests"
              },
              "example": {}
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateDataMapRequest"
                },
                "description": "Individual result address definition map creation requests"
              },
              "example": {}
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateDataMapRequest"
                },
                "description": "Individual result address definition map creation requests"
              },
              "example": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully created data maps along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/datamap/{scope}/$get": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Get the result address definition maps from the store",
        "description": "Get one or more result address definition map from a single scope.\r\n            \r\nEach item can be identified by its invariant Data Map key, which can be thought of as a permanent URL.\r\n            \r\nFor each id LUSID will return the most recent matched item.\r\n            \r\nIn the request each structured result data id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each item in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved structured result data. Two, those that had a\r\nvalid identifier but could not be found. Three, those that failed because LUSID could not construct a valid identifier from the request.\r\n            \r\nFor the ids that failed to resolve or could not be found a reason will be provided explaining why that is the case.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.",
        "operationId": "GetDataMap",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the result address definition map keys",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the result address definition map keys"
            }
          }
        ],
        "requestBody": {
          "description": "The result address definition map keys to lookup",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/DataMapKey"
                },
                "description": "The result address definition map keys to lookup"
              },
              "example": {}
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/DataMapKey"
                },
                "description": "The result address definition map keys to lookup"
              },
              "example": {}
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/DataMapKey"
                },
                "description": "The result address definition map keys to lookup"
              },
              "example": {}
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/DataMapKey"
                },
                "description": "The result address definition map keys to lookup"
              },
              "example": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved data maps along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataMapResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataMapResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataMapResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    }
  },
  "components": {
    "schemas": {
      "ResourceId": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          },
          "code": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "QuoteType": {
        "enum": [
          "Price",
          "Spread",
          "Rate",
          "LogNormalVol",
          "NormalVol",
          "ParSpread",
          "IsdaSpread",
          "Upfront"
        ],
        "type": "string"
      },
      "MarketDataKeyRule": {
        "required": [
          "dataScope",
          "field",
          "key",
          "quoteType",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)"
          },
          "supplier": {
            "type": "string",
            "description": "The market data supplier (where the data comes from)"
          },
          "dataScope": {
            "type": "string",
            "description": "The scope in which the data should be found when using this rule."
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront"
            ],
            "type": "string",
            "description": "The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront"
          },
          "field": {
            "type": "string",
            "description": "The conceptual qualification for the field, such as bid, mid, or ask.\r\nThe field must be one of a defined set for the given supplier, in the same way as it\r\nis for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId"
          },
          "quoteInterval": {
            "type": "string",
            "description": "Shorthand for the time interval used to select market data.",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt predicate specification.",
            "format": "date-time",
            "nullable": true
          },
          "priceSource": {
            "type": "string",
            "description": "The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote",
            "nullable": true
          },
          "mask": {
            "type": "string",
            "description": "Allows for partial or complete override of the market asset resolved for a dependency\r\nEither a named override or a dot separated string (A.B.C.D.*).\r\ne.g. for Rates curve 'EUR.*' will replace the resolve MarketAsset 'GBP/12M', 'GBP/3M' with the EUR equivalent, if there\r\nare no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A market data key rule describes a mapping for satisfying a particular market dependency. The supplier, scope, quote type and price side\r\ninformation define the quote in the market and which Vendor for market data would be used to perform the lookup.\r\nThe market data key defines what dependency this satisfies. The key is a rule that describes the asset class, its identifier and any other\r\nspecifics required to uniquely describe a specific economic entity (e.g. an Fx currency pair, equity name or credit curve)."
      },
      "MarketOptions": {
        "type": "object",
        "properties": {
          "defaultSupplier": {
            "type": "string",
            "description": "The default supplier of data. This controls which 'dialect' is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId",
            "nullable": true
          },
          "defaultInstrumentCodeType": {
            "type": "string",
            "description": "When instrument quotes are searched for, what identifier should be used by default",
            "nullable": true
          },
          "defaultScope": {
            "type": "string",
            "description": "For default rules, which scope should data be searched for in",
            "nullable": true
          },
          "attemptToInferMissingFx": {
            "type": "boolean",
            "description": "if true will calculate a missing Fx pair (e.g. THBJPY) from the inverse JPYTHB or from standardised pairs against USD, e.g. THBUSD and JPYUSD"
          }
        },
        "additionalProperties": false,
        "description": "The set of options that control miscellaneous and default market resolution behaviour.\r\nThese are aimed at a 'crude' level of control for those who do not wish to fine tune the way that data is resolved.\r\nFor clients who wish to simply match instruments to prices this is quite possibly sufficient. For those wishing to control market data sources\r\naccording to requirements based on accuracy or timeliness it is not. In more advanced cases the options should largely be ignored and rules specified\r\nper source. Be aware that where no specified rule matches the final fallback is on to the logic implied here."
      },
      "MarketContext": {
        "type": "object",
        "properties": {
          "marketRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataKeyRule"
            },
            "description": "The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.\r\nNominally any number are possible and will be processed in order where applicable. However, there is evidently a potential\r\nfor increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in\r\nsuch a way as to reduce the number of rules required is therefore sensible.",
            "nullable": true
          },
          "suppliers": {
            "type": "object",
            "properties": {
              "Commodity": {
                "type": "string"
              },
              "Credit": {
                "type": "string"
              },
              "Equity": {
                "type": "string"
              },
              "Fx": {
                "type": "string"
              },
              "Rates": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "description": "It is possible to control which supplier is used for a given asset class.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/MarketOptions"
          }
        },
        "additionalProperties": false,
        "description": "Market context node. This defines how LUSID processes parts of a request that require resolution of market data such as instrument prices or\r\nFx rates. It controls where the data is loaded from and which sources take precedence."
      },
      "VendorLibrary": {
        "enum": [
          "Lusid",
          "RefinitivQps",
          "RefinitivTracsWeb",
          "VolMaster",
          "IsdaCds"
        ],
        "type": "string"
      },
      "VendorModelRule": {
        "required": [
          "instrumentType",
          "modelName",
          "parameters",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "supplier": {
            "enum": [
              "Lusid",
              "RefinitivQps",
              "RefinitivTracsWeb",
              "VolMaster",
              "IsdaCds"
            ],
            "type": "string",
            "description": "The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds"
          },
          "modelName": {
            "type": "string",
            "description": "The vendor library model name"
          },
          "instrumentType": {
            "type": "string",
            "description": "The vendor library instrument type"
          },
          "parameters": {
            "type": "string",
            "description": "The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.\r\nNote that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is\r\nbetter understood."
          }
        },
        "additionalProperties": false,
        "description": "A rule that identifies the set of preferences to be used for a given library, model and instrument type.\r\nThere can be many such rules, though only the first found for a given combination would be used."
      },
      "PricingModel": {
        "enum": [
          "SimpleStatic",
          "Discounting",
          "VendorDefault",
          "BlackScholes",
          "ConstantTimeValueOfMoney",
          "Bachelier",
          "ForwardWithPoints",
          "ForwardWithPointsUndiscounted",
          "ForwardSpecifiedRate",
          "ForwardSpecifiedRateUndiscounted",
          "IndexNav",
          "IndexPrice",
          "InlinedIndex"
        ],
        "type": "string"
      },
      "ModelSelection": {
        "required": [
          "library",
          "model"
        ],
        "type": "object",
        "properties": {
          "library": {
            "enum": [
              "Lusid",
              "RefinitivQps",
              "RefinitivTracsWeb",
              "VolMaster",
              "IsdaCds"
            ],
            "type": "string",
            "description": "The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds"
          },
          "model": {
            "enum": [
              "SimpleStatic",
              "Discounting",
              "VendorDefault",
              "BlackScholes",
              "ConstantTimeValueOfMoney",
              "Bachelier",
              "ForwardWithPoints",
              "ForwardWithPointsUndiscounted",
              "ForwardSpecifiedRate",
              "ForwardSpecifiedRateUndiscounted",
              "IndexNav",
              "IndexPrice",
              "InlinedIndex"
            ],
            "type": "string",
            "description": "The available values are: SimpleStatic, Discounting, VendorDefault, BlackScholes, ConstantTimeValueOfMoney, Bachelier, ForwardWithPoints, ForwardWithPointsUndiscounted, ForwardSpecifiedRate, ForwardSpecifiedRateUndiscounted, IndexNav, IndexPrice, InlinedIndex"
          }
        },
        "additionalProperties": false,
        "description": "The combination of a library to use and a model in that library that defines which pricing code will evaluate instruments\r\nhaving a particular type/class. This allows us to control the model type and library for a given instrument."
      },
      "PricingOptions": {
        "type": "object",
        "properties": {
          "modelSelection": {
            "$ref": "#/components/schemas/ModelSelection"
          },
          "useInstrumentTypeToDeterminePricer": {
            "type": "boolean",
            "description": "If true then use the instrument type to set the default instrument pricer\r\nThis applies where no more specific set of overrides are provided on a per-vendor and instrument basis."
          },
          "allowAnyInstrumentsWithSecUidToPriceOffLookup": {
            "type": "boolean",
            "description": "By default, one would not expect to price and exotic instrument, i.e. an instrument with a complicated\r\ninstrument definition simply through looking up a price as there should be a better way of evaluating it.\r\nTo override that behaviour and allow lookup for a price from the instrument identifier(s), set this to true."
          },
          "allowPartiallySuccessfulEvaluation": {
            "type": "boolean",
            "description": "If true then a failure in task evaluation doesn't cause overall failure.\r\nresults will be returned where they succeeded and annotation elsewhere"
          },
          "produceSeparateResultForLinearOtcLegs": {
            "type": "boolean",
            "description": "If true (default), when pricing an Fx-Forward or Interest Rate Swap, Future and other linearly separable products, product two results, one for each leg\r\nrather than a single line result with the amalgamated/summed pv from both legs."
          },
          "enableUseOfCachedUnitResults": {
            "type": "boolean",
            "description": "If true, when pricing using a model or for an instrument that supports use of intermediate cached-results, use them.\r\nDefault is that this caching is turned off."
          },
          "windowValuationOnInstrumentStartEnd": {
            "type": "boolean",
            "description": "If true, when valuing an instrument outside the period where it is 'alive' (the start-maturity window) it will return a valuation of zero"
          },
          "removeContingentCashflowsInPaymentDiary": {
            "type": "boolean",
            "description": "When creating a payment diary, should contingent cash payments (e.g. from exercise of a swaption into a swap) be included or not.\r\ni.e. Is exercise or default being assumed to happen or not."
          },
          "useChildSubHoldingKeysForPortfolioExpansion": {
            "type": "boolean",
            "description": "Should fund constituents inherit subholding keys from the parent subholding keyb"
          }
        },
        "additionalProperties": false,
        "description": "Options for controlling the default aspects and behaviour of the pricing engine."
      },
      "ResultDataKeyRule": {
        "required": [
          "dataScope",
          "documentCode",
          "resourceKey",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "resourceKey": {
            "type": "string",
            "description": "The result data key that identifies the address pattern that this is a rule for"
          },
          "supplier": {
            "type": "string",
            "description": "the result resource supplier (where the data comes from)"
          },
          "dataScope": {
            "type": "string",
            "description": "which is the scope in which the data should be found"
          },
          "documentCode": {
            "type": "string",
            "description": "document code that defines which document is desired"
          },
          "quoteInterval": {
            "type": "string",
            "description": "Shorthand for the time interval used to select result data.",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt predicate specification.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A rule that describes how we resolve (unit) result data."
      },
      "PricingContext": {
        "type": "object",
        "properties": {
          "modelRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorModelRule"
            },
            "description": "The set of model rules that are available. There may be multiple rules for Vendors, but only one per model-instrument pair.\r\nWhich of these preference sets is used depends upon the model choice selection if specified, or failing that the global default model specification\r\nin the options.",
            "nullable": true
          },
          "modelChoice": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ModelSelection"
            },
            "description": "The choice of which model selection (vendor library, pricing model) to use in evaluation of a given instrument type.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/PricingOptions"
          },
          "resultDataRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultDataKeyRule"
            },
            "description": "Set of rules that control querying of unit results either for direct queries into aggregation or for\r\noverriding intermediate calculations. For example, a dirty price is made up from a clean price and the accrued interest.\r\nOne might consider overriding the accrued interest calculated by a model (perhaps one wants to match an external value or simply disagrees with the\r\ncalculated result) and use that in calculation of the dirty price.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pricing context node. In order to price an instrument a number of configuration parameters are required to determine which\r\n(a) pricing model (ranging from a simple lookup of a market quote/price through to a Monte-Carlo simulation for the behaviour of its cashflows)\r\n(b) vendor library (Lusid internal models or those provided through an external Vendor such as Refinitiv (proprietary) or QuantLib (open source)\r\nare used in the pricing.\r\n\r\nIn conjunction with these there are a number of parameters that govern the behaviour of these models. For example, in pricing an Fx volatility\r\ndependent product such as an Fx option, there are various parameters that affect model behaviour for the smile. In Lusid a distinction is made between\r\nthose which are understood natively and those which are only held for use with a given vendor-model combination. The problem is that, unlike market\r\nquote data, there are few standards around model descriptions. Hence, apparently similar terminology can be mis-leading; for example in SABR models where\r\nthe basic parameters are agreed upon but most practical models have used an approximation with adjustments where the parameters can have wildly different meanings.\r\nTo avoid confusion or mis-behaviour in this area, where parameters are not understood to be interchangeable, they are only settable on a per-library per-model\r\nbasis, essentially as opaque data that will be given to the Vendor library \"verbatim\" but not used with any other."
      },
      "AggregationOptions": {
        "type": "object",
        "properties": {
          "useAnsiLikeSyntax": {
            "type": "boolean",
            "description": "Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \"select a,sum(a) from results\";\r\nANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a)."
          }
        },
        "additionalProperties": false,
        "description": "Options for controlling the default aspects and behaviour of the aggregation."
      },
      "AggregationContext": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/AggregationOptions"
          }
        },
        "additionalProperties": false,
        "description": "Aggregation context node. Whilst the market and pricing nodes concern themselves with which models are used and where the market data comes from, the aggregation\r\ncontext determines how data is aggregated together. This controls the behaviour of the grouping and sql-like engine at the back of the valuation. For instance,\r\nit controls conversion of currencies and whether the sql-like engine behaves more like ANSI or MySql SQL."
      },
      "ConfigurationRecipe": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the Configuration Recipe."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "User given string name (code) to identify the recipe."
          },
          "market": {
            "$ref": "#/components/schemas/MarketContext"
          },
          "pricing": {
            "$ref": "#/components/schemas/PricingContext"
          },
          "aggregation": {
            "$ref": "#/components/schemas/AggregationContext"
          },
          "inheritedRecipes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A list of parent recipes (scope,code) that can be used to share functionality between recipes. For instance one might use common recipes to set up\r\npricing for individual asset classes, e.g. rates or credit, and then combine them into a single recipe to be used by an exotics desk in conjunction with\r\nsome overrides that it requires for models or other pricing options.",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "(?s).*",
            "type": "string",
            "description": "User can assign a description to understand more humanly the recipe.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Configuration or Calculation Recipe controls how LUSID processes a given request.\r\nThis can be used to change where market data used in pricing is loaded from and in what order, or which model is used to\r\nprice a given instrument as well as how aggregation will process the produced results."
      },
      "CreateRecipeRequest": {
        "required": [
          "effectiveAt",
          "recipeCreationMarketDataScopes"
        ],
        "type": "object",
        "properties": {
          "recipeCreationMarketDataScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The scopes in which the recipe creation would look for quotes/data."
          },
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "inlineRecipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The market data time, i.e. the recipe generated will look for rules with this effectiveAt.",
            "format": "dateorcutlabel"
          }
        },
        "additionalProperties": false,
        "description": "Specification class to request for the creation/supplementing of a configuration recipe"
      },
      "LusidValidationProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LusidProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AggregationOp": {
        "enum": [
          "Sum",
          "Proportion",
          "Average",
          "Count",
          "Min",
          "Max",
          "Value"
        ],
        "type": "string"
      },
      "AggregateSpec": {
        "required": [
          "key",
          "op"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid."
          },
          "op": {
            "enum": [
              "Sum",
              "Proportion",
              "Average",
              "Count",
              "Min",
              "Max",
              "Value"
            ],
            "type": "string",
            "description": "The available values are: Sum, Proportion, Average, Count, Min, Max, Value"
          }
        },
        "additionalProperties": false
      },
      "Operator": {
        "enum": [
          "Equals",
          "NotEquals",
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThan",
          "LessThanOrEqualTo",
          "In"
        ],
        "type": "string"
      },
      "OperandType": {
        "enum": [
          "Absolute",
          "Property"
        ],
        "type": "string"
      },
      "PropertyFilter": {
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid.",
            "nullable": true
          },
          "operator": {
            "enum": [
              "Equals",
              "NotEquals",
              "GreaterThan",
              "GreaterThanOrEqualTo",
              "LessThan",
              "LessThanOrEqualTo",
              "In"
            ],
            "type": "string",
            "description": "The available values are: Equals, NotEquals, GreaterThan, GreaterThanOrEqualTo, LessThan, LessThanOrEqualTo, In"
          },
          "right": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          },
          "rightOperandType": {
            "enum": [
              "Absolute",
              "Property"
            ],
            "type": "string",
            "description": "The available values are: Absolute, Property"
          }
        },
        "additionalProperties": false
      },
      "SortOrder": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "OrderBySpec": {
        "required": [
          "key",
          "sortOrder"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid."
          },
          "sortOrder": {
            "enum": [
              "Ascending",
              "Descending"
            ],
            "type": "string",
            "description": "The available values are: Ascending, Descending"
          }
        },
        "additionalProperties": false
      },
      "PortfolioEntityId": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope within which the portfolio or portfolio group lives.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Portfolio name or code.",
            "nullable": true
          },
          "portfolioEntityType": {
            "type": "string",
            "description": "String identifier for portfolio e.g. \"SinglePortfolio\" and \"GroupPortfolio\". If not specified, it is assumed to be a single portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification of a portfolio or portfolio group id, its scope and which it is."
      },
      "ValuationSchedule": {
        "required": [
          "effectiveAt"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.\r\nIn this case, valuation is calculated for the portfolio(s) for each business day in the given range.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The market data time, i.e. the time to run the valuation request effective of.",
            "format": "dateorcutlabel"
          },
          "tenor": {
            "type": "string",
            "description": "Tenor, e.g \"1D\", \"1M\" to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.",
            "nullable": true
          },
          "rollConvention": {
            "type": "string",
            "description": "When Tenor is given and is not equal to \"1D\", there may be cases where \"date + tenor\" land on non-business days around month end.\r\nIn that case, the RollConvention, e.g. modified following \"MF\" would be applied to determine the next GBD.",
            "nullable": true
          },
          "holidayCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The holiday calendar(s) that should be used in determining the date schedule.\r\nHoliday calendar(s) are supplied by their names, for example, \"CoppClarke\". \r\nNote that when the calendars are not available (e.g. when the user has insufficient permissions), \r\na recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.",
            "nullable": true
          },
          "valuationDateTimes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon."
      },
      "ValuationRequest": {
        "required": [
          "metrics"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications to calculate or retrieve during the valuation and present in the results. For example:\r\nAggregateSpec('Holding/default/PV','Sum') for returning the PV (present value) of holdings\r\nAggregateSpec('Holding/default/Units','Sum') for returning the units of holidays\r\nAggregateSpec('Instrument/default/LusidInstrumentId','Value') for returning the Lusid Instrument identifier"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCurrency": {
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "equipWithSubtotals": {
            "type": "boolean",
            "description": "Flag directing the Valuation call to populate the results with subtotals of aggregates."
          },
          "portfolioEntityIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioEntityId"
            },
            "description": "The set of portfolio or portfolio group identifier(s) that is to be valued.",
            "nullable": true
          },
          "valuationSchedule": {
            "$ref": "#/components/schemas/ValuationSchedule"
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of a valuation"
      },
      "ValueType": {
        "enum": [
          "String",
          "Int",
          "Decimal",
          "DateTime",
          "Boolean",
          "Map",
          "List",
          "PropertyArray",
          "Percentage",
          "Code",
          "Id",
          "Uri",
          "CurrencyAndAmount",
          "TradePrice",
          "Currency",
          "MetricValue",
          "ResourceId",
          "ResultValue",
          "CutLocalTime",
          "DateOrCutLabel"
        ],
        "type": "string",
        "description": "A list of types, familiar to the Ui, that define the expected input or output types on a piece of data"
      },
      "FieldSchema": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ResultDataSchema": {
        "type": "object",
        "properties": {
          "nodeValueSchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "propertySchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregationMeasureFailureDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "measure": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Link": {
        "required": [
          "href",
          "method",
          "relation"
        ],
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "href": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ListAggregationResponse": {
        "type": "object",
        "properties": {
          "aggregationEffectiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "aggregationAsAt": {
            "type": "string",
            "format": "date-time"
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          },
          "aggregationCurrency": {
            "type": "string",
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          },
          "aggregationFailures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationMeasureFailureDetail"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentType": {
        "enum": [
          "QuotedSecurity",
          "InterestRateSwap",
          "FxForward",
          "Future",
          "ExoticInstrument",
          "FxOption",
          "CreditDefaultSwap",
          "InterestRateSwaption",
          "Bond",
          "EquityOption",
          "FixedLeg",
          "FloatingLeg",
          "BespokeCashflowLeg",
          "Unknown",
          "TermDeposit",
          "ContractForDifference",
          "EquitySwap",
          "CashPerpetual",
          "CashSettled",
          "CdsIndex",
          "Basket",
          "FundingLeg"
        ],
        "type": "string"
      },
      "LusidInstrument": {
        "required": [
          "instrumentType"
        ],
        "type": "object",
        "properties": {
          "instrumentType": {
            "enum": [
              "QuotedSecurity",
              "InterestRateSwap",
              "FxForward",
              "Future",
              "ExoticInstrument",
              "FxOption",
              "CreditDefaultSwap",
              "InterestRateSwaption",
              "Bond",
              "EquityOption",
              "FixedLeg",
              "FloatingLeg",
              "BespokeCashflowLeg",
              "Unknown",
              "TermDeposit",
              "ContractForDifference",
              "EquitySwap",
              "CashPerpetual",
              "CashSettled",
              "CdsIndex",
              "Basket",
              "FundingLeg"
            ],
            "type": "string",
            "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
          }
        },
        "additionalProperties": false,
        "description": "Base class in hierarchy for LUSID Instruments. Valuation would normally be performed through passing LUSID a Code for a portfolio to be valued.\r\nIn that case the set of instruments have already been uploaded. Equally, one might wish to pass in a set of instruments directly and have LUSID\r\nvalue the inlined set. This the base instrument for this case.",
        "discriminator": {
          "propertyName": "instrumentType"
        }
      },
      "WeightedInstrument": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "The quantity of the instrument that is owned.",
            "format": "double"
          },
          "holdingIdentifier": {
            "type": "string",
            "description": "Identifier for the instrument.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case.\r\n\r\nIn an inlined aggregation request if this is wanted to identify a line item, it can be specified in the set of aggregation keys given on the aggregation\r\nrequest that accompanies the set of weighted instruments.",
            "nullable": true
          },
          "instrument": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false,
        "description": "Specification for a holding or quantity of (weight for) an instrument on a given date."
      },
      "InlineValuationRequest": {
        "required": [
          "instruments",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications to calculate or retrieve during the valuation and present in the results. For example:\r\nAggregateSpec('Holding/default/PV','Sum') for returning the PV (present value) of holdings\r\nAggregateSpec('Holding/default/Units','Sum') for returning the units of holidays\r\nAggregateSpec('Instrument/default/LusidInstrumentId','Value') for returning the Lusid Instrument identifier"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCurrency": {
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "equipWithSubtotals": {
            "type": "boolean",
            "description": "Flag directing the Valuation call to populate the results with subtotals of aggregates."
          },
          "valuationSchedule": {
            "$ref": "#/components/schemas/ValuationSchedule"
          },
          "instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedInstrument"
            },
            "description": "The set of instruments, weighted by the quantities held that are required.\r\nIt is identified by an identifier tag that can be used to identify it externally.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case."
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of an inline valuation"
      },
      "Version": {
        "required": [
          "asAtDate",
          "effectiveFrom"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.",
            "format": "date-time"
          },
          "asAtDate": {
            "type": "string",
            "description": "The asAt datetime at which the data was committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The version metadata."
      },
      "MetricValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The numerical value of the property.",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LabelValueSet": {
        "type": "object",
        "properties": {
          "values": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The set of string labels in a multi-value property."
      },
      "PropertyValue": {
        "type": "object",
        "properties": {
          "labelValue": {
            "type": "string",
            "description": "The text value of a property defined as having the 'Label' type.",
            "nullable": true
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "labelValueSet": {
            "$ref": "#/components/schemas/LabelValueSet"
          }
        },
        "additionalProperties": false,
        "description": "The value of the property."
      },
      "PerpetualProperty": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          }
        },
        "additionalProperties": false
      },
      "Allocation": {
        "required": [
          "allocatedOrderId",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "portfolioId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocatedOrderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of given instrument allocated.",
            "format": "int32"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument allocated."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this allocation.",
            "nullable": true
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument allocated."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An Allocation of a certain quantity of a specific instrument against an originating\r\nOrder."
      },
      "PagedResourceListOfAllocation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AllocationRequest": {
        "required": [
          "allocatedOrderId",
          "id",
          "instrumentIdentifiers",
          "portfolioId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this allocation.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument allocated."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of given instrument allocated.",
            "format": "int32"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocatedOrderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Allocation."
      },
      "AllocationSetRequest": {
        "type": "object",
        "properties": {
          "allocationRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllocationRequest"
            },
            "description": "A collection of AllocationRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Allocations."
      },
      "ResourceListOfAllocation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedEntityResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which the deletion became valid. May be null in the case where multiple date times are applicable.",
            "format": "date-time",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the deletion was committed to LUSID.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IsBusinessDayResponse": {
        "required": [
          "isBusinessDay",
          "requestedDateTime"
        ],
        "type": "object",
        "properties": {
          "requestedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "isBusinessDay": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Whether or not a DateTimeOffset is a business DateTime"
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "WeekendMask": {
        "required": [
          "days",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "timeZone": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Property": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the property is valid.",
            "format": "date-time",
            "nullable": true
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the property is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveFrom' datetime of the property.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Calendar": {
        "required": [
          "id",
          "properties",
          "sourceProvider",
          "type",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "type": "string"
          },
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfCalendar": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calendar"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCalendarRequest": {
        "required": [
          "calendarId",
          "calendarType",
          "sourceProvider",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "calendarId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "calendarType": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCalendarRequest": {
        "required": [
          "properties",
          "sourceProvider",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        },
        "additionalProperties": false
      },
      "DateAttributes": {
        "required": [
          "activity",
          "firstClose",
          "firstOpen",
          "irregular",
          "irregularSession",
          "lastClose",
          "lastOpen",
          "newHours"
        ],
        "type": "object",
        "properties": {
          "irregular": {
            "type": "boolean"
          },
          "irregularSession": {
            "type": "boolean"
          },
          "newHours": {
            "type": "boolean"
          },
          "activity": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "firstOpen": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "lastOpen": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "firstClose": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "lastClose": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CalendarDate": {
        "required": [
          "attributes",
          "dateIdentifier",
          "description",
          "fromUtc",
          "localDate",
          "sourceData",
          "timezone",
          "toUtc",
          "type"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "dateIdentifier": {
            "type": "string"
          },
          "fromUtc": {
            "type": "string",
            "format": "date-time"
          },
          "toUtc": {
            "type": "string",
            "format": "date-time"
          },
          "localDate": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/DateAttributes"
          },
          "sourceData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfCalendarDate": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarDate"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDateRequest": {
        "required": [
          "dateId",
          "description",
          "fromUtc",
          "timeZone",
          "toUtc"
        ],
        "type": "object",
        "properties": {
          "dateId": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "fromUtc": {
            "type": "string",
            "format": "date-time"
          },
          "toUtc": {
            "type": "string",
            "format": "date-time"
          },
          "timeZone": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "description": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "(?s).*",
            "type": "string"
          },
          "type": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "$ref": "#/components/schemas/DateAttributes"
          },
          "sourceData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CdsFlowConventions": {
        "required": [
          "currency",
          "dayCountConvention",
          "paymentCalendars",
          "paymentFrequency",
          "resetCalendars",
          "resetDays",
          "rollConvention",
          "settleDays"
        ],
        "type": "object",
        "properties": {
          "rollFrequency": {
            "type": "string",
            "description": "The frequency at which the reference bonds are updated, this defaults to 6M, but can be 3M, exp for historically issued products",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention."
          },
          "paymentFrequency": {
            "type": "string",
            "description": "When generating a multiperiod flow, or when the maturity of the flow is not given but the start date is,\r\nthe tenor is the time-step from the anchor-date to the nominal maturity of the flow prior to any adjustment."
          },
          "dayCountConvention": {
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\nand difference between them.\r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActAct, ActualActual, ActActIsda, ActActIsma, ActActIcma, Invalid]."
          },
          "rollConvention": {
            "type": "string",
            "description": "When generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.\r\nSupported string (enumeration) values are: [NoAdjustment, None, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, EndOfMonth, EOM, EndOfMonthPrevious, EOMP, EndOfMonthFollowing, EOMF, Invalid]."
          },
          "paymentCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of payment schedules."
          },
          "resetCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of reset schedules."
          },
          "settleDays": {
            "type": "integer",
            "description": "Number of Good Business Days between the trade date and the effective or settlement date of the instrument.",
            "format": "int32"
          },
          "resetDays": {
            "type": "integer",
            "description": "The number of Good Business Days between determination and payment of reset.",
            "format": "int32"
          },
          "scope": {
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the failed item that this error relates to.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of failure that occurred.",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "Description of the failure that occurred.",
            "nullable": true
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Information about the particular instance of the failure (supplied information depends on the type of failure).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCdsFlowConventionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/CdsFlowConventions"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers which did not resolve to a conventions along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfGetCdsFlowConventionsResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCdsFlowConventionsResponse"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertCdsFlowConventionsRequest": {
        "type": "object",
        "properties": {
          "cdsFlowConventions": {
            "$ref": "#/components/schemas/CdsFlowConventions"
          }
        },
        "additionalProperties": false,
        "description": "CDS Flow convention that is to be stored in the convention data store.\r\nOnly one of these must be present."
      },
      "UpsertSingleStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value that was successfully retrieved.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting structured data document"
      },
      "AnnulSingleStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The time at which the identifier was annulled",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response to a request to annul (delete) a set of structured data from Lusid. This might have been for market data or some other structured entity."
      },
      "FlowConventions": {
        "required": [
          "currency",
          "dayCountConvention",
          "paymentCalendars",
          "paymentFrequency",
          "resetCalendars",
          "resetDays",
          "rollConvention",
          "settleDays"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention."
          },
          "paymentFrequency": {
            "type": "string",
            "description": "When generating a multiperiod flow, or when the maturity of the flow is not given but the start date is,\r\nthe tenor is the time-step from the anchor-date to the nominal maturity of the flow prior to any adjustment."
          },
          "dayCountConvention": {
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\nand difference between them.\r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActAct, ActualActual, ActActIsda, ActActIsma, ActActIcma, Invalid]."
          },
          "rollConvention": {
            "type": "string",
            "description": "When generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.\r\nSupported string (enumeration) values are: [NoAdjustment, None, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, EndOfMonth, EOM, EndOfMonthPrevious, EOMP, EndOfMonthFollowing, EOMF, Invalid]."
          },
          "paymentCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of payment schedules."
          },
          "resetCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of reset schedules."
          },
          "settleDays": {
            "type": "integer",
            "description": "Number of Good Business Days between the trade date and the effective or settlement date of the instrument.",
            "format": "int32"
          },
          "resetDays": {
            "type": "integer",
            "description": "The number of Good Business Days between determination and payment of reset.",
            "format": "int32"
          },
          "scope": {
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A flow convention defines the specification for generation of the date schedule for a leg or set of cashflows.\r\nIt determines the tenor of these and, how to map the unadjusted set of dates to dates which are 'good business\r\ndays'. For example, if an unadjusted date falls on a Saturday or a bank holiday, should it be rolled forward\r\nor backward to obtain the adjusted date."
      },
      "GetFlowConventionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/FlowConventions"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers which did not resolve to a conventions along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfGetFlowConventionsResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetFlowConventionsResponse"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertFlowConventionsRequest": {
        "type": "object",
        "properties": {
          "flowConventions": {
            "$ref": "#/components/schemas/FlowConventions"
          }
        },
        "additionalProperties": false,
        "description": "Flow conventions that is to be stored in the convention data store.\r\nOnly one of these must be present."
      },
      "IndexConvention": {
        "required": [
          "currency",
          "dayCountConvention",
          "fixingReference",
          "paymentTenor",
          "publicationDayLag"
        ],
        "type": "object",
        "properties": {
          "fixingReference": {
            "type": "string",
            "description": "The reference rate name for fixings"
          },
          "publicationDayLag": {
            "type": "integer",
            "description": "Number of days between spot and publication of the rate.",
            "format": "int32"
          },
          "paymentTenor": {
            "type": "string",
            "description": "The tenor of the payment. For an OIS index this is always 1 day. For other indices, e.g. LIBOR it will have a variable tenor typically between 1 day and 1 year."
          },
          "dayCountConvention": {
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\n            and difference between them."
          },
          "currency": {
            "type": "string",
            "description": "Currency of the index convention."
          },
          "scope": {
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A set of conventions that describe the conventions for calculation of payments made on rates interbank lending and similar.\r\nBased on ISDA 2006 conventions and similar documentation. Please see the knowledge base for further documentation."
      },
      "GetIndexConventionResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/IndexConvention"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers which did not resolve to a conventions along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfGetIndexConventionResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetIndexConventionResponse"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertIndexConventionRequest": {
        "type": "object",
        "properties": {
          "indexConvention": {
            "$ref": "#/components/schemas/IndexConvention"
          }
        },
        "additionalProperties": false,
        "description": "Index convention that is to be stored in the convention data store.\r\nOnly one of these must be present."
      },
      "CreateCorporateActionSourceRequest": {
        "required": [
          "code",
          "displayName",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": ""
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "(?s).*",
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CorporateActionSource": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfCorporateActionSource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionSource"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CorporateActionTransitionComponentRequest": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CorporateActionTransitionRequest": {
        "type": "object",
        "properties": {
          "inputTransition": {
            "$ref": "#/components/schemas/CorporateActionTransitionComponentRequest"
          },
          "outputTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionComponentRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "UpsertCorporateActionRequest": {
        "required": [
          "announcementDate",
          "corporateActionCode",
          "exDate",
          "paymentDate",
          "recordDate",
          "transitions"
        ],
        "type": "object",
        "properties": {
          "corporateActionCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "(?s).*",
            "type": "string",
            "description": "",
            "nullable": true
          },
          "announcementDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "exDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "recordDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "CorporateActionTransitionComponent": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "instrumentUid",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "instrumentUid": {
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CorporateActionTransition": {
        "type": "object",
        "properties": {
          "inputTransition": {
            "$ref": "#/components/schemas/CorporateActionTransitionComponent"
          },
          "outputTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionComponent"
            },
            "description": "What will be generated relative to the input transition",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "CorporateAction": {
        "required": [
          "corporateActionCode"
        ],
        "type": "object",
        "properties": {
          "corporateActionCode": {
            "type": "string",
            "description": "The unique identifier of this corporate action"
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "announcementDate": {
            "type": "string",
            "description": "The announcement date of the corporate action",
            "format": "date-time"
          },
          "exDate": {
            "type": "string",
            "description": "The ex date of the corporate action",
            "format": "date-time"
          },
          "recordDate": {
            "type": "string",
            "description": "The record date of the corporate action",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "The payment date of the corporate action",
            "format": "date-time"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransition"
            },
            "description": "The transitions that result from this corporate action",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A corporate action"
      },
      "UpsertCorporateActionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CorporateAction"
            },
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfCorporateAction": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateAction"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditRating": {
        "required": [
          "rating",
          "ratingSource"
        ],
        "type": "object",
        "properties": {
          "ratingSource": {
            "type": "string",
            "description": "Who is providing the rating. This will typically be an agency such as Moody's or Standard and Poor.\r\nThe rating would then expected to be consistent with the expected rating scheme from the agency."
          },
          "rating": {
            "type": "string",
            "description": "The credit rating provided by the rating source. This would expected to be consistent with the rating\r\nscheme of that agency/source."
          }
        },
        "additionalProperties": false,
        "description": "Entity describing a credit rating, that is an assessment of the stability and credit worthiness of a given counterparty\r\nand hence of its likelihood of defaulting on any outstanding obligations (typically debt) that it has."
      },
      "IndustryClassificationScheme": {
        "required": [
          "businessSector",
          "economicSector",
          "industry",
          "industryActivity",
          "schemeId",
          "schemeName"
        ],
        "type": "object",
        "properties": {
          "schemeName": {
            "type": "string",
            "description": "The type of the industry classification scheme (TRBC, GICs, ICB)"
          },
          "schemeId": {
            "type": "string",
            "description": "Within the given scheme, the unique id that identifies this particular classification.\r\ne.g. within \"TRCS\", 5010202011 identifies \"Oil Exploration \\amp; Production - Onshore\" within the Energy, fossil-fuels and Oil hierarchy."
          },
          "economicSector": {
            "type": "string",
            "description": "Various schemes exist to classify the business sector within which a company operates.\r\nThey divide it into various categories around business, economic and sub-sectors (e.g. fossil fuels within energy)\r\nUnder ICB, TRBC, GICS which economic sector is the counterparty assigned to. This is Lvl 1 of that scheme (coarsest)"
          },
          "businessSector": {
            "type": "string",
            "description": "Various schemes exist to classify the business sector within which a company operates.\r\nThey divide it into various categories around business, economic and sub-sectors (e.g. fossil fuels within energy)\r\nUnder ICB, TRBC, GICS which business sector is the counterparty assigned to. This is Lvl 2 of that scheme (2nd coarsest)\r\ne.g. Fossil Fuels within energy."
          },
          "industry": {
            "type": "string",
            "description": "Various schemes exist to classify the business sector within which a company operates.\r\nThey divide it into various categories around business, economic and sub-sectors (e.g. coal within energy)\r\nUnder ICB, TRBC, GICS which business sector is the counterparty assigned to. This is Lvl 3 of that scheme (3rd coarsest)\r\ne.g. Coal or Oil within Fossil Fuels."
          },
          "industryActivity": {
            "type": "string",
            "description": "Various schemes exist to classify the business sector within which a company operates.\r\nThey divide it into various categories around business, economic and sub-sectors (e.g. coal within energy)\r\nUnder ICB, TRBC, GICS which business sector is the counterparty assigned to. This is Lvl 4 of the scheme (finest)\r\ne.g. Petroleum Refining within Oil within Fossil Fuels."
          }
        },
        "additionalProperties": false,
        "description": "Various schemes exist to classify the business sector within which a company operates.\r\nThey divide it into various categories around business, economic and sub-sectors (e.g. coal within energy)\r\nThese commonly include\r\nICB https://en.wikipedia.org/wiki/Industry_Classification_Benchmark\r\nTRBC https://en.wikipedia.org/wiki/The_Refinitiv_Business_Classification\r\nGICS https://en.wikipedia.org/wiki/Global_Industry_Classification_Standard.\r\nThese links are not intended as a complete reference but are freely available as a starting point."
      },
      "Counterparty": {
        "required": [
          "counterpartyId",
          "counterpartyName",
          "countryOfRisk",
          "industryScheme",
          "issuerRatings"
        ],
        "type": "object",
        "properties": {
          "counterpartyId": {
            "type": "string",
            "description": "A unique identifier that determines the identity of the counter-party, disambiguating between related legal entities, particularly necessary in the case of multi-nationals."
          },
          "counterpartyName": {
            "type": "string",
            "description": "The legal name of the entity to which this counterparty refers."
          },
          "countryOfRisk": {
            "type": "string",
            "description": "To which country would one naturally ascribe risk. Typically this will be synonymous with legal registration entity.\r\nThis can be used to infer funding currency and related market data in the absence of specific overrides or preference."
          },
          "issuerRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditRating"
            },
            "description": "A set of credit ratings for the counterparty fro, e.g. Standard and Poor or Moody's."
          },
          "industryScheme": {
            "$ref": "#/components/schemas/IndustryClassificationScheme"
          },
          "scope": {
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The information that describes a counterparty to a transaction (or trade). This information allows one to identify the unique legal entity with whom a transaction\r\ntakes place along with key information that would link it to any Credit Support Annex or related information that allows trades to be netted together for\r\nthe purposes of determining such calculations as Credit-Valuation-Adjustments, Debit-Valuation-Adjustments (CVA, DVA, XVA etc.). It would also help in the identification\r\nof appropriate credit curves for the purposes of such calculations and any other relevant legal document, trade coverage, contacts and similar information."
      },
      "GetCounterpartyResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/Counterparty"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The counterparty that could not be updated or inserted along with a reason for failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfGetCounterpartyResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCounterpartyResponse"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertCounterpartyRequest": {
        "type": "object",
        "properties": {
          "counterparty": {
            "$ref": "#/components/schemas/Counterparty"
          }
        },
        "additionalProperties": false,
        "description": "Flow conventions that is to be stored in the convention data store.\r\nOnly one of these must be present."
      },
      "CreditSupportAnnex": {
        "required": [
          "collateralCurrencies",
          "initialMarginAmount",
          "isdaAgreementVersion",
          "marginCallFrequency",
          "minimumTransferAmount",
          "referenceCurrency",
          "roundingDecimalPlaces",
          "thresholdAmount",
          "valuationAgent"
        ],
        "type": "object",
        "properties": {
          "referenceCurrency": {
            "type": "string",
            "description": "The base, or reference, currency against which MtM value and exposure should be calculated\r\nand in which the CSA parameters are defined if the currency is not otherwise explicitly stated."
          },
          "collateralCurrencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of currencies within which it is acceptable to post cash collateral."
          },
          "isdaAgreementVersion": {
            "type": "string",
            "description": "The transactions will take place with reference to a particular ISDA master agreement. This\r\nwill likely be either the ISDA 1992 or ISDA 2002 agremeents or ISDA close-out 2009."
          },
          "marginCallFrequency": {
            "type": "string",
            "description": "The tenor, e.g. daily (1D) or biweekly (2W), at which frequency a margin call will be made, calculations\r\nmade and money transferred to readjust. The calculation might also require a specific time for valuation and notification."
          },
          "valuationAgent": {
            "type": "string",
            "description": "Are the calculations performed by the institutions's counterparty or the institution trading with them."
          },
          "thresholdAmount": {
            "type": "number",
            "description": "At what level of exposure does collateral need to be posted. Will typically be zero for banks.\r\nShould be stated in reference currency",
            "format": "double"
          },
          "roundingDecimalPlaces": {
            "type": "integer",
            "description": "Where a calculation needs to be rounded to a specific number of decimal places,\r\nthis states the number that that requires.",
            "format": "int32"
          },
          "initialMarginAmount": {
            "type": "number",
            "description": "The initial margin that is required. In the reference currency",
            "format": "double"
          },
          "minimumTransferAmount": {
            "type": "number",
            "description": "The minimum amount, in the reference currency, that must be transferred when required.",
            "format": "double"
          },
          "scope": {
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Entity to capture the calculable and queryable methods and practices of determining and transferring collateral\r\nto a counterparty as part of margining of transactions. These typically come from a particular ISDA agreement\r\nthat is in place between the two counterparties."
      },
      "GetCreditSupportAnnexResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/CreditSupportAnnex"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The credit support annex that could not be updated or inserted along with a reason for failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfGetCreditSupportAnnexResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertCreditSupportAnnexRequest": {
        "type": "object",
        "properties": {
          "creditSupportAnnex": {
            "$ref": "#/components/schemas/CreditSupportAnnex"
          }
        },
        "additionalProperties": false,
        "description": "Credit Support Annex information. The interaction in terms of margining requirements between a set of trades for a given counterparty."
      },
      "DataTypeValueRange": {
        "enum": [
          "Open",
          "Closed"
        ],
        "type": "string",
        "description": "This class indicates what the range of data acceptable by a data type"
      },
      "UnitSchema": {
        "enum": [
          "NoUnits",
          "Basic",
          "Iso4217Currency"
        ],
        "type": "string"
      },
      "CreateUnitDefinition": {
        "required": [
          "code",
          "description",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDataTypeRequest": {
        "required": [
          "code",
          "description",
          "displayName",
          "scope",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "The available values are: Open, Closed"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUnitDefinition"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IUnitDefinitionDto": {
        "type": "object",
        "properties": {
          "schema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataType": {
        "required": [
          "description",
          "displayName",
          "id",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "The available values are: Open, Closed"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfDataType": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataType"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateDataTypeRequest": {
        "required": [
          "description",
          "displayName",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "The available values are: Open, Closed"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUnitDefinition"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfIUnitDefinitionDto": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingMethod": {
        "enum": [
          "Default",
          "AverageCost",
          "FirstInFirstOut",
          "LastInFirstOut",
          "HighestCostFirst",
          "LowestCostFirst"
        ],
        "type": "string"
      },
      "CreateDerivedTransactionPortfolioRequest": {
        "required": [
          "code",
          "displayName",
          "parentPortfolioId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": ""
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "(?s).*",
            "type": "string",
            "description": "",
            "nullable": true
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "created": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": "The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioType": {
        "enum": [
          "Transaction",
          "Reference",
          "DerivedTransaction"
        ],
        "type": "string"
      },
      "Portfolio": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio."
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio. This will be an empty string for reference portfolios.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "Change": {
        "required": [
          "amended",
          "corrected",
          "entityId"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "entityId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "corrected": {
            "type": "boolean",
            "description": ""
          },
          "correctionEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "correctionAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amended": {
            "type": "boolean",
            "description": ""
          },
          "amendmentEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amendmentAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The time an entity was modified (amendment and/or historical correction)."
      },
      "ResourceListOfChange": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentIdValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the identifier."
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier will be valid. If left unspecified the default value is the beginning of time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "InstrumentDefinition": {
        "required": [
          "identifiers",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InstrumentIdValue"
            },
            "description": "A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookThroughPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "definition": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false
      },
      "PerpetualEntityState": {
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string"
      },
      "Instrument": {
        "required": [
          "identifiers",
          "lusidInstrumentId",
          "name",
          "state",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The unique LUSID Instrument Identifier (LUID) of the instrument."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "name": {
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of identifiers that can be used to identify the instrument."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested instrument properties. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookthroughPortfolio": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "instrumentDefinition": {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          "state": {
            "enum": [
              "Active",
              "Inactive"
            ],
            "type": "string",
            "description": "The state of of the instrument at the asAt datetime of this version of the instrument definition. The available values are: Active, Inactive"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of instruments."
      },
      "UpsertInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instruments which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The instruments that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfInstrument": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instrument"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateInstrumentIdentifierRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The allowable instrument identifier to update, insert or remove e.g. 'Figi'."
          },
          "value": {
            "type": "string",
            "description": "The new value of the allowable instrument identifier. If unspecified the identifier will be removed from the instrument.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier should be updated, inserted or removed. Defaults to the current LUSID system datetime if not specified.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the instrument was deleted.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The instrument properties. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentPropertiesResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the properties were removed from the specified instruments.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateRange": {
        "required": [
          "fromDate"
        ],
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "untilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyInterval": {
        "required": [
          "asAtRange",
          "effectiveRange",
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "asAtRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "status": {
            "type": "string",
            "description": "Indicates whether the value is part of the prevailing effective date timeline for the requested asAt date, or whether it has been superseded by correctional activity"
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfPropertyInterval": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInterval"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instrument definitions, keyed by the identifier used to retrieve them. Only instruments that were found will be contained in this collection.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers which did not resolve to an instrument along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertyRequest": {
        "required": [
          "identifier",
          "identifierType"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The instrument identifier type."
          },
          "identifier": {
            "type": "string",
            "description": "The unique instrument identifier of the instrument to update or insert properties on."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertiesResponse": {
        "required": [
          "asAtDate"
        ],
        "type": "object",
        "properties": {
          "asAtDate": {
            "type": "string",
            "description": "The asAt datetime at which the properties were updated or inserted on the specified instruments.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentIdTypeDescriptor": {
        "required": [
          "identifierType",
          "isUniqueIdentifierType",
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The name of the identifier type."
          },
          "propertyKey": {
            "type": "string",
            "description": "The property key that corresponds to the identifier type."
          },
          "isUniqueIdentifierType": {
            "type": "boolean",
            "description": "Whether or not the identifier type is enforced to be unique."
          }
        },
        "additionalProperties": false,
        "description": "The description of an allowable instrument identifier."
      },
      "ResourceListOfInstrumentIdTypeDescriptor": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentIdTypeDescriptor"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntityRequest": {
        "required": [
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The identifiers the legal entity will be upserted with.The provided keys should be idTypeScope, idTypeCode, code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The display name of the Legal Entity"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to create or update an legal entity"
      },
      "LegalEntity": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the Legal Entity",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidLegalEntityId": {
            "type": "string",
            "description": "The unique LUSID Legal Entity Identifier (LULEID) of the Legal Entity. This field is not populated until further notice.",
            "nullable": true
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Unique client-defined identifiers of the Legal Entity.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of Legal Entity on LUSID API"
      },
      "PagedResourceListOfLegalEntity": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalEntity"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessMetadataValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An access control value. Provider should only be used if you are a service provide licensing data. In that case\r\nthe provider value must match your domain."
      },
      "UpsertLegalEntityAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a Legal Entity that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfAccessMetadataValueOf": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessMetadataValue"
              }
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Relation": {
        "required": [
          "relatedEntityId",
          "relationDefinitionId",
          "traversalDescription",
          "traversalDirection"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "relatedEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "traversalDirection": {
            "type": "string"
          },
          "traversalDescription": {
            "type": "string"
          },
          "effectiveFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Relation between a requested entity with the stated entity as RelationedEntityId"
      },
      "ResourceListOfRelation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelatedEntity": {
        "required": [
          "displayName",
          "entityId",
          "entityType"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string",
            "description": "The type of the entity."
          },
          "entityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the other related entity in the relationship. It contains 'scope' and 'code' as keys for identifiers of a Portfolio or Portfolio Group, or 'idTypeScope', 'idTypeCode', 'code' as keys for identifiers of a Person or Legal Entity."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the entity."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties of the entity. This field is empty until further notice.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about the other related entity in the relationship"
      },
      "Relationship": {
        "required": [
          "relatedEntity",
          "relationshipDefinitionId",
          "traversalDescription",
          "traversalDirection"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "relatedEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "traversalDirection": {
            "type": "string",
            "description": "Direction of relationship betwen the requested entity and related entity. This can be 'In' or 'Out'. Read more about relationships traversal direction in LUSID Knowledge Base here https://support.lusid.com/relationships."
          },
          "traversalDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship's traversal direction. If 'TraversalDirection' is 'Out', this description would be 'OutwardDescription' from the associated relationship definition. If 'TraversalDirection' is 'In', this description would be 'InwardDescription' from the associated relationship definition."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the relationship is valid.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Relationship between a requested entity with the stated entity as RelatedEntityId"
      },
      "ResourceListOfRelationship": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActionId": {
        "required": [
          "activity",
          "entity",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "activity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          },
          "entity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IdSelectorDefinition": {
        "required": [
          "actions",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "actions": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionId"
            }
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessControlledAction": {
        "required": [
          "action",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/ActionId"
          },
          "limitedSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdSelectorDefinition"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentifierPartSchema": {
        "required": [
          "description",
          "displayName",
          "index",
          "name",
          "required"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessControlledResource": {
        "required": [
          "actions",
          "description"
        ],
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledAction"
            }
          },
          "identifierParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierPartSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfAccessControlledResource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledResource"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Stream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "writeTimeout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "fileStream": {
            "$ref": "#/components/schemas/Stream"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "downloadedFilename": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Allows a file (represented as a stream) to be returned from an Api call"
      },
      "QuoteAccessMetadataRuleId": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the quote, e.g. 'DataScope', 'LUSID' etc.",
            "nullable": true
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the quote, e.g. a bank or financial institution.",
            "nullable": true
          },
          "instrumentId": {
            "type": "string",
            "description": "The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. 'BBG00JX0P539'.",
            "nullable": true
          },
          "instrumentIdType": {
            "type": "string",
            "description": "The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. 'Figi'.",
            "nullable": true
          },
          "quoteType": {
            "type": "string",
            "description": "The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used.",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely identifies a set of Quote access control metadata."
      },
      "QuoteAccessMetadataRule": {
        "required": [
          "id",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/QuoteAccessMetadataRuleId"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessMetadataValue"
              }
            },
            "description": "The access control metadata to assign to quotes that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfQuoteAccessMetadataRule": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteAccessMetadataRule"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertQuoteAccessMetadataRuleRequest": {
        "required": [
          "id",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/QuoteAccessMetadataRuleId"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessMetadataValue"
              }
            },
            "description": "The access control metadata to assign to quotes that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "VersionSummaryDto": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "nullable": true
          },
          "buildVersion": {
            "type": "string",
            "nullable": true
          },
          "excelVersion": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "required": [
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "portfolioId",
          "quantity",
          "side"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of given instrument ordered.",
            "format": "int32"
          },
          "side": {
            "type": "string",
            "description": "The client's representation of the order's side (buy, sell, short, etc)"
          },
          "orderBookId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument ordered."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An Order for a certain quantity of a specific instrument"
      },
      "PagedResourceListOfOrder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderRequest": {
        "required": [
          "id",
          "instrumentIdentifiers",
          "portfolioId",
          "quantity",
          "side"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of given instrument ordered.",
            "format": "int32"
          },
          "side": {
            "type": "string",
            "description": "The client's representation of the order's side (buy, sell, short, etc)"
          },
          "orderBookId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Order."
      },
      "OrderSetRequest": {
        "type": "object",
        "properties": {
          "orderRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRequest"
            },
            "description": "A collection of OrderRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Orders."
      },
      "ResourceListOfOrder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPersonRequest": {
        "required": [
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The identifiers the person will be upserted with.The provided keys should be idTypeScope, idTypeCode, code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            },
            "description": "A set of properties associated to the Person. There can be multiple properties associated with a property key.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The display name of the Person"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Person",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the Person",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Person",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidPersonId": {
            "type": "string",
            "description": "The unique LUSID Person Identifier (LUPID) of the Person.",
            "nullable": true
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Unique client-defined identifiers of the Person.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            },
            "description": "A set of properties associated to the Person. There can be multiple properties associated with a property key.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfPerson": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPersonIdentifiersRequest": {
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Identifiers to set for a Person. Identifiers not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPersonAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a Person that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPersonPropertiesRequest": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            },
            "description": "Properties to set for a Person. All time-variant properties must have same EffectiveFrom date. Properties not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioGroupRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code that the portfolio group will be created with. Together with the scope this uniquely identifies the portfolio group."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolios to be contained within the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolio groups to be contained within the portfolio group as sub groups.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique group properties to add to the portfolio group. Each property must be from the 'PortfolioGroup' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'PortfolioGroup/Manager/Id'. These properties must be pre-defined.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfPortfolioGroup": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroup"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioGroupRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The unique id of the user that issued the command."
      },
      "ProcessedCommand": {
        "required": [
          "description",
          "processedTime",
          "userId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the command issued."
          },
          "path": {
            "type": "string",
            "description": "The unique identifier for the command including the request id.",
            "nullable": true
          },
          "userId": {
            "$ref": "#/components/schemas/User"
          },
          "processedTime": {
            "type": "string",
            "description": "The asAt datetime that the events published by the processing of this command were committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The list of commands."
      },
      "ResourceListOfProcessedCommand": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessedCommand"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompletePortfolio": {
        "required": [
          "id",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "If the portfolio is a transaction portfolio or derived transaction portfolio, this is the base currency of the portfolio.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExpandedGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletePortfolio"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpandedGroup"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CurrencyAndAmount": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An amount of a specific currency, specifying a value and an associated unit"
      },
      "TransactionPriceType": {
        "enum": [
          "Price",
          "Yield",
          "Spread"
        ],
        "type": "string"
      },
      "TransactionPrice": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "enum": [
              "Price",
              "Yield",
              "Spread"
            ],
            "type": "string",
            "description": "The available values are: Price, Yield, Spread"
          }
        },
        "additionalProperties": false
      },
      "Transaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of instrument identifiers that can be used to resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "A list of transactions."
      },
      "PortfolioHolding": {
        "required": [
          "cost",
          "costPortfolioCcy",
          "holdingType",
          "instrumentUid",
          "settledUnits",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' or 'Holding' domain.",
            "nullable": true
          },
          "holdingType": {
            "type": "string",
            "description": "The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc."
          },
          "units": {
            "type": "number",
            "description": "The total number of units of the holding.",
            "format": "double"
          },
          "settledUnits": {
            "type": "number",
            "description": "The total number of settled units of the holding.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of holdings."
      },
      "VersionedResourceListOfPortfolioHolding": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioHolding"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioGroupAccessMetadataRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to portfolio groups that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio group properties. These will be from the 'PortfolioGroup' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionQueryMode": {
        "enum": [
          "TradeDate",
          "SettleDate"
        ],
        "type": "string"
      },
      "TransactionQueryParameters": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to build the transactions.",
            "format": "dateorcutlabel"
          },
          "endDate": {
            "type": "string",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.",
            "format": "dateorcutlabel"
          },
          "queryMode": {
            "enum": [
              "TradeDate",
              "SettleDate"
            ],
            "type": "string",
            "description": "The date to compare against the upper and lower bounds for the effective datetime or cut label. Defaults to 'TradeDate' if not specified. The available values are: TradeDate, SettleDate"
          },
          "showCancelledTransactions": {
            "type": "boolean",
            "description": "Option to specify whether or not to include cancelled transactions in the output. Defaults to False if not specified."
          }
        },
        "additionalProperties": false
      },
      "TransactionStatus": {
        "enum": [
          "Active",
          "Amended",
          "Cancelled"
        ],
        "type": "string"
      },
      "RealisedGainLoss": {
        "required": [
          "costPortfolioCcy",
          "costTradeCcy",
          "instrumentUid",
          "realisedTotal",
          "realisedTradeCcy",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that this gain or loss is associated with."
          },
          "units": {
            "type": "number",
            "description": "The number of units of the associated instrument against which the gain or loss has been realised.",
            "format": "double"
          },
          "purchaseTradeDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally purchased.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchaseSettlementDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally settled.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "The purchase price of each unit associated with this gain or loss.",
            "format": "double",
            "nullable": true
          },
          "costTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTotal": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedMarket": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          }
        },
        "additionalProperties": false
      },
      "OutputTransaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction. This only exists on transactions generated by LUSID e.g. a holdings adjustment transaction.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of instrument identifiers that can be used to resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionAmount": {
            "type": "number",
            "description": "The total value of the transaction in the transaction currency.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double"
          },
          "transactionToPortfolioRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and portfolio currency. For example if the transaction currency is in USD and the portfolio currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "transactionStatus": {
            "enum": [
              "Active",
              "Amended",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the transaction. The available values are: Active, Amended, Cancelled"
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          },
          "cancelDateTime": {
            "type": "string",
            "description": "If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "realisedGainLoss": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RealisedGainLoss"
            },
            "description": "The collection of realised gains or losses resulting from relevant transactions e.g. a sale transaction. The cost used in calculating the realised gain or loss is determined by the accounting method defined when the transaction portfolio is created.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of output transactions."
      },
      "VersionedResourceListOfOutputTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutputTransaction"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfPortfolio": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Portfolio"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the transaction portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioAccessMetadataRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to portfolios that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "PortfolioProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PerformanceReturn": {
        "required": [
          "effectiveAt",
          "openingMarketValue",
          "rateOfReturn"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt for the return.",
            "format": "date-time"
          },
          "rateOfReturn": {
            "type": "number",
            "description": "The return number.",
            "format": "double"
          },
          "openingMarketValue": {
            "type": "number",
            "description": "The opening market value.",
            "format": "double"
          },
          "period": {
            "type": "string",
            "description": "Show the returns on a Daily or Monthly period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Returns."
      },
      "UpsertReturnsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/ErrorDetail"
              }
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting Returns"
      },
      "ResourceListOfPerformanceReturn": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReturn"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregatedReturn": {
        "required": [
          "effectiveAt",
          "metricsValue",
          "openingMarketValue"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt for the return.",
            "format": "date-time"
          },
          "openingMarketValue": {
            "type": "number",
            "description": "The opening market value.",
            "format": "double"
          },
          "metricsValue": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The value for the specified metric."
          },
          "frequency": {
            "type": "string",
            "description": "Show the aggregated output returns on a Daily or Monthly period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Aggregated Returns."
      },
      "ResourceListOfAggregatedReturn": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregatedReturn"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioReconciliationRequest": {
        "required": [
          "effectiveAt",
          "portfolioId"
        ],
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective date of the portfolio",
            "format": "dateorcutlabel"
          },
          "asAt": {
            "type": "string",
            "description": "Optional. The AsAt date of the portfolio",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfoliosReconciliationRequest": {
        "required": [
          "instrumentPropertyKeys",
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "instrumentPropertyKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio"
          }
        },
        "additionalProperties": false
      },
      "ReconciliationBreak": {
        "required": [
          "differenceCost",
          "differenceUnits",
          "instrumentProperties",
          "instrumentUid",
          "leftCost",
          "leftUnits",
          "rightCost",
          "rightUnits",
          "subHoldingKeys"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "Unique instrument identifier"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Any other properties that comprise the Sub-Holding Key"
          },
          "leftUnits": {
            "type": "number",
            "description": "Units from the left hand side",
            "format": "double"
          },
          "rightUnits": {
            "type": "number",
            "description": "Units from the right hand side",
            "format": "double"
          },
          "differenceUnits": {
            "type": "number",
            "description": "Difference in units",
            "format": "double"
          },
          "leftCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "rightCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "differenceCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "instrumentProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Additional features relating to the instrument"
          }
        },
        "additionalProperties": false,
        "description": "A reconciliation break"
      },
      "ResourceListOfReconciliationBreak": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationBreak"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregationRequest": {
        "required": [
          "effectiveAt",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "inlineRecipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.\r\nIn this case, valuation is calculated for the portfolio(s) for each date that is a business day in the given range.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The market data time, i.e. the time to run the aggregation request effective of.",
            "format": "dateorcutlabel"
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications for items to calculate or retrieve during the aggregation and present in the results.\r\nThis is logically equivalent to the set of operations in a Sql select statement\r\nselect [operation1(field1), operation2(field2), ... ] from results"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "description": "limit the results to a particular number of values.",
            "format": "int32",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCcy": {
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCcy denominated queries.\r\nIf not present then the currency of the relevant portfolio will be used in its place where relevant.",
            "nullable": true
          },
          "portfolioIdentifierCode": {
            "type": "string",
            "description": "String identifier for portfolio e.g. \"SinglePortfolio\" and \"GroupPortfolio\"",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of an aggregation"
      },
      "InlineAggregationRequest": {
        "required": [
          "instruments",
          "request"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/AggregationRequest"
          },
          "instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedInstrument"
            },
            "description": "The set of instruments, weighted by the quantities held that are required.\r\nIt is identified by an identifier tag that can be used to identify it externally.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case."
          }
        },
        "additionalProperties": false,
        "description": "Specification for an inline aggregation request consisting of an aggregation request and an inlined portfolio on which it is to be performed"
      },
      "InlineValuationReconciliationRequest": {
        "required": [
          "aggregation",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The id of the portfolio on which to run the aggregation request"
          },
          "aggregation": {
            "$ref": "#/components/schemas/InlineAggregationRequest"
          }
        },
        "additionalProperties": false,
        "description": "Specification for the parameters that define how to perform a reconciliation between two sets of instruments. This defines\r\nthe specification for one half of that request, namely how to find and perform an aggregation request on one of the sets."
      },
      "ReconciliationLeftRightAddressKeyPair": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "Address key defined by the lhs aggregation"
          },
          "right": {
            "type": "string",
            "description": "Address key defined by the rhs aggregation"
          }
        },
        "additionalProperties": false
      },
      "InlineValuationsReconciliationRequest": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/InlineValuationReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/InlineValuationReconciliationRequest"
          },
          "leftToRightMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationLeftRightAddressKeyPair"
            },
            "description": "The mapping from property keys requested by left aggregation to property keys on right hand side",
            "nullable": true
          },
          "preserveKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "List of keys to preserve (from rhs) in the diff. Used in conjunction with filtering/grouping",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification for the reconciliation request. Left and Right hand sides are constructed. Each consists of a valuation of a inline set of instruments\r\nusing an inline aggregation request. The results of this can then be compared to each other. The difference, which is effectively a risk based\r\ndifference allows comparison of the effects of changing a recipe, valuation date, or (though it may or may not make logical sense) a set of instruments."
      },
      "ListAggregationReconciliation": {
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ListAggregationResponse"
          },
          "right": {
            "$ref": "#/components/schemas/ListAggregationResponse"
          },
          "diff": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          }
        },
        "additionalProperties": false
      },
      "ValuationReconciliationRequest": {
        "required": [
          "aggregation",
          "portfolioId"
        ],
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "aggregation": {
            "$ref": "#/components/schemas/AggregationRequest"
          }
        },
        "additionalProperties": false,
        "description": "Specification for the parameters that define how to perform a reconciliation between two portfolios. This defines\r\nthe specification for one half of that request, namely how to find and perform an aggregation request on one of the portfolios."
      },
      "ValuationsReconciliationRequest": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ValuationReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/ValuationReconciliationRequest"
          },
          "leftToRightMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationLeftRightAddressKeyPair"
            },
            "description": "The mapping from property keys requested by left aggregation to property keys on right hand side",
            "nullable": true
          },
          "preserveKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "List of keys to preserve (from rhs) in the diff. Used in conjunction with filtering/grouping",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification for the reconciliation request. Left and Right hand sides are constructed. Each consists of a valuation of a portfolio\r\nusing an aggregation request. The results of this can then be compared to each other. The difference, which is effectively a risk based\r\ndifference allows comparison of the effects of changing a recipe, valuation date, or (though it may or may not make logical sense) a portfolio.\r\nFor instance, one might look at the difference in risk caused by the addition of transaction to a portfolio, or through changing the valuation\r\nmethodology or system."
      },
      "ToleranceEnum": {
        "enum": [
          "Absolute",
          "Relative"
        ],
        "type": "string"
      },
      "Tolerance": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The numerical value of the property.",
            "format": "double"
          },
          "type": {
            "enum": [
              "Absolute",
              "Relative"
            ],
            "type": "string",
            "description": "The available values are: Absolute, Relative"
          }
        },
        "additionalProperties": false
      },
      "PortfoliosReconciliationRequestPreview": {
        "required": [
          "instrumentPropertyKeys",
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "tolerance": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Tolerance"
            },
            "description": "Tolerance to be included for the units and cost.",
            "nullable": true
          },
          "left": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "instrumentPropertyKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio"
          }
        },
        "additionalProperties": false
      },
      "PropertyDomain": {
        "enum": [
          "NotDefined",
          "Transaction",
          "Portfolio",
          "Holding",
          "ReferenceHolding",
          "TransactionConfiguration",
          "Instrument",
          "CutLabelDefinition",
          "Analytic",
          "PortfolioGroup",
          "Person",
          "AccessMetadata",
          "Order",
          "UnitResult",
          "MarketData",
          "ConfigurationRecipe",
          "Allocation",
          "Calendar",
          "LegalEntity"
        ],
        "type": "string",
        "description": "See https://wiki.finbourne.com/information/domain-model-properties\r\n            \r\nEach domain refers to a logical set of properties which reside within it."
      },
      "PropertyLifeTime": {
        "enum": [
          "Perpetual",
          "TimeVariant"
        ],
        "type": "string"
      },
      "CreatePropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key. Defaults to \"Property\" if not specified. Valid values for this field are: Property, Collection or Identifier.",
            "nullable": true
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyType": {
        "enum": [
          "Label",
          "Metric",
          "Information"
        ],
        "type": "string",
        "description": "See https://wiki.finbourne.com/information/domain-model-properties"
      },
      "PropertyDefinitionType": {
        "enum": [
          "ValueProperty",
          "DerivedDefinition"
        ],
        "type": "string"
      },
      "PropertyDefinition": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of property definitions."
      },
      "ResourceListOfPropertyDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinition"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePropertyDefinitionRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDerivedPropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuoteInstrumentIdType": {
        "enum": [
          "LusidInstrumentId",
          "Figi",
          "RIC",
          "QuotePermId",
          "Isin",
          "CurrencyPair",
          "ClientInternal"
        ],
        "type": "string"
      },
      "QuoteSeriesId": {
        "required": [
          "field",
          "instrumentId",
          "instrumentIdType",
          "provider",
          "quoteType"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the quote, e.g. 'DataScope', 'LUSID' etc."
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the quote, e.g. a bank or financial institution.",
            "nullable": true
          },
          "instrumentId": {
            "type": "string",
            "description": "The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. 'BBG00JX0P539'."
          },
          "instrumentIdType": {
            "enum": [
              "LusidInstrumentId",
              "Figi",
              "RIC",
              "QuotePermId",
              "Isin",
              "CurrencyPair",
              "ClientInternal"
            ],
            "type": "string",
            "description": "The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. 'Figi'. The available values are: LusidInstrumentId, Figi, RIC, QuotePermId, Isin, CurrencyPair, ClientInternal",
            "nullable": true
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront"
            ],
            "type": "string",
            "description": "The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used. The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider."
          }
        },
        "additionalProperties": false,
        "description": "The time invariant unique identifier of the quote. Combined with the effective datetime of the quote this\r\nuniquely identifies the quote. This can be thought of as a unique identifier for a time series of quotes."
      },
      "QuoteId": {
        "required": [
          "effectiveAt",
          "quoteSeriesId"
        ],
        "type": "object",
        "properties": {
          "quoteSeriesId": {
            "$ref": "#/components/schemas/QuoteSeriesId"
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime or cut label at which the quote is valid from.",
            "format": "dateorcutlabel"
          }
        },
        "additionalProperties": false,
        "description": "The unique identifier of the quote."
      },
      "UpsertQuoteRequest": {
        "required": [
          "quoteId"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details of the quote including its unique identifier, value and lineage."
      },
      "Quote": {
        "required": [
          "asAt",
          "quoteId",
          "uploadedBy"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "cutLabel": {
            "type": "string",
            "description": "The cut label that this quote was updated or inserted with.",
            "nullable": true
          },
          "uploadedBy": {
            "type": "string",
            "description": "The unique id of the user that updated or inserted the quote."
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the quote was committed to LUSID.",
            "format": "date-time"
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The quote id, value and lineage of the quotes all keyed by a unique correlation id."
      },
      "UpsertQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfQuote": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quote"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AnnulQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The quotes which have been successfully deleted along with the asAt datetime at which the deletion was committed to LUSID.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be deleted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully retrieved.",
            "nullable": true
          },
          "notFound": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be found along with a reason why.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be retrieved due to an error along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigurationRecipeSnippet": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the Configuration Recipe snippet"
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "User given string name (code) to identify the recipe."
          },
          "aggregationOptions": {
            "$ref": "#/components/schemas/AggregationOptions"
          },
          "modelRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorModelRule"
            },
            "description": "The set of model rules that are available. There may be multiple rules for Vendors, but only one per model-instrument pair.\r\nWhich of these preference sets is used depends upon the model choice selection if specified, or failing that the global default model specification\r\nin the options.",
            "nullable": true
          },
          "pricingOptions": {
            "$ref": "#/components/schemas/PricingOptions"
          },
          "marketRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataKeyRule"
            },
            "description": "The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.\r\nNominally any number are possible and will be processed in order where applicable. However, there is evidently a potential\r\nfor increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in\r\nsuch a way as to reduce the number of rules required is therefore sensible.",
            "nullable": true
          },
          "marketOptions": {
            "$ref": "#/components/schemas/MarketOptions"
          },
          "recipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          }
        },
        "additionalProperties": false,
        "description": "If it is desired to have multiple recipes, there is a strong likelihood that they will share various components.\r\nA configuration recipe snippet allows a user to define a set of rules that can then be included into a parent recipe.\r\nThis allows sharing of common blocks of the recipe.\r\n            \r\nFor example, a user might define a set of rules for resolving Fx and then include them into every recipe used firm-wide, thereby\r\nenforcing consistency. As the rules can be permissioned differently using Shrine, it is possible to enable users to \r\nread but not alter such a rule set.\r\n            \r\nThe same applies to a set of pricing rules.\r\n            \r\nA configuration snippet must only contain one entry from the available set. \r\n            \r\nRecipes are compiled from the set of snippets through a model that is analogous to inheritance.\r\nA recipe can have a set of 'parent' recipes from which it inherits. These are specified in the inheritance section of a recipe.\r\nUpon loading, the recipe will fall back on these recipe components for any options or rules that are not explicitly specified in the\r\nnamed recipe for the request.\r\n            \r\nThis allows control of pricing to be harmonised across a set of desks within an institution. Suppose that, e.g.\r\nthere are four desks looking after products under the areas of Fx, Rates, Credit and Exotics.\r\nThe model and market data for pricing given asset types would potentially be controlled by the appropriate desk; e.g. rules for Fx market data resolution being\r\ncontrolled by the Fx desk. The exotics desk would likely depend upon rules for all the other asset classes as well as, say, correlation rules of its own.\r\nIt could inherit the market data and model rules from the other desks for finding the appropriate institution-standard data and then overlay that with the correlation rules.\r\n            \r\nNote that permissioning of the store means that one could decide that only a particular desk or control function could update certain rules. That would assist the abilitiy\r\nto ensure that pricing is performed consistently and provide an audit of changes made to it along with restricting changes to appropriate authorised functions."
      },
      "UpsertRecipeRequest": {
        "type": "object",
        "properties": {
          "configurationRecipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "configurationRecipeSnippet": {
            "$ref": "#/components/schemas/ConfigurationRecipeSnippet"
          }
        },
        "additionalProperties": false,
        "description": "A recipe or recipe snippet that is to be stored in the recipe structured data store.\r\nOnly one of these must be present."
      },
      "GetRecipeResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfGetRecipeResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetRecipeResponse"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateReferencePortfolioRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": ""
          },
          "created": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Portfolio properties to add to the portfolio",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioWeightType": {
        "enum": [
          "Static",
          "Floating",
          "Periodical"
        ],
        "type": "string"
      },
      "PeriodType": {
        "enum": [
          "Daily",
          "Weekly",
          "Monthly",
          "Quarterly",
          "Annually"
        ],
        "type": "string"
      },
      "ReferencePortfolioConstituentRequest": {
        "required": [
          "instrumentIdentifiers",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertReferencePortfolioConstituentsRequest": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The first date from which the weights will apply",
            "format": "dateorcutlabel"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituentRequest"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          }
        },
        "additionalProperties": false
      },
      "UpsertReferencePortfolioConstituentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituent": {
        "required": [
          "currency",
          "instrumentUid",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "currency": {
            "type": "string",
            "description": ""
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties associated with the constituent",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "floatingWeight": {
            "type": "number",
            "description": "",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetReferencePortfolioConstituentsResponse": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituent"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          },
          "href": {
            "type": "string",
            "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConstituentsAdjustmentHeader": {
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfConstituentsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstituentsAdjustmentHeader"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationDefinitionRequest": {
        "required": [
          "code",
          "displayName",
          "inwardDescription",
          "outwardDescription",
          "scope",
          "sourceEntityDomain",
          "targetEntityDomain"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope that the relation exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the relation. Together with the scope this uniquely defines the relation."
          },
          "sourceEntityDomain": {
            "type": "string",
            "description": "The entity domain of the source entity object must be, allowed values are \"Portfolio\" and \"Person\""
          },
          "targetEntityDomain": {
            "type": "string",
            "description": "The entity domain of the target entity object must be, allowed values are \"Portfolio\" and \"Person\""
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the relation."
          },
          "outwardDescription": {
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relations can change over time, allowed values are \"Perpetual\" and \"TimeVariant\"",
            "nullable": true
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \"Property\" and \"Collection\", defaults to \"Collection\" if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationDefinition": {
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityDomain": {
            "type": "string",
            "description": "The entity domain of the source entity object.",
            "nullable": true
          },
          "targetEntityDomain": {
            "type": "string",
            "description": "The entity domain of the target entity object.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the relation.",
            "nullable": true
          },
          "outwardDescription": {
            "type": "string",
            "description": "The description to relate source entity object and target entity object",
            "nullable": true
          },
          "inwardDescription": {
            "type": "string",
            "description": "The description to relate target entity object and source entity object",
            "nullable": true
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relations can change over time, allowed values are \"Perpetual\" and \"TimeVariant\"",
            "nullable": true
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \"Property\" and \"Collection\", defaults to \"Collection\" if not specified.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity."
          }
        },
        "additionalProperties": false
      },
      "CompleteRelation": {
        "required": [
          "inwardDescription",
          "outwardDescription",
          "relationDefinitionId",
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "outwardDescription": {
            "type": "string"
          },
          "inwardDescription": {
            "type": "string"
          },
          "effectiveFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a relation containing details of source and target entities, and both outward and inward descriptions."
      },
      "DeleteRelationRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity of the relation to be deleted."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity of the relation to be deleted."
          }
        },
        "additionalProperties": false
      },
      "CreateRelationshipDefinitionRequest": {
        "required": [
          "code",
          "displayName",
          "inwardDescription",
          "outwardDescription",
          "scope",
          "sourceEntityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope that the relationship definition exists in."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the relationship definition. Together with the scope this uniquely defines the relationship definition."
          },
          "sourceEntityType": {
            "type": "string",
            "description": "The entity type of the source entity object must be, allowed values are 'Portfolio', 'PortfolioGroup', 'Person' and 'LegalEntity'."
          },
          "targetEntityType": {
            "type": "string",
            "description": "The entity type of the target entity object must be, allowed values are 'Portfolio', 'PortfolioGroup', 'Person' and 'LegalEntity'."
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The display name of the relationship definition."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relationships can change over time. Allowed values are 'Perpetual' and 'TimeVariant', defaults to 'Perpetual' if not specified.",
            "nullable": true
          },
          "relationshipCardinality": {
            "type": "string",
            "description": "Describes the cardinality of the relationship with a specific source entity object and relationships under this definition. Allowed values are 'ManyToMany' and 'OneToMany', defaults to 'ManyToMany' if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationshipDefinition": {
        "required": [
          "displayName",
          "inwardDescription",
          "lifeTime",
          "outwardDescription",
          "relationshipCardinality",
          "relationshipDefinitionId",
          "sourceEntityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityType": {
            "type": "string",
            "description": "The entity type of the source entity object."
          },
          "targetEntityType": {
            "type": "string",
            "description": "The entity type of the target entity object."
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The display name of the relationship."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The description to relate source entity object and target entity object"
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The description to relate target entity object and source entity object"
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relationships can change over time."
          },
          "relationshipCardinality": {
            "type": "string",
            "description": "Describes the cardinality of the relationship between source entity and target entity."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateRelationshipDefinitionRequest": {
        "required": [
          "displayName",
          "inwardDescription",
          "outwardDescription"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The display name of the relation."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          }
        },
        "additionalProperties": false
      },
      "CreateRelationshipRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity."
          },
          "effectiveFrom": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective date of the relationship to be created",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompleteRelationship": {
        "required": [
          "inwardDescription",
          "outwardDescription",
          "relationshipDefinitionId",
          "sourceEntity",
          "targetEntity"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "targetEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "outwardDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship definition's outward description."
          },
          "inwardDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship definition's inward description."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the relationship is valid.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a relationship containing details of source and target entities, and both outward and inward descriptions."
      },
      "DeleteRelationshipRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity of the relationship to be deleted."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity of the relationship to be deleted."
          },
          "effectiveFrom": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective date of the relationship to be deleted",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregationType": {
        "enum": [
          "String",
          "Int",
          "Decimal",
          "DateTime",
          "Boolean",
          "ResultValue",
          "Array",
          "Map",
          "Json"
        ],
        "type": "string",
        "description": "A list of types, that define the expected output types found from an aggregation request in its result."
      },
      "AggregationQuery": {
        "required": [
          "addressKey",
          "description",
          "displayName",
          "scalesWithHoldingQuantity",
          "supportedOperations",
          "type"
        ],
        "type": "object",
        "properties": {
          "addressKey": {
            "type": "string",
            "description": "The address that is the query to be made into the system. e.g. a Valuation/Pv or Instrument/MaturityDate"
          },
          "description": {
            "type": "string",
            "description": "What does the information that is being queried by the address mean. What is the address for."
          },
          "displayName": {
            "type": "string",
            "description": "The suggested name that the user would wish to put on to the returned information for visualisation in preference to the address."
          },
          "type": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "ResultValue",
              "Array",
              "Map",
              "Json"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Array, Map, Json"
          },
          "scalesWithHoldingQuantity": {
            "type": "boolean",
            "description": "Is the data scaled when it is for, e.g. a holding in an instrument. A key example would be the difference between price and pv. The present value\r\nof an instrument would scale with the quantity held. The price would be that for a hypothetical unit of that instrument, typically associated with the\r\ncontract size."
          },
          "supportedOperations": {
            "type": "string",
            "description": "When performing an aggregation operation, what column type operations can be performed on the data. For example, it makes sense to sum decimals but\r\nnot strings. Either can be counted. With more complex types, e.g. ResultValues, operations may be linked to a semantic meaning such as the currency\r\nof the result. In such cases the operations may be supported but context specific. For example, it makes sense to sum PVs in a single currency but not\r\nwhen the currency is different. In such cases, an error would result (it being assumed that no fx rates for currency conversion were implicit in the context)."
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfAggregationQuery": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationQuery"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfString": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Schema": {
        "type": "object",
        "properties": {
          "entity": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertySchema": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfValueType": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueType"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScopeDefinition": {
        "required": [
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The unique identifier for the scope."
          }
        },
        "additionalProperties": false,
        "description": "A list of scopes."
      },
      "ResourceListOfScopeDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeDefinition"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentSearchProperty": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The property key of instrument property to search for. This will be from the 'Instrument' domain and will take the format {domain}/{scope}/{code} e.g. 'Instrument/system/Isin' or 'Instrument/MyScope/AssetClass'."
          },
          "value": {
            "type": "string",
            "description": "The value of the property e.g. 'US0378331005' or 'Equity'."
          }
        },
        "additionalProperties": false
      },
      "InstrumentMatch": {
        "type": "object",
        "properties": {
          "masteredInstruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentDefinition"
            },
            "description": "The collection of instruments found by the search which have been mastered within LUSID.",
            "nullable": true
          },
          "externalInstruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentDefinition"
            },
            "description": "The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of instrument search results"
      },
      "PortfolioGroupSearchResult": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfPortfolioGroupSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroupSearchResult"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioSearchResult": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio."
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio. This will be an empty string for reference portfolios.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "PagedResourceListOfPortfolioSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioSearchResult"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfPortfolioSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioSearchResult"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyDefinitionSearchResult": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A property definition search result"
      },
      "PagedResourceListOfPropertyDefinitionSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinitionSearchResult"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StructuredMarketDataId": {
        "required": [
          "provider"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the structured market data, e.g. 'DataScope', 'LUSID', 'ISDA' etc."
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the structured market data, e.g. a bank or financial institution.",
            "nullable": true
          },
          "lineage": {
            "type": "string",
            "description": "Description of the structured market data's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt or cut label that this item of structured market data is/was updated/inserted with.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "marketElementType": {
            "type": "string",
            "description": "The type of the market element that the market entity represents, e.g. a vol surface or credit curve",
            "nullable": true
          },
          "marketAsset": {
            "type": "string",
            "description": "The name of the market entity that the document represents",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely describes an item of structured market data such as an interest rate curve or volatility surface."
      },
      "StructuredMarketData": {
        "required": [
          "document",
          "documentFormat"
        ],
        "type": "object",
        "properties": {
          "documentFormat": {
            "type": "string",
            "description": "The format of the accompanying document."
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the document format; MAJOR.MINOR.PATCH",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name or description for the document",
            "nullable": true
          },
          "document": {
            "type": "string",
            "description": "The document that will be stored (or retrieved) and which describes a structured market data entity such as a credit or interest rate curve"
          }
        },
        "additionalProperties": false,
        "description": "An item of structured market data that is to be inserted into Lusid. This will typically be a Json or Xml document that\r\ncontains a set of market quotes (tradables) that can be used to construct a composite view of a market property such as the\r\ninterest rates over time; commonly referred to as an interest rate, projection or discount curve. Other examples include\r\nvolatility surfaces and credit spread curves."
      },
      "UpsertStructuredMarketDataRequest": {
        "required": [
          "marketData",
          "marketDataId"
        ],
        "type": "object",
        "properties": {
          "marketDataId": {
            "$ref": "#/components/schemas/StructuredMarketDataId"
          },
          "marketData": {
            "$ref": "#/components/schemas/StructuredMarketData"
          }
        },
        "additionalProperties": false,
        "description": "The details of the structured market data item to upsert into Lusid."
      },
      "UpsertStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting structured data document"
      },
      "AnnulStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The set of values that were removed.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values where removal failed, with a description as to why that is the case, e.g. badly formed request",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response to a request to annul (delete) a set of structured data from Lusid. This might have been for market data or some other structured entity."
      },
      "GetStructuredMarketDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StructuredMarketData"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CutLocalTime": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateCutLabelDefinitionRequest": {
        "required": [
          "code",
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "CutLabelDefinition": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfCutLabelDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutLabelDefinition"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCutLabelDefinitionRequest": {
        "required": [
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "TransactionRoles": {
        "enum": [
          "None",
          "LongLonger",
          "LongShorter",
          "ShortShorter",
          "Shorter",
          "ShortLonger",
          "Longer",
          "AllRoles"
        ],
        "type": "string"
      },
      "TransactionConfigurationTypeAlias": {
        "required": [
          "description",
          "transactionClass",
          "transactionGroup",
          "transactionRoles",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The transaction type"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the transaction"
          },
          "transactionClass": {
            "type": "string",
            "description": "Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut"
          },
          "transactionGroup": {
            "type": "string",
            "description": "Group is a set of codes related to a source, or sync"
          },
          "transactionRoles": {
            "enum": [
              "None",
              "LongLonger",
              "LongShorter",
              "ShortShorter",
              "Shorter",
              "ShortLonger",
              "Longer",
              "AllRoles"
            ],
            "type": "string",
            "description": ". The available values are: None, LongLonger, LongShorter, ShortShorter, Shorter, ShortLonger, Longer, AllRoles"
          }
        },
        "additionalProperties": false
      },
      "MovementType": {
        "enum": [
          "Settlement",
          "Traded",
          "StockMovement",
          "FutureCash",
          "Commitment",
          "Receivable",
          "CashSettlement",
          "CashForward",
          "CashCommitment",
          "CashReceivable",
          "Accrual",
          "CashAccrual",
          "ForwardFx",
          "CashFxForward",
          "UnsettledCashTypes",
          "Carry",
          "CarryAsPnl"
        ],
        "type": "string"
      },
      "TransactionPropertyMappingRequest": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "The Side"
          },
          "mapFrom": {
            "type": "string",
            "description": "The Side",
            "nullable": true
          },
          "setTo": {
            "type": "object",
            "additionalProperties": false,
            "description": "The Side",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementDataRequest": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl"
          },
          "side": {
            "type": "string",
            "description": "The movement side"
          },
          "direction": {
            "type": "integer",
            "description": "The movement direction",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMappingRequest"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationDataRequest": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction codes that map to this specific transaction model"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementDataRequest"
            },
            "description": "Movement data for the transaction code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SideConfigurationDataRequest": {
        "required": [
          "amount",
          "currency",
          "rate",
          "security",
          "side",
          "units"
        ],
        "type": "object",
        "properties": {
          "side": {
            "type": "string",
            "description": "The side's label."
          },
          "security": {
            "type": "string",
            "description": "The security, or instrument."
          },
          "currency": {
            "type": "string",
            "description": "The currency."
          },
          "rate": {
            "type": "string",
            "description": "The rate."
          },
          "units": {
            "type": "string",
            "description": "The units."
          },
          "amount": {
            "type": "string",
            "description": "The amount."
          }
        },
        "additionalProperties": false,
        "description": "Configuration needed to define a side. Sides are referenced by Label. Beyond that, other properties\r\ncan be used to reference either transaction fields, or transaction properties."
      },
      "TransactionSetConfigurationDataRequest": {
        "required": [
          "transactionConfigRequests"
        ],
        "type": "object",
        "properties": {
          "transactionConfigRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
            },
            "description": "Collection of transaction type models"
          },
          "sideConfigRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SideConfigurationDataRequest"
            },
            "description": "Collection of side definition requests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A bundle of requests to configure a set of transaction types."
      },
      "TransactionPropertyMapping": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "The Side"
          },
          "mapFrom": {
            "type": "string",
            "description": "The Side",
            "nullable": true
          },
          "setTo": {
            "type": "object",
            "additionalProperties": false,
            "description": "The Side",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementData": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl"
          },
          "side": {
            "type": "string",
            "description": "The movement side"
          },
          "direction": {
            "type": "integer",
            "description": "The movement direction",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMapping"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationData": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction codes that map to this specific transaction model"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementData"
            },
            "description": "Movement data for the transaction code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SideConfigurationData": {
        "required": [
          "amount",
          "currency",
          "rate",
          "security",
          "side",
          "units"
        ],
        "type": "object",
        "properties": {
          "side": {
            "type": "string",
            "description": "The side's label."
          },
          "security": {
            "type": "string",
            "description": "The security, or instrument."
          },
          "currency": {
            "type": "string",
            "description": "The currency."
          },
          "rate": {
            "type": "string",
            "description": "The rate."
          },
          "units": {
            "type": "string",
            "description": "The units."
          },
          "amount": {
            "type": "string",
            "description": "The amount."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configuration needed to define a side. Sides are referenced by Label. Beyond that, other properties\r\ncan be used to reference either transaction fields, or transaction properties."
      },
      "TransactionSetConfigurationData": {
        "required": [
          "transactionConfigs"
        ],
        "type": "object",
        "properties": {
          "transactionConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationData"
            },
            "description": "Collection of transaction type models"
          },
          "sideDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SideConfigurationData"
            },
            "description": "Collection of side definitions",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of the data required to configure transaction types.."
      },
      "CreateTransactionPortfolioRequest": {
        "required": [
          "baseCurrency",
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the transaction portfolio.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code that the transaction portfolio will be created with. Together with the scope this uniquely identifies the transaction portfolio."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the transaction portfolio will be created. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": "Determines the accounting treatment given to the transaction portfolio's tax lots. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "A set of unique transaction properties to group the transaction portfolio's holdings by. Each property must be from the 'Transaction' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'Transaction/strategies/quantsignal'.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique portfolio properties to add to the transaction portfolio. Each property must be from the 'Portfolio' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'. These properties must be pre-defined.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioTransactionsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentCashFlow": {
        "required": [
          "currency",
          "diagnostics",
          "paymentDate",
          "sourceInstrumentId",
          "sourceTransactionId"
        ],
        "type": "object",
        "properties": {
          "paymentDate": {
            "type": "string",
            "description": "The date at which the given cash flow is due to be paid (SettlementDate is used somewhat interchangeably with PaymentDate.)",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it.",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The payment currency of the cash flow."
          },
          "sourceTransactionId": {
            "type": "string",
            "description": "The identifier for the parent transaction on the instrument that will pay/receive this cash flow."
          },
          "sourceInstrumentId": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in."
          },
          "diagnostics": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Whilst a cash flow is defined by an (amount,ccy) pair and the date it is paid on there is additional information required for diagnostics. This includes a range of information and can be empty in the case of a simple cash quantity or where further information is not available. Typical information includes items such as reset dates, RIC, accrual start/end, number of days and curve data."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details for the cashflow associated with an instrument from a given portfolio."
      },
      "ResourceListOfInstrumentCashFlow": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentCashFlow"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioCashFlow": {
        "required": [
          "balance",
          "balanceReportingCurrency",
          "cashflow",
          "cashflowReportingCurrency",
          "costBasisReportingCurrency",
          "fxRate",
          "groupById",
          "movementName",
          "sequenceNumber",
          "translationGainLoss",
          "type"
        ],
        "type": "object",
        "properties": {
          "groupById": {
            "type": "integer",
            "description": "The groupBy subHoldings and currency.",
            "format": "int32"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number determining the order of the cash flow records.",
            "format": "int32"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Indicates the date when the cash-flow settles.",
            "format": "date-time"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Indicates the record type (Closed, Open, Activity)."
          },
          "movementName": {
            "type": "string",
            "description": "Indicates the specific movement of the transaction that generated this cash flow."
          },
          "cashflow": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balance": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "fxRate": {
            "type": "number",
            "description": "Exchange rate between the currency of this cash flow and the reporting currency.",
            "format": "double"
          },
          "cashflowReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balanceReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "translationGainLoss": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costBasisReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details for the cashflow for a given portfolio."
      },
      "ResourceListOfPortfolioCashFlow": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioCashFlow"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioDetails": {
        "required": [
          "baseCurrency",
          "originPortfolioId",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "originPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioDetails": {
        "type": "object",
        "properties": {
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "ExecutionRequest": {
        "required": [
          "currency",
          "executionId",
          "instrumentIdentifiers",
          "lastPx",
          "lastShares",
          "side",
          "transactionTime"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "type": "string",
            "description": "The unique identifier of the Execution Report (8) message as assigned by sell-side. FIX field 17."
          },
          "side": {
            "type": "string",
            "description": "The side of the order. FIX field 54."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers to use to resolve the execution to a unique instrument."
          },
          "transactionTime": {
            "type": "string",
            "description": "Time of execution/order creation. FIX field 60.",
            "format": "date-time"
          },
          "lastShares": {
            "type": "number",
            "description": "Quantity (e.g. shares) bought/sold on this (last) fill. FIX field 32.",
            "format": "double"
          },
          "lastPx": {
            "type": "number",
            "description": "Price of this (last) fill. FIX field 31.",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the price. FIX field 15."
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioExecutionsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TargetTaxLotRequest": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdjustHoldingRequest": {
        "required": [
          "instrumentIdentifiers",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers to use to resolve the holding adjustment to a unique instrument."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to store with the holding adjustment transaction automatically created by LUSID. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique holding properties and associated values to store with the target holding. Each property must be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLotRequest"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency. This needs to be equal with the one on the TaxLot -> cost if one is specified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This request specifies target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly."
      },
      "AdjustHolding": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnmatchedHoldingMethod": {
        "enum": [
          "PositionToZero",
          "KeepTheSame"
        ],
        "type": "string",
        "description": "When holdings adjustments are specified for a single effective date,\r\nany holdings for the portfolio not included in the adjustments are\r\nadjusted according to this value."
      },
      "HoldingsAdjustmentHeader": {
        "required": [
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A record of holdings adjustments made on the transaction portfolio."
      },
      "ResourceListOfHoldingsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingsAdjustmentHeader"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TargetTaxLot": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to specify holdings target amounts at the tax-lot level"
      },
      "HoldingAdjustment": {
        "required": [
          "instrumentUid",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of instrument identifiers that can be used to resolve the holding adjustment to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding adjustment is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique transaction properties and associated values stored with the holding adjustment transactions automatically created by LUSID. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique holding properties and associated values stored with the target holding. Each property will be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLot"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The target holdings."
      },
      "HoldingsAdjustment": {
        "required": [
          "adjustments",
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "adjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingAdjustment"
            },
            "description": "The holding adjustments."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Full content of a holdings adjustment for a single portfolio and effective date."
      },
      "TransactionRequest": {
        "required": [
          "instrumentIdentifiers",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint. If it hasn't been pre-configured the transaction will still be updated or inserted however you will be unable to generate the resultant holdings for the portfolio that contains this transaction as LUSID does not know how to process it."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers to use to resolve the transaction to a unique instrument."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "dateorcutlabel"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "dateorcutlabel"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to store with the transaction. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertTransactionPropertiesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfTransaction": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StructuredResultDataId": {
        "required": [
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The platform or vendor that provided the structured result data, e.g. 'client'. This is primarily of interest when data could have been sourced from multiple sources"
          },
          "code": {
            "type": "string",
            "description": "The identifier for the entity that this id describes. It could be an index, instrument or other form of structured data",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt or cut label that this item of structured market data is/was updated/inserted with.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "resultType": {
            "type": "string",
            "description": "An identifier that denotes the class of data that the id points to. This is not the same as the format, but a more generic identifier such as 'risk result', 'cashflow', 'index' or similar.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely describes an item of structured result data such as the risk to an interest curve or a set of yields or analytics on an index."
      },
      "DataMapKey": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of the mappings. It is possible that a client will wish to update mappings over time. The version identifies the MAJOR.MINOR.PATCH version\r\nof the mappings that the client assigns it.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A unique name to semantically identify the mapping set.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StructuredResultData": {
        "required": [
          "document",
          "documentFormat"
        ],
        "type": "object",
        "properties": {
          "documentFormat": {
            "type": "string",
            "description": "The format of the accompanying document."
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the document format; MAJOR.MINOR.PATCH",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name or description for the document",
            "nullable": true
          },
          "document": {
            "type": "string",
            "description": "The document that will be stored (or retrieved) and which describes a unit result data entity such as a set of prices or yields"
          },
          "dataMapKey": {
            "$ref": "#/components/schemas/DataMapKey"
          }
        },
        "additionalProperties": false,
        "description": "An item of structured result data that is to be inserted into Lusid. This will typically be a Json or Xml document that\r\ncontains a set of result data appropriate to a specific entity such as an instrument or potentially an index."
      },
      "UpsertStructuredResultDataRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/StructuredResultDataId"
          },
          "data": {
            "$ref": "#/components/schemas/StructuredResultData"
          }
        },
        "additionalProperties": false,
        "description": "The details of the structured unit result data item to upsert into Lusid."
      },
      "GetStructuredResultDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StructuredResultData"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataDefinition": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The internal address (LUSID native) of the unit in the provided data itself and corresponds to the external name of the data item",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the data item. This is the name that will appear",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "A member of the set of possible data types, that all data passed under that key is expected to be of.\r\nCurrently limited to one of [string, integer, decimal].",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "description": "Is the item either a unique key for the dictionary, i.e. does it identify a unique index or conceptual 'row' within the list of dictionaries,\r\nor a partial key or is it simply a data item within that dictionary. Must be one of [Unique,PartOfUnique,Leaf]",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When importing data from an external data source, in order for it to be reliable queryable, LUSID needs to know something about it.\r\nA data definition tells LUSID, what a given external data item is, what type it is and whether it in some way identifies items of data.\r\nConsider presenting LUSID with a list of dictionaries where each dictionary contains the same set of keys (names). Each data item pointed to by\r\na key would be expected to be of the same type (integer, string, decimal etc.). To identify a particular dictionary from the list, a tuple of\r\none or more of the items in the dictionary would make it unique. If only a single item is required then the"
      },
      "DataMapping": {
        "type": "object",
        "properties": {
          "dataDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataDefinition"
            },
            "description": "A map from LUSID item keys to data definitions that define the names, types and degree of uniqueness of data provided to LUSID in structured data stores.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When importing data from an external source there are essentially three levels of interaction with LUSID.\r\n(1) The data is a raw document that LUSID does not understand. You can store and retrieve it but it does not full interact with other documents inside LUSID\r\n(2) The data has a map from fields and paths to 'properties' in LUSID. In essence, LUSID can then treat the data as weakly typed (decimal, string) data that can be returned through queries\r\n    and where various aggregation requests will then work.\r\n(3) The data is fully translatable into LUSID and understood, in some sense, natively. This means that it can be used for context sensitive calculations such as pricing or risk calculations.\r\nThe data map object is designed to allow data to transition from step 1 to 2 and in some cases as an alternative for step 2 to 3."
      },
      "CreateDataMapRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/DataMapKey"
          },
          "data": {
            "$ref": "#/components/schemas/DataMapping"
          }
        },
        "additionalProperties": false,
        "description": "Request to create a new data map"
      },
      "GetDataMapResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DataMapping"
            },
            "description": "TODO",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "TODO",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BasketIdentifier": {
        "required": [
          "index",
          "name",
          "region",
          "seriesId"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "string",
            "description": "Index set, e.g. iTraxx or CDX"
          },
          "name": {
            "type": "string",
            "description": "The index name within the set, e.g. \"MAIN\" or \"Crossover\"."
          },
          "region": {
            "type": "string",
            "description": "Applicable geographic country or region. Typically something like \"Europe\", \"Asia ex-Japan\", \"Japan\" or \"Australia\"."
          },
          "seriesId": {
            "type": "integer",
            "description": "The series identifier.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Descriptive information that describes a particular basket of instruments. Most commonly required with a CDS Index or similarly defined instrument."
      },
      "WeightedInstruments": {
        "required": [
          "instruments"
        ],
        "type": "object",
        "properties": {
          "instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedInstrument"
            },
            "description": "The instruments that are held in the set."
          }
        },
        "additionalProperties": false,
        "description": "Class that models a set of instruments of which each has some quantity and can be identified by a unique label."
      },
      "Basket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "basketName",
              "basketType",
              "instrumentType",
              "weightedInstruments"
            ],
            "type": "object",
            "properties": {
              "basketName": {
                "$ref": "#/components/schemas/BasketIdentifier"
              },
              "basketType": {
                "type": "string",
                "description": "What contents does the basket have. The validation will check that the instrument types contained match those expected.\r\nSupported string (enumeration) values are: [Bonds, Credits, Equities, EquitySwap, Unknown]."
              },
              "weightedInstruments": {
                "$ref": "#/components/schemas/WeightedInstruments"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "Class that models a basket of risky instruments that can default.\r\nUpon default, the weight of a defaulting instrument can (will) change and this then affects the behaviour of the basket."
      },
      "Bond": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "couponRate",
              "domCcy",
              "flowConventions",
              "instrumentType",
              "maturityDate",
              "principal",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "flowConventions": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "principal": {
                "type": "number",
                "description": "The face-value or principal for the bond at outset.\r\n            This might be reduced through its lifetime in the event of amortization or similar.",
                "format": "double"
              },
              "couponRate": {
                "type": "number",
                "description": "simple coupon rate.",
                "format": "double"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "external market codes and identifiers for the bond, e.g. ISIN.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "IL Bond Instrument; Lusid-ibor internal representation of a Bond instrument"
      },
      "CashPerpetual": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "instrumentType",
              "principal",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "principal": {
                "type": "number",
                "description": "The face-value or principal for the cash at outset.",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "Cash Instrument; LUSID representation of a perpetual cash instrument."
      },
      "FlowConventionName": {
        "required": [
          "currency",
          "tenor"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention name."
          },
          "indexName": {
            "type": "string",
            "description": "The index, if present, that is required. e.g. \"IBOR\", \"OIS\" or \"SONIA\".",
            "nullable": true
          },
          "tenor": {
            "type": "string",
            "description": "Tenor for the convention name"
          }
        },
        "additionalProperties": false,
        "description": "Representation of an abstract definition of a flow convention set consisting of currency, tenor and an index name (arbitrary string but likely something like \"IBOR\")"
      },
      "CdsIndex": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "basket",
              "couponRate",
              "identifiers",
              "instrumentType",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "flowConventions": {
                "$ref": "#/components/schemas/CdsFlowConventions"
              },
              "couponRate": {
                "type": "number",
                "description": "The coupon rate paid on each payment date of the premium leg as a fraction of 100 percent, e.g. \"0.05\" meaning 500 basis points or 5%.\r\nFor a standard corporate CDS (North American) this must be either 100bps or 500bps.",
                "format": "double"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "external market codes and identifiers for the cds index, e.g. a RED code, BBG ID or ICE code."
              },
              "basket": {
                "$ref": "#/components/schemas/Basket"
              },
              "conventionName": {
                "$ref": "#/components/schemas/FlowConventionName"
              },
              "notional": {
                "type": "number",
                "description": "The notional quantity that applies to both the premium and protection legs",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "IL CDS Index Instrument; Lusid-ibor internal representation of a Credit Default Swap Index instrument\r\nCalculation information and reference data can be obtained from Markit, e.g. https://www.markit.com/Documentation/Product/ITraxx"
      },
      "ContractForDifference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "contractSize",
              "instrumentType",
              "payCcy",
              "startDate",
              "type",
              "underlyingCcy",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the CFD.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The maturity date for the CFD. If CFDType is Futures, this should be set to be the maturity date of the underlying\r\nfuture. If CFDType is Cash, this should not be set.",
                "format": "date-time"
              },
              "code": {
                "type": "string",
                "description": "The code of the underlying."
              },
              "contractSize": {
                "type": "number",
                "description": "The size of the CFD contract, this should represent the total number of stocks that the CFD represents.",
                "format": "double"
              },
              "payCcy": {
                "type": "string",
                "description": "The currency that this CFD pays out, this can be different to the UnderlyingCcy."
              },
              "referenceRate": {
                "type": "number",
                "description": "The reference rate of the CFD, this can be set to 0 but not negative values.\r\nThis field is optional, if not set it will default to 0.",
                "format": "double"
              },
              "type": {
                "type": "string",
                "description": "The type of CFD.\r\nSupported string (enumeration) values are: [Cash, Futures]."
              },
              "underlyingCcy": {
                "type": "string",
                "description": "The currency of the underlying"
              },
              "underlyingIdentifier": {
                "type": "string",
                "description": "external market codes and identifiers for the CFD, e.g. RIC.\r\nSupported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId]."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "IL CFD Instrument; Lusid-ibor internal representation of a Contract For Difference instrument."
      },
      "CdsSeniority": {
        "enum": [
          "Unknown",
          "SNR",
          "SUB",
          "JRSUBUT2",
          "PREFT1",
          "SECDOM",
          "SNRFOR",
          "SUBLT2"
        ],
        "type": "string"
      },
      "CdsRestructuringType": {
        "enum": [
          "Unknown",
          "CR",
          "MR",
          "MM",
          "XR"
        ],
        "type": "string"
      },
      "CdsProtectionDetailSpecification": {
        "required": [
          "payAccruedInterestOnDefault",
          "protectStartDay",
          "restructuringType",
          "seniority"
        ],
        "type": "object",
        "properties": {
          "seniority": {
            "enum": [
              "Unknown",
              "SNR",
              "SUB",
              "JRSUBUT2",
              "PREFT1",
              "SECDOM",
              "SNRFOR",
              "SUBLT2"
            ],
            "type": "string",
            "description": "The available values are: Unknown, SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2"
          },
          "restructuringType": {
            "enum": [
              "Unknown",
              "CR",
              "MR",
              "MM",
              "XR"
            ],
            "type": "string",
            "description": "The available values are: Unknown, CR, MR, MM, XR"
          },
          "protectStartDay": {
            "type": "boolean",
            "description": "Does the protection leg pay out in the case of default on the start date"
          },
          "payAccruedInterestOnDefault": {
            "type": "boolean",
            "description": "Should accrued interest on the premium leg be paid if a credit event occurs"
          }
        },
        "additionalProperties": false,
        "description": "CDSs generally conform to fairly standard definitions, but can be tweaked in a number of different ways.\r\nThis class gathers a number of common features which may deviate. These will default to the market standard when\r\nno overrides are provided"
      },
      "CreditDefaultSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "couponRate",
              "instrumentType",
              "maturityDate",
              "protectionDetailSpecification",
              "startDate",
              "ticker"
            ],
            "type": "object",
            "properties": {
              "ticker": {
                "type": "string",
                "description": "A ticker to uniquely specify then entity against which the cds is written"
              },
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "flowConventions": {
                "$ref": "#/components/schemas/CdsFlowConventions"
              },
              "couponRate": {
                "type": "number",
                "description": "The coupon rate paid on each payment date of the premium leg as a fraction of 100 percent, e.g. \"0.05\" meaning 500 basis points or 5%.\r\n            For a standard corporate CDS (North American) this must be either 100bps or 500bps.",
                "format": "double"
              },
              "conventionName": {
                "$ref": "#/components/schemas/FlowConventionName"
              },
              "protectionDetailSpecification": {
                "$ref": "#/components/schemas/CdsProtectionDetailSpecification"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "IL CDS Instrument; Lusid-ibor internal representation of a Credit Default Swap instrument"
      },
      "DeliveryType": {
        "enum": [
          "Cash",
          "Physical"
        ],
        "type": "string"
      },
      "OptionType": {
        "enum": [
          "None",
          "Call",
          "Put"
        ],
        "type": "string"
      },
      "MarketIdentifier": {
        "enum": [
          "LusidInstrumentId",
          "Isin",
          "Sedol",
          "Cusip",
          "ClientInternal",
          "Figi",
          "RIC",
          "QuotePermId",
          "REDCode",
          "BBGId",
          "ICECode"
        ],
        "type": "string"
      },
      "EquityOption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "deliveryType",
              "domCcy",
              "instrumentType",
              "optionMaturityDate",
              "optionSettlementDate",
              "optionType",
              "startDate",
              "strike",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "optionMaturityDate": {
                "type": "string",
                "description": "The maturity date of the option.",
                "format": "date-time"
              },
              "optionSettlementDate": {
                "type": "string",
                "description": "The settlement date of the option.",
                "format": "date-time"
              },
              "deliveryType": {
                "enum": [
                  "Cash",
                  "Physical"
                ],
                "type": "string",
                "description": "The available values are: Cash, Physical"
              },
              "optionType": {
                "enum": [
                  "None",
                  "Call",
                  "Put"
                ],
                "type": "string",
                "description": "The available values are: None, Call, Put"
              },
              "strike": {
                "type": "number",
                "description": "The strike of the option.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "underlyingIdentifier": {
                "enum": [
                  "LusidInstrumentId",
                  "Isin",
                  "Sedol",
                  "Cusip",
                  "ClientInternal",
                  "Figi",
                  "RIC",
                  "QuotePermId",
                  "REDCode",
                  "BBGId",
                  "ICECode"
                ],
                "type": "string",
                "description": "The available values are: LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode"
              },
              "code": {
                "type": "string",
                "description": "The reset code of the option."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "Lusid-ibor internal representation of a plain vanilla equity option instrument."
      },
      "InstrumentLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentType"
            ],
            "type": "object",
            "properties": {
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "Representation of a rates leg.\r\n            A set of cashflows that are paid at a set of points in time according to some set of conventions.",
        "discriminator": {
          "propertyName": "instrumentType"
        }
      },
      "EquitySwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "equityFlowConventions",
              "fundingLeg",
              "includeDividends",
              "initialPrice",
              "instrumentType",
              "maturityDate",
              "notionalReset",
              "quantity",
              "startDate",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the EquitySwap",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The maturity date of the EquitySwap.",
                "format": "date-time"
              },
              "code": {
                "type": "string",
                "description": "The code of the underlying."
              },
              "equityFlowConventions": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "fundingLeg": {
                "$ref": "#/components/schemas/InstrumentLeg"
              },
              "includeDividends": {
                "type": "boolean",
                "description": "Dividend inclusion flag, if true dividends are included in the equity leg (total return)."
              },
              "initialPrice": {
                "type": "number",
                "description": "The initial equity price of the Equity Swap.",
                "format": "double"
              },
              "notionalReset": {
                "type": "boolean",
                "description": "Notional reset flag, if true the notional of the funding leg is reset at the start of every\r\ncoupon to match the value of the equity leg (equity price at start of coupon times quantity)"
              },
              "quantity": {
                "type": "number",
                "description": "The quantity or number of shares in the Equity Swap.",
                "format": "double"
              },
              "underlyingIdentifier": {
                "type": "string",
                "description": "external market codes and identifiers for the EquitySwap, e.g. RIC.\r\nSupported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId]."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "Lusid-ibor internal representation of an Equity Swap instrument."
      },
      "InstrumentDefinitionFormat": {
        "required": [
          "sourceSystem",
          "vendor",
          "version"
        ],
        "type": "object",
        "properties": {
          "sourceSystem": {
            "type": "string",
            "description": "which source system does the format originate from"
          },
          "vendor": {
            "type": "string",
            "description": "An instrument will potentially have been created by any number of different organisations. Some will be understood completely (e.g. LUSID's), some won't.\r\n            The provenance of an instrument indicates who \"owns\" the associated format."
          },
          "version": {
            "type": "string",
            "description": "Version of the document. Would be preferable to avoid the need, but LUSID will not control other organisations' trade formats."
          }
        },
        "additionalProperties": false,
        "description": "What is the provenance of an instrument. This defines who creates/owns it, what format it is in (e.g. a proprietary format or a common and known one)\r\n            and what the version of that is."
      },
      "ExoticInstrument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "content",
              "instrumentFormat",
              "instrumentType"
            ],
            "type": "object",
            "properties": {
              "instrumentFormat": {
                "$ref": "#/components/schemas/InstrumentDefinitionFormat"
              },
              "content": {
                "type": "string",
                "description": "The original document received into the system. This format could potentially be anything though is most likely to be either Json or Xml. In the case where no other\r\n            interface is supported it is possible to fall back onto this.\r\n            For example, a trade from an external client system. This may be recognized internally by Lusid or simply passed through to another vendor system."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "Class modeling an instrument which is not fully described, in the sense of being able to obtain a price or other analytic result,\r\n            by a simple SecurityUid. This would include non-exchange traded instruments such as an interest-rate-swap (IRS) and obviously 3rd generation exotics\r\n            like FX-TARNs or FX-Chooser-Redeemers and Credit instruments like CDS or Tranches."
      },
      "LegDefinition": {
        "required": [
          "notionalExchangeType",
          "payReceive",
          "rateOrSpread",
          "stubType"
        ],
        "type": "object",
        "properties": {
          "conventionName": {
            "$ref": "#/components/schemas/FlowConventionName"
          },
          "conventions": {
            "$ref": "#/components/schemas/FlowConventions"
          },
          "indexConvention": {
            "$ref": "#/components/schemas/IndexConvention"
          },
          "indexConventionName": {
            "$ref": "#/components/schemas/FlowConventionName"
          },
          "notionalExchangeType": {
            "type": "string",
            "description": "what type of notional exchange does the leg have\r\nSupported string (enumeration) values are: [None, Initial, Final, Both]."
          },
          "payReceive": {
            "type": "string",
            "description": "Is the leg to be paid or received\r\nSupported string (enumeration) values are: [NotDefined, Pay, Receive]."
          },
          "rateOrSpread": {
            "type": "number",
            "description": "Is there either a fixed rate (non-zero) or spread to be paid over the value of the leg.",
            "format": "double"
          },
          "resetConvention": {
            "type": "string",
            "description": "Control how resets are generated relative to swap payment convention(s).\r\nSupported string (enumeration) values are: [InAdvance, InArrears].",
            "nullable": true
          },
          "stubType": {
            "type": "string",
            "description": "If a stub is required should it be at the front or back of the leg.\r\nSupported string (enumeration) values are: [Front, Back, Both]."
          }
        },
        "additionalProperties": false,
        "description": "Definition of the set of flow and index conventions along with other miscellaneous information required to generate an instrument leg."
      },
      "FixedLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "format": "double"
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "Amortization": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "Spreads": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  }
                },
                "additionalProperties": false,
                "description": "Any overriding data for notionals, spreads or rates that would affect generation of a leg.\r\n            This supports the case where an amortization schedule is given but otherwise generation is allowed as usual.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "representation of a fixed rates leg"
      },
      "FloatingLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "description": "scaling factor to apply to leg quantities.",
                "format": "double"
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "Amortization": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "Spreads": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  }
                },
                "additionalProperties": false,
                "description": "Any overriding data for notionals, spreads or rates that would affect generation of a leg.\r\n            This supports the case where an amortization schedule is given but otherwise generation is allowed as usual.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "representation of a floating rates leg"
      },
      "FundingLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "IL FundingLeg Instrument; Lusid-ibor internal representation of a funding leg with variable notional.\r\nThis instrument is a hybrid between a single leg swap and a bank account, in that the notional is not fixed but\r\ncan be changed over it's life. The use case for this is to represent the funding leg of a basket of instruments\r\n(e.g. equities) where the contents of the basket can change over time.\r\nThe actual notional history is stored in the FundingLegHistory object (implements IHistory) and this can be updated\r\nexternally or in some circumstances automatically by LUSID.\r\nThe main analytic calculated for this instrument is Accrual rather than PV."
      },
      "FuturesContractDetails": {
        "required": [
          "contractCode",
          "contractMonth",
          "contractSize",
          "convention",
          "country",
          "description",
          "domCcy",
          "exchangeCode",
          "exchangeName",
          "tickerStep",
          "unitValue"
        ],
        "type": "object",
        "properties": {
          "domCcy": {
            "type": "string",
            "description": "currency in which the contract is paid."
          },
          "contractCode": {
            "type": "string",
            "description": "The two letter contract code abbreviation. e.g. CL => Crude Oil."
          },
          "contractMonth": {
            "type": "string",
            "description": "which month does the contract trade for."
          },
          "contractSize": {
            "type": "number",
            "description": "Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such.",
            "format": "double"
          },
          "convention": {
            "type": "string",
            "description": "If appropriate, the day count convention method used in pricing (rates futures)"
          },
          "country": {
            "type": "string",
            "description": "Country (code) for the exchange."
          },
          "description": {
            "type": "string",
            "description": "Description of contract"
          },
          "exchangeCode": {
            "type": "string",
            "description": "Exchange code for contract"
          },
          "exchangeName": {
            "type": "string",
            "description": "Exchange name (for when code is not automatically recognized)"
          },
          "tickerStep": {
            "type": "number",
            "description": "Minimal step size change in ticker",
            "format": "double"
          },
          "unitValue": {
            "type": "number",
            "description": "The value in the currency of a 1 unit change in the contract price",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Most, if not all, information about contracts is standardized. See, e.g. https://www.cmegroup.com/ for\r\n            common codes and similar data. This appears to be in common use by well known market information providers, e.g. Bloomberg and Refinitiv."
      },
      "Future": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "contractDetails",
              "identifiers",
              "instrumentType",
              "maturityDate",
              "startDate",
              "underlying"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "external market codes and identifiers for the bond, e.g. ISIN."
              },
              "contractDetails": {
                "$ref": "#/components/schemas/FuturesContractDetails"
              },
              "contracts": {
                "type": "number",
                "description": "The number of contracts held",
                "format": "double"
              },
              "refSpotPrice": {
                "type": "number",
                "description": "The reference spot price for the future at which the contract was entered into.",
                "format": "double"
              },
              "underlying": {
                "$ref": "#/components/schemas/LusidInstrument"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "IL Fx-Forward Instrument; Lusid-ibor internal representation of a Fx Forward instrument\r\n            \r\n             A future contract, entered into on the start date at an initial reference spot price has zero initial value. It is a committment to buy a certain number of\r\n             contracts of a certain size at a date in the future."
      },
      "FxForward": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domAmount",
              "domCcy",
              "fgnAmount",
              "fgnCcy",
              "instrumentType",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "domAmount": {
                "type": "number",
                "description": "The amount that is to be paid in the domestic currency on the maturity date.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "fgnAmount": {
                "type": "number",
                "description": "The amount that is to be paid in the foreign currency on the maturity date",
                "format": "double"
              },
              "fgnCcy": {
                "type": "string",
                "description": "The foreign (other) currency of the instrument. In the NDF case, only payments are made in the domestic currency.\r\n            For the outright forward, currencies are exchanged. By domestic is then that of the portfolio."
              },
              "refSpotRate": {
                "type": "number",
                "description": "The reference Fx Spot rate for currency pair Foreign-Domestic that was seen on the trade start date (time).",
                "format": "double"
              },
              "isNdf": {
                "type": "boolean",
                "description": "Is the contract an Fx-Forward of \"Non-Deliverable\" type, meaning a single payment in the domestic currency based on the change in fx-rate vs\r\n            a reference rate is used."
              },
              "fixingDate": {
                "type": "string",
                "description": "The fixing date .",
                "format": "date-time"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "IL Fx-Forward Instrument; Lusid-ibor internal representation of a Fx Forward instrument"
      },
      "FxOption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "fgnCcy",
              "instrumentType",
              "isCallNotPut",
              "isDeliveryNotCash",
              "optionMaturityDate",
              "optionSettlementDate",
              "startDate",
              "strike"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "optionMaturityDate": {
                "type": "string",
                "description": "The maturity date of the option.",
                "format": "date-time"
              },
              "optionSettlementDate": {
                "type": "string",
                "description": "The settlement date of the option.",
                "format": "date-time"
              },
              "isDeliveryNotCash": {
                "type": "boolean",
                "description": "True of the option is settled in cash false if delivery."
              },
              "isCallNotPut": {
                "type": "boolean",
                "description": "True if the option is a call, false if the option is a put."
              },
              "strike": {
                "type": "number",
                "description": "The strike of the option.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "fgnCcy": {
                "type": "string",
                "description": "The foreign currency of the FX."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "Lusid-ibor internal representation of a plain vanilla FX Option instrument."
      },
      "InterestRateSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentType",
              "legs",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "legs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentLeg"
                },
                "description": "The set of instrument legs that define the swap instrument."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "IL Swap Instrument; Lusid-ibor internal representation of a swap instrument\r\n            \r\n             A swap is the exchange of two sets of cashflows, occurring at one or more dates in one or more currencies.\r\n             These may include a notional exchange at the start and, or, maturity of the trade. Depending upon the choice of\r\n             payment currency, payment frequency and so on they can be used to match sets of future obligations"
      },
      "PayReceive": {
        "enum": [
          "NotDefined",
          "Pay",
          "Receive"
        ],
        "type": "string"
      },
      "InterestRateSwaption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "deliveryMethod",
              "instrumentType",
              "payOrReceiveFixed",
              "startDate",
              "swap"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "payOrReceiveFixed": {
                "enum": [
                  "NotDefined",
                  "Pay",
                  "Receive"
                ],
                "type": "string",
                "description": "The available values are: NotDefined, Pay, Receive"
              },
              "deliveryMethod": {
                "enum": [
                  "Cash",
                  "Physical"
                ],
                "type": "string",
                "description": "The available values are: Cash, Physical"
              },
              "swap": {
                "$ref": "#/components/schemas/InterestRateSwap"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "A swaption, an option to enter into an interest rate swap."
      },
      "TermDeposit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "contractSize",
              "flowConvention",
              "instrumentType",
              "maturityDate",
              "rate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "contractSize": {
                "type": "number",
                "description": "With an OTC we have the problem of multiple ways of booking a quantity.\r\n            e.g.\r\n            If buying a swap do you have a holding of size 1 of 100,000,000 notional swap or a holding of 100,000,000 size of 1 notional swap, or any combination that multiplies to 10^8.\r\n            When you get for a price for a 'unit swap' what do you mean? The definition must be consistent across all quotes. This includes bonds which have a face value and\r\n            fx-forwards which often trade in standard contract sizes. When we look up a price, and there are no units, we are assuming it is a price for a contract size of 1.\r\n            The logical effect of this is that\r\n            instrument clean price = contract size * quoted unit price\r\n            holding clean price    = holding quantity * instrument clean price = holding quantity * contract size * quoted unit price\r\n            In calculating accrued interest the same should hold.\r\n            NB: The real problem is that people store \"prices\" without complete units. Everything should really be \"x ccy for n units\". Where the n is implicit the above has to hold.",
                "format": "double"
              },
              "flowConvention": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "rate": {
                "type": "number",
                "description": "The fixed rate for the term deposit. Specified as a decimal, e.g 0.03 is meant to be 3% interest",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashflowLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
              }
            }
          }
        ],
        "description": "Lusid internal representation of a term deposit"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://lusid.okta.com/oauth2/default/v1/authorize",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {}
  ],
  "tags": [
    {
      "name": "Aggregation",
      "description": "Methods for accessing aggregated data"
    },
    {
      "name": "Allocations",
      "description": "Methods for interacting with Allocations. This is experimental functionality, with limited documentation presently. An Allocation represents the redistribution of market Executions against an originating Order. Allocations are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Application Metadata",
      "description": "Methods for querying application metadata"
    },
    {
      "name": "Calendars",
      "description": ""
    },
    {
      "name": "Configuration Recipe",
      "description": "Methods for the storage and retrieval of Configuration Recipe documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-lusid-recipe-and-how-is-it-used."
    },
    {
      "name": "Conventions",
      "description": "Methods for the storage and retrieval of flow conventions."
    },
    {
      "name": "Corporate Action Sources",
      "description": "Methods for storage and retrieval of Corporate Action Sources"
    },
    {
      "name": "Counterparty",
      "description": "Methods for the storage and retrieval of counter-party related information; in particular counter-party, CSA and Netting set data."
    },
    {
      "name": "Cut Label Definitions",
      "description": "Methods for interacting with Cut Label Definitions"
    },
    {
      "name": "Data Types",
      "description": "Methods for administering data types"
    },
    {
      "name": "Derived Transaction Portfolios",
      "description": "Methods for interacting with derived transaction portfolios"
    },
    {
      "name": "Entities",
      "description": "Methods for querying data about entities"
    },
    {
      "name": "Instruments",
      "description": "Methods for interacting with instruments. Read more about instruments in the LUSID Knowledge Base here https://support.lusid.com/what-is-an-instrument."
    },
    {
      "name": "Legal Entities",
      "description": "Endpoints for interacting with Legal Entities."
    },
    {
      "name": "Login",
      "description": "Methods to handle login"
    },
    {
      "name": "Orders",
      "description": "Methods for interacting with Orders. This is experimental functionality, with limited documentation presently. An Order represents an investor's instruction to a broker or similar agent to but or sell a single security. Orders are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Persons",
      "description": "Endpoints for interacting with Persons entities."
    },
    {
      "name": "Portfolio Groups",
      "description": "Methods for interacting with Portfolios Groups. Read more about Portfolio Groups in the LUSID Knowledge Base here https://support.lusid.com/how-do-you-group-and-aggregate-portfolios."
    },
    {
      "name": "Portfolios",
      "description": "Methods for interacting with Portfolios. Read more about Portfolios in LUSID here https://support.lusid.com/what-is-portfolio."
    },
    {
      "name": "Property Definitions",
      "description": "Methods for interacting with Properties. Read more about Properties in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-property."
    },
    {
      "name": "Quotes",
      "description": "Methods for the storage and retrieval of Quotes. Read more about Quotes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-quote."
    },
    {
      "name": "Reconciliations",
      "description": "Endpoints for performing reconciliations"
    },
    {
      "name": "Reference Portfolio",
      "description": "Methods for interacting with Reference Portfolios"
    },
    {
      "name": "Relation Definitions",
      "description": "Methods for interacting with Relations Definitions."
    },
    {
      "name": "Relations",
      "description": "Methods for interacting with Relations."
    },
    {
      "name": "Relationship Definitions",
      "description": "Methods for interacting with Relationship Definitions. Read more about Relationship in the LUSID Knowledge Base at https://support.lusid.com/relationships."
    },
    {
      "name": "Relationships",
      "description": "Methods for interacting with Relationships. Read more about Relationships in the LUSID Knowledge Base here https://support.lusid.com/relationships."
    },
    {
      "name": "Schemas",
      "description": "Methods for retrieval of Schemas"
    },
    {
      "name": "Scopes",
      "description": "Methods for interacting with Scopes. Read more about Scopes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-scope-in-lusid-and-how-is-it-used."
    },
    {
      "name": "Search",
      "description": "Methods providing Search capability."
    },
    {
      "name": "Structured Market Data",
      "description": "Methods for the storage and retrieval of structured market data documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/knowledgebase/article/KA-01894."
    },
    {
      "name": "Structured Result Data",
      "description": "Methods for the storage and retrieval of structured result data documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/knowledgebase/article/KA-01893."
    },
    {
      "name": "System Configuration",
      "description": "Methods for updating system configuration with Portfolios"
    },
    {
      "name": "Transaction Portfolios",
      "description": "Methods for interacting with Transaction Portfolios. Read more about Transaction Portfolios in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-transaction-portfolio."
    }
  ],
  "x-tagGroups": {
    "name": "API",
    "tags": [
      "Aggregation",
      "Allocations",
      "Application Metadata",
      "Calendars",
      "Configuration Recipe",
      "Conventions",
      "Corporate Action Sources",
      "Counterparty",
      "Cut Label Definitions",
      "Data Types",
      "Derived Transaction Portfolios",
      "Entities",
      "Instruments",
      "Legal Entities",
      "Login",
      "Orders",
      "Persons",
      "Portfolio Groups",
      "Portfolios",
      "Property Definitions",
      "Quotes",
      "Reconciliations",
      "Reference Portfolio",
      "Relation Definitions",
      "Relations",
      "Relationship Definitions",
      "Relationships",
      "Schemas",
      "Scopes",
      "Search",
      "Structured Market Data",
      "Structured Result Data",
      "System Configuration",
      "Transaction Portfolios"
    ]
  }
}
