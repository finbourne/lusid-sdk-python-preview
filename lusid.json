{
  "openapi": "3.0.1",
  "info": {
    "title": "LUSID API",
    "description": "FINBOURNE Technology",
    "termsOfService": "https://www.finbourne.com/legal/terms-conditions",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "version": "0.11.3491",
    "x-logo": {
      "url": "https://content.finbourne.com/LUSID-header.png",
      "backgroundColor": "#415464"
    }
  },
  "servers": [
    {
      "url": "https://fbn-prd.lusid.com/api"
    }
  ],
  "paths": {
    "/api/aggregation/$valuation": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[BETA] Perform valuation for a list of portfolios and/or portfolio groups",
        "description": "Perform valuation on specified list of portfolio and/or portfolio groups for a set of dates.",
        "operationId": "GetValuation",
        "requestBody": {
          "description": "The request specifying the set of portfolios and dates on which to calculate a set of valuation metrics",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/aggregation/$valuationinlined": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[BETA] Perform valuation for an inlined portfolio",
        "description": "Perform valuation on the portfolio that is defined by the weighted set of instruments passed to the request.",
        "operationId": "GetValuationOfWeightedInstruments",
        "requestBody": {
          "description": "The request specifying the set of portfolios and dates on which to calculate a set of valuation metrics",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/aggregation/{scope}/{code}/$generateconfigurationrecipe": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[EXPERIMENTAL] Generates a recipe sufficient to perform valuations for the given portfolio.",
        "description": "Given a set of scopes, a portfolio Id and a basic recipe, this endpoint generates a configuration recipe with relevant rules that can value the instruments in the portfolio.",
        "operationId": "GenerateConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The request specifying the parameters to generating the recipe",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeRequest"
              },
              "example": {
                "recipeCreationMarketDataScopes": [
                  "MyScope"
                ],
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeRequest"
              },
              "example": {
                "recipeCreationMarketDataScopes": [
                  "MyScope"
                ],
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeRequest"
              },
              "example": {
                "recipeCreationMarketDataScopes": [
                  "MyScope"
                ],
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecipeRequest"
              },
              "example": {
                "recipeCreationMarketDataScopes": [
                  "MyScope"
                ],
                "recipeId": {
                  "scope": "MyScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRecipe"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRecipe"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRecipe"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/allocations": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] List Allocations",
        "description": "Fetch the last pre-AsAt date version of each allocation in scope (does not fetch the entire history).",
        "operationId": "ListAllocations",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing allocations from a previous call to list allocations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing allocations from a previous call to list allocations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Allocation the results by these fields. Use use the '-' sign to denote descending allocation e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Allocation the results by these fields. Use use the '-' sign to denote descending allocation e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Allocations\" domain to decorate onto each allocation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Allocations\" domain to decorate onto each allocation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Allocations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] Upsert Allocations",
        "description": "Upsert; update existing allocations with given ids, or create new allocations otherwise.",
        "operationId": "UpsertAllocations",
        "requestBody": {
          "description": "The collection of allocation requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "A placement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "A placement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "A placement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "A placement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A collection of allocations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "A placement"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "A placement"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "A placement"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/allocations/{scope}/{code}": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] Get Allocation",
        "description": "Fetch an Allocation matching the provided identifier",
        "operationId": "GetAllocation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the allocation belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the allocation belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The allocation's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Allocations\" domain to decorate onto the allocation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Allocations\" domain to decorate onto the allocation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The allocation matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "A placement"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "A placement"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "A placement"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] Delete allocation",
        "description": "Delete an allocation. Deletion will be valid from the allocation's creation datetime.\r\nThis means that the allocation will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteAllocation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The allocation scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The allocation's code. This, together with the scope uniquely identifies the allocation to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation's code. This, together with the scope uniquely identifies the allocation to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an allocation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/blocks": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "[EXPERIMENTAL] List Blocks",
        "description": "Fetch the last pre-AsAt date version of each block in scope (does not fetch the entire history).",
        "operationId": "ListBlocks",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the block. Defaults to return the latest version of the block if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the block. Defaults to return the latest version of the block if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing blocks from a previous call to list blocks.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing blocks from a previous call to list blocks.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Block\" domain to decorate onto each block.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Block/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Block\" domain to decorate onto each block.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Block/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Blocks in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfBlock"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfBlock"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfBlock"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Blocks"
        ],
        "summary": "[EXPERIMENTAL] Upsert Block",
        "description": "Upsert; update existing blocks with given ids, or create new blocks otherwise.",
        "operationId": "UpsertBlocks",
        "requestBody": {
          "description": "The collection of block requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      }
                    ],
                    "properties": {
                      "block/MyScope/SomeBlockProperty": {
                        "key": "Block/MyScope/SomeBlockProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 122345.33,
                      "currency": "USD"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      }
                    ],
                    "properties": {
                      "block/MyScope/SomeBlockProperty": {
                        "key": "Block/MyScope/SomeBlockProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 122345.33,
                      "currency": "USD"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      }
                    ],
                    "properties": {
                      "block/MyScope/SomeBlockProperty": {
                        "key": "Block/MyScope/SomeBlockProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 122345.33,
                      "currency": "USD"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "BLOC00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      }
                    ],
                    "properties": {
                      "block/MyScope/SomeBlockProperty": {
                        "key": "Block/MyScope/SomeBlockProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 122345.33,
                      "currency": "USD"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of blocks.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfBlock"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "side": "Buy",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 12376.33,
                        "currency": "USD"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfBlock"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "side": "Buy",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 12376.33,
                        "currency": "USD"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfBlock"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "side": "Buy",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 12376.33,
                        "currency": "USD"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/blocks/{scope}/{code}": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "[EXPERIMENTAL] Get Block",
        "description": "Fetch a Block that matches the specified identifier",
        "operationId": "GetBlock",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the block belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the block belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The block's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The block's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the block. Defaults to return the latest version of the block if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the block. Defaults to return the latest version of the block if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Block\" domain to decorate onto the block.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Block/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Block\" domain to decorate onto the block.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Block/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The block matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "side": "Buy",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 12376.33,
                    "currency": "USD"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "side": "Buy",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 12376.33,
                    "currency": "USD"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "side": "Buy",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 12376.33,
                    "currency": "USD"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Blocks"
        ],
        "summary": "[EXPERIMENTAL] Delete block",
        "description": "Delete an block. Deletion will be valid from the block's creation datetime.\r\nThis means that the block will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteBlock",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The block scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The block scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The block's code. This, together with the scope uniquely identifies the block to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The block's code. This, together with the scope uniquely identifies the block to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an block.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/calendars/businessday/{scope}/add": {
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Adds the requested number of Business Days to the provided date.",
        "description": "A Business day is defined as a point in time that:\r\n    * Does not represent a day in the calendar's weekend\r\n    * Does not represent a day in the calendar's list of holidays (e.g. Christmas Day in the UK)\r\n             \r\nAll dates specified must be UTC and the upper bound of a calendar is not inclusive\r\n             \r\ne.g. From: 2020-12-24-00-00-00:\r\n     Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.\r\n     Adding -2 business days returns 2020-12-22 under the same assumptions.\r\n            \r\nIf the provided number of days to add is zero, returns a failure.",
        "operationId": "AddBusinessDaysToDate",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope within which to search for the calendars",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope within which to search for the calendars"
            }
          }
        ],
        "requestBody": {
          "description": "Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddBusinessDaysToDateRequest"
              },
              "example": {
                "businessDayOffset": 5,
                "holidayCodes": [
                  "GBP"
                ],
                "startDate": "2020-02-10T00:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBusinessDaysToDateRequest"
              },
              "example": {
                "businessDayOffset": 5,
                "holidayCodes": [
                  "GBP"
                ],
                "startDate": "2020-02-10T00:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBusinessDaysToDateRequest"
              },
              "example": {
                "businessDayOffset": 5,
                "holidayCodes": [
                  "GBP"
                ],
                "startDate": "2020-02-10T00:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddBusinessDaysToDateRequest"
              },
              "example": {
                "businessDayOffset": 5,
                "holidayCodes": [
                  "GBP"
                ],
                "startDate": "2020-02-10T00:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The business day that is a number of business days after the given date as determined by the given calendar codes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddBusinessDaysToDateResponse"
                },
                "example": {
                  "value": "2020-02-18T00:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBusinessDaysToDateResponse"
                },
                "example": {
                  "value": "2020-02-18T00:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBusinessDaysToDateResponse"
                },
                "example": {
                  "value": "2020-02-18T00:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/calendars/businessday/{scope}/{code}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] Check whether a DateTime is a \"Business DateTime\"",
        "description": "A Business DateTime is defined as a point in time that:\r\n    * Does not represent a day that overlaps with the calendars WeekendMask\r\n    * If the calendar is a \"Holiday Calendar\" Does not overlap with any dates in the calendar\r\n    * If the calendar is a \"TradingHours Calendar\" Does overlap with a date in the calendar\r\n            \r\nAll dates specified must be UTC and the upper bound of a calendar is not inclusive \r\ne.g. From: 2020-12-25-00-00-00 \r\n     To: 2020-12-26-00-00-00\r\nIsBusinessDay(2020-12-26-00-00-00) == false",
        "operationId": "IsBusinessDateTime",
        "parameters": [
          {
            "name": "dateTime",
            "in": "query",
            "description": "DateTime to check - This DateTime must be UTC",
            "required": true,
            "schema": {
              "type": "string",
              "description": "DateTime to check - This DateTime must be UTC",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "AsAt for the request",
            "schema": {
              "type": "string",
              "description": "AsAt for the request",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Whether or not the requested DateTime is a BusinessDay or not",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsBusinessDayResponse"
                },
                "example": {
                  "requestedDateTime": "2020-02-12T12:00:00.0000000+00:00",
                  "isBusinessDay": true
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/calendars/generic": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] List Calenders",
        "description": "List calendars at a point in AsAt time.",
        "operationId": "ListCalendars",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendars",
            "schema": {
              "type": "string",
              "description": "The AsAt datetime at which to retrieve the calendars",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Calendars",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] Create a calendar in its generic form",
        "description": "Create a calendar in a generic form which can be used to store date events.",
        "operationId": "CreateCalendar",
        "requestBody": {
          "description": "A request to create the calendar",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarRequest"
              },
              "example": {
                "calendarId": {
                  "scope": "TestScope",
                  "code": "TestCode"
                },
                "calendarType": "Holiday",
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/calendars/generic/{scope}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] List all calenders in a specified scope",
        "description": "List calendars at a point in AsAt time.",
        "operationId": "ListCalendarsInScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendars",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendars"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendars",
            "schema": {
              "type": "string",
              "description": "The AsAt datetime at which to retrieve the calendars",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing calendars from a previous call to list calendars.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendars in the requested scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCalendar"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    },
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode2",
                      "id": {
                        "scope": "TestScope",
                        "code": "TestCode2"
                      },
                      "type": "Holiday",
                      "weekendMask": {
                        "days": [
                          "Saturday",
                          "Sunday"
                        ],
                        "timeZone": "UTC"
                      },
                      "sourceProvider": "Finbourne-Calendar-Service",
                      "properties": [
                        {
                          "key": "Calendar/HolidayType/Statutory",
                          "value": {
                            "labelValue": "CBTR"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "https://myco.lusid.com/api/api/calendar/testscope",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/calendars/generic/{scope}/{code}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] Get a calendar in its generic form",
        "description": "Retrieve a generic calendar by a specific ID at a point in AsAt time",
        "operationId": "GetCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar identifier",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar identifier"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar identifier",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar identifier"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt datetime at which to retrieve the calendar",
            "schema": {
              "type": "string",
              "description": "The AsAt datetime at which to retrieve the calendar",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] Update a calendar",
        "description": "Update the calendars WeekendMask, SourceProvider or Properties",
        "operationId": "UpdateCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the request",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the request"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the request",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the request"
            }
          }
        ],
        "requestBody": {
          "description": "The new state of the calendar",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarRequest"
              },
              "example": {
                "weekendMask": {
                  "days": [
                    "Saturday",
                    "Sunday"
                  ],
                  "timeZone": "UTC"
                },
                "sourceProvider": "Finbourne-Calendar-Service",
                "properties": [
                  {
                    "key": "Calendar/HolidayType/Statutory",
                    "value": {
                      "labelValue": "CBTR"
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] Delete a calendar",
        "description": "Delete a calendar and all of its respective dates",
        "operationId": "DeleteCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted calendar",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/testscope/testcode",
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "type": "Holiday",
                  "weekendMask": {
                    "days": [
                      "Saturday",
                      "Sunday"
                    ],
                    "timeZone": "UTC"
                  },
                  "sourceProvider": "Finbourne-Calendar-Service",
                  "properties": [
                    {
                      "key": "Calendar/HolidayType/Statutory",
                      "value": {
                        "labelValue": "CBTR"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/calendars/generic/{scope}/{code}/dates": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] Get dates for a specific calendar",
        "description": "Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.\r\nProviding an id filter can further refine the results.",
        "operationId": "GetDates",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Where the effective window of dates should begin from",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Where the effective window of dates should begin from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Where the effective window of dates should end",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Where the effective window of dates should end",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "AsAt the dates should be retrieved at",
            "schema": {
              "type": "string",
              "description": "AsAt the dates should be retrieved at",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "idFilter",
            "in": "query",
            "description": "An additional filter that will filter dates based on their identifer",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An additional filter that will filter dates based on their identifer",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCalendarDate"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://myco.lusid.com/api/api/calendar/dates",
                      "dateIdentifier": "TestDate",
                      "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                      "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                      "localDate": "2020-02-02",
                      "timezone": "CET",
                      "description": "Chinese New year",
                      "type": "Holiday",
                      "sourceData": {}
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "put": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] Add a date to a calendar",
        "description": "Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.\r\nA local date will be calculated by the system and applied to the calendar before processing.",
        "operationId": "AddDateToCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          }
        ],
        "requestBody": {
          "description": "Add date to calendar request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDateRequest"
              },
              "example": {
                "dateId": "TestDate",
                "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                "timeZone": "CET",
                "description": "Chinese New year",
                "type": "Holiday",
                "sourceData": {}
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/calendars/generic/{scope}/{code}/dates/{dateId}": {
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "[BETA] Remove a date from a calendar",
        "description": "Remove a date from a calendar.",
        "operationId": "DeleteDateFromCalendar",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendar"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the calendar",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the calendar"
            }
          },
          {
            "name": "dateId",
            "in": "path",
            "description": "Identifier of the date to be removed",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Identifier of the date to be removed"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted date",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDate"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/calendar/dates",
                  "dateIdentifier": "TestDate",
                  "fromUtc": "2020-02-12T12:00:00.0000000+00:00",
                  "toUtc": "2020-02-13T12:00:00.0000000+00:00",
                  "localDate": "2020-02-02",
                  "timezone": "CET",
                  "description": "Chinese New year",
                  "type": "Holiday",
                  "sourceData": {}
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/calendars/schedule/{scope}": {
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "[EXPERIMENTAL] Generate an ordered schedule of dates.",
        "description": "Returns an ordered array of dates. The dates will only fall on business\r\ndays as defined by the scope and calendar codes in the valuation schedule.\r\n            \r\nValuations are made at a frequency defined by the valuation schedule's tenor, e.g. every day (\"1D\"),\r\nevery other week (\"2W\") etc. These dates will be adjusted onto business days as defined by the schedule's\r\nrollConvention.",
        "operationId": "GenerateSchedule",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the calendars to use",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the calendars to use"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional AsAt for searching the calendar store. Defaults to Latest.",
            "schema": {
              "type": "string",
              "description": "Optional AsAt for searching the calendar store. Defaults to Latest.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The ValuationSchedule to generate schedule dates from",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationSchedule"
              },
              "example": {
                "effectiveFrom": "2020-01-01",
                "effectiveAt": "2021-01-01",
                "tenor": "1M",
                "rollConvention": "F",
                "holidayCalendars": [
                  "GBP",
                  "USD"
                ],
                "valuationDateTimes": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationSchedule"
              },
              "example": {
                "effectiveFrom": "2020-01-01",
                "effectiveAt": "2021-01-01",
                "tenor": "1M",
                "rollConvention": "F",
                "holidayCalendars": [
                  "GBP",
                  "USD"
                ],
                "valuationDateTimes": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationSchedule"
              },
              "example": {
                "effectiveFrom": "2020-01-01",
                "effectiveAt": "2021-01-01",
                "tenor": "1M",
                "rollConvention": "F",
                "holidayCalendars": [
                  "GBP",
                  "USD"
                ],
                "valuationDateTimes": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationSchedule"
              },
              "example": {
                "effectiveFrom": "2020-01-01",
                "effectiveAt": "2021-01-01",
                "tenor": "1M",
                "rollConvention": "F",
                "holidayCalendars": [
                  "GBP",
                  "USD"
                ],
                "valuationDateTimes": []
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of dates in chronological order.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/complexmarketdata/{scope}": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EXPERIMENTAL] Upsert a set of complex market data items. This creates or updates the data in Lusid.",
        "description": "Update or insert one or more complex market data items in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each complex market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each complex market data in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted complex market data, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the item could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "UpsertComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the complex market data.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the complex market data."
            }
          }
        ],
        "requestBody": {
          "description": "The set of complex market data items to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                },
                "description": "The set of complex market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "document": "{ \"some\":\"valid json\"}",
                    "format": "Json",
                    "name": "free text identifier of document 1",
                    "marketDataType": "OpaqueMarketData"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                },
                "description": "The set of complex market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "document": "{ \"some\":\"valid json\"}",
                    "format": "Json",
                    "name": "free text identifier of document 1",
                    "marketDataType": "OpaqueMarketData"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                },
                "description": "The set of complex market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "document": "{ \"some\":\"valid json\"}",
                    "format": "Json",
                    "name": "free text identifier of document 1",
                    "marketDataType": "OpaqueMarketData"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                },
                "description": "The set of complex market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "document": "{ \"some\":\"valid json\"}",
                    "format": "Json",
                    "name": "free text identifier of document 1",
                    "marketDataType": "OpaqueMarketData"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted StructuredMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/complexmarketdata/{scope}/$delete": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EXPERIMENTAL] Delete one or more items of complex market data, assuming they are present.",
        "description": "Delete one or more specified complex market data items from a single scope. Each item is identified by a unique id which includes\r\ninformation about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).\r\n            \r\nIn the request each complex market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted  complex market data items, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the it could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the complex market data to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the complex market data to delete."
            }
          }
        ],
        "requestBody": {
          "description": "The complex market data Ids to delete, each keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The complex market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The complex market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The complex market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The complex market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully deleted ComplexMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/complexmarketdata/{scope}/$get": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EXPERIMENTAL] Get complex market data",
        "description": "Get one or more items of complex market data from a single scope.\r\n            \r\nEach item can be identified by its time invariant complex market data identifier.\r\n            \r\nFor each id LUSID will return the most recent matched item with respect to the provided (or default) effective datetime.\r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for data from the specified effective datetime.\r\nLUSID will return the most recent item within this window.\r\n            \r\nIn the request each complex market data id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each item in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved complex market data. Two, those that had a\r\nvalid identifier but could not be found. Three, those that failed because LUSID could not construct a valid identifier from the request.\r\n            \r\nFor the ids that failed to resolve or could not be found a reason will be provided explaining why that is the case.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.",
        "operationId": "GetComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the complex market data to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the complex market data to retrieve."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the complex market data. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime at which to retrieve the complex market data. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the complex market data. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the complex market data. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a complex market data item must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a complex market data item must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved complex market data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/conventions/credit/conventions": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] List the set of CDS Flow Conventions",
        "description": "List the set of CDS Flow Conventions at the specified date/time",
        "operationId": "ListCdsFlowConventions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested CDS Flow conventions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCdsFlowConventionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCdsFlowConventionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCdsFlowConventionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "post": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Upsert a set of CDS Flow Conventions. This creates or updates the data in Lusid.",
        "description": "Update or insert CDS Flow Conventions in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted CDS Flow Conventions or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertCdsFlowConventions",
        "requestBody": {
          "description": "The CDS Flow Conventions to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCdsFlowConventionsRequest"
              },
              "example": {
                "cdsFlowConventions": {
                  "rollFrequency": "6M",
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleCdsFlowConventionsName"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCdsFlowConventionsRequest"
              },
              "example": {
                "cdsFlowConventions": {
                  "rollFrequency": "6M",
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleCdsFlowConventionsName"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCdsFlowConventionsRequest"
              },
              "example": {
                "cdsFlowConventions": {
                  "rollFrequency": "6M",
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleCdsFlowConventionsName"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCdsFlowConventionsRequest"
              },
              "example": {
                "cdsFlowConventions": {
                  "rollFrequency": "6M",
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleCdsFlowConventionsName"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/credit/conventions/{scope}/{code}": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Get CDS Flow Conventions",
        "description": "Get a CDS Flow Conventions from a single scope.\r\nThe response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetCdsFlowConventions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the CDS Flow Conventions to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the CDS Flow Conventions to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the CDS Flow Conventions to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the CDS Flow Conventions to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the CDS Flow Conventions. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the CDS Flow Conventions. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved CDS Flow Conventions or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCdsFlowConventionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCdsFlowConventionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCdsFlowConventionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Delete the CDS Flow Conventions of given scope and code, assuming that it is present.",
        "description": "Delete the specified CDS Flow Conventions from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteCdsFlowConventions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the CDS Flow Conventions to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the CDS Flow Conventions to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The CDS Flow Conventions to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The CDS Flow Conventions to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/rates/flowconventions": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] List the set of Flow Conventions",
        "description": "List the set of Flow Conventions at the specified date/time",
        "operationId": "ListFlowConventions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Flow conventions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetFlowConventionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetFlowConventionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetFlowConventionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "post": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Upsert Flow Conventions. This creates or updates the data in Lusid.",
        "description": "Update or insert Flow Conventions in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Flow Conventions or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertFlowConventions",
        "requestBody": {
          "description": "The Flow Conventions to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFlowConventionsRequest"
              },
              "example": {
                "flowConventions": {
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleFlowConventionsName"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFlowConventionsRequest"
              },
              "example": {
                "flowConventions": {
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleFlowConventionsName"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFlowConventionsRequest"
              },
              "example": {
                "flowConventions": {
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleFlowConventionsName"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFlowConventionsRequest"
              },
              "example": {
                "flowConventions": {
                  "currency": "GBP",
                  "paymentFrequency": "1Y",
                  "dayCountConvention": "Act360",
                  "rollConvention": "Following",
                  "paymentCalendars": [
                    "LON"
                  ],
                  "resetCalendars": [
                    "LON"
                  ],
                  "settleDays": 2,
                  "resetDays": 2,
                  "scope": "someScope",
                  "code": "exampleFlowConventionsName"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/rates/flowconventions/{scope}/{code}": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Get Flow Conventions",
        "description": "Get a Flow Conventions from a single scope.\r\nThe response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetFlowConventions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Flow Conventions to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Flow Conventions to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Flow Conventions to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the Flow Conventions to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Flow Conventions. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Flow Conventions. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Flow Conventions or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFlowConventionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFlowConventionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFlowConventionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Delete the Flow Conventions of given scope and code, assuming that it is present.",
        "description": "Delete the specified conventions from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteFlowConventions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Flow Conventions to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Flow Conventions to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Flow Conventions to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Flow Conventions to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/rates/indexconventions": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] List the set of Index Conventions",
        "description": "List the set of Index Conventions at the specified date/time",
        "operationId": "ListIndexConvention",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the conventions. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Index conventions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetIndexConventionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetIndexConventionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetIndexConventionResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "post": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Upsert a set of Index Convention. This creates or updates the data in Lusid.",
        "description": "Update or insert Index Convention in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Index Convention or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertIndexConvention",
        "requestBody": {
          "description": "The Index Conventions to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertIndexConventionRequest"
              },
              "example": {
                "indexConvention": {
                  "fixingReference": "Unknown",
                  "publicationDayLag": 2,
                  "paymentTenor": "1Y",
                  "dayCountConvention": "Act360",
                  "currency": "GBP",
                  "scope": "someScope",
                  "code": "exampleIndexonventionsName"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertIndexConventionRequest"
              },
              "example": {
                "indexConvention": {
                  "fixingReference": "Unknown",
                  "publicationDayLag": 2,
                  "paymentTenor": "1Y",
                  "dayCountConvention": "Act360",
                  "currency": "GBP",
                  "scope": "someScope",
                  "code": "exampleIndexonventionsName"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertIndexConventionRequest"
              },
              "example": {
                "indexConvention": {
                  "fixingReference": "Unknown",
                  "publicationDayLag": 2,
                  "paymentTenor": "1Y",
                  "dayCountConvention": "Act360",
                  "currency": "GBP",
                  "scope": "someScope",
                  "code": "exampleIndexonventionsName"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertIndexConventionRequest"
              },
              "example": {
                "indexConvention": {
                  "fixingReference": "Unknown",
                  "publicationDayLag": 2,
                  "paymentTenor": "1Y",
                  "dayCountConvention": "Act360",
                  "currency": "GBP",
                  "scope": "someScope",
                  "code": "exampleIndexonventionsName"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/conventions/rates/indexconventions/{scope}/{code}": {
      "get": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Get Index Convention",
        "description": "Get a Index Convention from a single scope.\r\nThe response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetIndexConvention",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Index Convention to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Index Convention to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Index Convention to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the Index Convention to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Index Convention. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Index Convention. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Index Convention or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetIndexConventionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIndexConventionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIndexConventionResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Conventions"
        ],
        "summary": "[BETA] Delete the Index Convention of given scope and code, assuming that it is present.",
        "description": "Delete the specified Index Convention from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteIndexConvention",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Index Convention to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Index Convention to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Index Convention to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Index Convention to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/corporateactionsources": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] Create corporate action source",
        "description": "Create a corporate action source.",
        "operationId": "CreateCorporateActionSource",
        "requestBody": {
          "description": "The corporate action source definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created corporate action source",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] List corporate action sources",
        "description": "Gets a list of all corporate action sources",
        "operationId": "ListCorporateActionSources",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "schema": {
              "type": "string",
              "description": "Optional. The AsAt date of the data",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many. If not specified, a default\r\nof 100 is used.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many. If not specified, a default\r\nof 100 is used.",
              "format": "int32",
              "default": 100,
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. For example, to\r\nfilter on the Display Name, use \"displayName eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set. For example, to\r\nfilter on the Display Name, use \"displayName eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. The pagination token to use to continue listing items from a previous call. Page values are\r\nreturn from list calls, and must be supplied exactly as returned. Additionally, when specifying this\r\nvalue, the filter, asAt, and limit must not\r\nbe modified.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "Optional. The pagination token to use to continue listing items from a previous call. Page values are\r\nreturn from list calls, and must be supplied exactly as returned. Additionally, when specifying this\r\nvalue, the filter, asAt, and limit must not\r\nbe modified.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All Existing Corporate Action Sources",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/corporateactionsources/{scope}/{code}": {
      "delete": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] Delete a corporate action source",
        "description": "Deletes a single corporate action source",
        "operationId": "DeleteCorporateActionSource",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source to be deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the corporate action source to be deleted",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source to be deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source to be deleted",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Action Source Deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/corporateactionsources/{scope}/{code}/corporateactions": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] Upsert corporate actions",
        "description": "Create or update one or more corporate actions in a particular corporate action source. Failures are identified in the body of the response.\r\n            \r\nIf a corporate action is upserted at exactly the same effective datetime as a transaction for the same instrument, the corporate action takes precedence. Depending on the nature of the corporate action, this may mean it affects the transaction.",
        "operationId": "BatchUpsertCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of corporate action source",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The corporate action definitions",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created corporate actions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[BETA] Get corporate actions",
        "description": "Get corporate actions from a particular corporate action source.",
        "operationId": "GetCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the corporate action source.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Optional. The start effective date of the data range.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Optional. The start effective date of the data range.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Optional. The end effective date of the data range.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Optional. The end effective date of the data range.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data.",
            "schema": {
              "type": "string",
              "description": "Optional. The AsAt date of the data.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the results to this number.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the results to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Announcement Date, use \"announcementDate eq '2020-03-06'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Announcement Date, use \"announcementDate eq '2020-03-06'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Actions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "delete": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EXPERIMENTAL] Delete corporate actions",
        "description": "Delete one or more corporate actions from a particular corporate action source.",
        "operationId": "DeleteCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the corporate action source",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source",
              "nullable": true
            }
          },
          {
            "name": "corporateActionIds",
            "in": "query",
            "description": "The IDs of the corporate actions to delete",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The IDs of the corporate actions to delete"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Actions Deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/counterparties/counterpartyagreements": {
      "get": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EXPERIMENTAL] List the set of Counterparty Agreements",
        "description": "List the set of Counterparty Agreements at the specified AsAt date/time",
        "operationId": "ListCounterpartyAgreements",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Counterparty Agreements",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyAgreementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyAgreementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCounterpartyAgreementResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EXPERIMENTAL] Upsert Counterparty Agreement",
        "description": "Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertCounterpartyAgreement",
        "requestBody": {
          "description": "The Counterparty Agreement to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyAgreementRequest"
              },
              "example": {
                "counterpartyAgreement": {
                  "displayName": "display-name",
                  "agreementType": "type",
                  "counterpartySignatory": {
                    "name": "counterparty-signatory-name",
                    "legalEntityIdentifier": {
                      "idTypeScope": "legal-identifier-idTypeScope",
                      "idTypeCode": "legal-identifier-idTypeCode",
                      "code": "legal-identifier-code"
                    }
                  },
                  "datedAsOf": "2020-01-01T01:00:00.0000000+00:00",
                  "creditSupportAnnexId": {
                    "scope": "credit-support-annex-scope",
                    "code": "credit-support-annex-code"
                  },
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyAgreementRequest"
              },
              "example": {
                "counterpartyAgreement": {
                  "displayName": "display-name",
                  "agreementType": "type",
                  "counterpartySignatory": {
                    "name": "counterparty-signatory-name",
                    "legalEntityIdentifier": {
                      "idTypeScope": "legal-identifier-idTypeScope",
                      "idTypeCode": "legal-identifier-idTypeCode",
                      "code": "legal-identifier-code"
                    }
                  },
                  "datedAsOf": "2020-01-01T01:00:00.0000000+00:00",
                  "creditSupportAnnexId": {
                    "scope": "credit-support-annex-scope",
                    "code": "credit-support-annex-code"
                  },
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyAgreementRequest"
              },
              "example": {
                "counterpartyAgreement": {
                  "displayName": "display-name",
                  "agreementType": "type",
                  "counterpartySignatory": {
                    "name": "counterparty-signatory-name",
                    "legalEntityIdentifier": {
                      "idTypeScope": "legal-identifier-idTypeScope",
                      "idTypeCode": "legal-identifier-idTypeCode",
                      "code": "legal-identifier-code"
                    }
                  },
                  "datedAsOf": "2020-01-01T01:00:00.0000000+00:00",
                  "creditSupportAnnexId": {
                    "scope": "credit-support-annex-scope",
                    "code": "credit-support-annex-code"
                  },
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCounterpartyAgreementRequest"
              },
              "example": {
                "counterpartyAgreement": {
                  "displayName": "display-name",
                  "agreementType": "type",
                  "counterpartySignatory": {
                    "name": "counterparty-signatory-name",
                    "legalEntityIdentifier": {
                      "idTypeScope": "legal-identifier-idTypeScope",
                      "idTypeCode": "legal-identifier-idTypeCode",
                      "code": "legal-identifier-code"
                    }
                  },
                  "datedAsOf": "2020-01-01T01:00:00.0000000+00:00",
                  "creditSupportAnnexId": {
                    "scope": "credit-support-annex-scope",
                    "code": "credit-support-annex-code"
                  },
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted Counterparty Agreement or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/counterparties/counterpartyagreements/{scope}/{code}": {
      "get": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EXPERIMENTAL] Get Counterparty Agreement",
        "description": "Get a Counterparty Agreement from a single scope.\r\nThe response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetCounterpartyAgreement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Counterparty Agreement to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Counterparty Agreement to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Counterparty Agreement to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the Counterparty Agreement to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Counterparty Agreement or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyAgreementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyAgreementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCounterpartyAgreementResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code",
        "description": "Delete the specified Counterparty Agreement from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteCounterpartyAgreement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Counterparty Agreement to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Counterparty Agreement to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Counterparty Agreement to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Counterparty Agreement to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/counterparties/creditsupportannexes": {
      "get": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EXPERIMENTAL] List the set of Credit Support Annexes",
        "description": "List the set of Credit Support Annexes at the specified AsAt date/time",
        "operationId": "ListCreditSupportAnnexes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Credit Support Annexes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetCreditSupportAnnexResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EXPERIMENTAL] Upsert Credit Support Annex",
        "description": "Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertCreditSupportAnnex",
        "requestBody": {
          "description": "The Credit Support Annex to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCreditSupportAnnexRequest"
              },
              "example": {
                "creditSupportAnnex": {
                  "referenceCurrency": "GBP",
                  "collateralCurrencies": [
                    "GBP"
                  ],
                  "isdaAgreementVersion": "ISDA2002",
                  "marginCallFrequency": "1W",
                  "valuationAgent": "Institution",
                  "thresholdAmount": 0,
                  "roundingDecimalPlaces": 2,
                  "initialMarginAmount": 100000,
                  "minimumTransferAmount": 10000,
                  "id": {
                    "scope": "some-scope",
                    "code": "some-code"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/counterparties/creditsupportannexes/{scope}/{code}": {
      "get": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EXPERIMENTAL] Get Credit Support Annex",
        "description": "Get a Credit Support Annex from a single scope.\r\nThe response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.\r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetCreditSupportAnnex",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Credit Support Annex to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Credit Support Annex to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the Credit Support Annex to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the Credit Support Annex to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved credit support annexes or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Counterparties"
        ],
        "summary": "[EXPERIMENTAL] Delete the Credit Support Annex of given scope and code",
        "description": "Delete the specified Credit Support Annex from a single scope.\r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteCreditSupportAnnex",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Credit Support Annex to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Credit Support Annex to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Credit Support Annex to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Credit Support Annex to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/customentities/entitytypes": {
      "post": {
        "tags": [
          "CustomEntityDefinitions"
        ],
        "summary": "[EXPERIMENTAL] Create a new CustomEntityDefinition",
        "description": "Create a custom entity definition that does not already exist. Will return a Bad Request if the CustomEntityDefinition already exists",
        "operationId": "CreateCustomEntityDefinition",
        "requestBody": {
          "description": "The CustomEntityDefinitionRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinitionRequest"
              },
              "example": {
                "entityTypeName": "issue",
                "displayName": "Issue",
                "description": "Represents an issue in the system",
                "fieldSchema": [
                  {
                    "name": "Assigned",
                    "lifetime": "TimeVariant",
                    "type": "bool",
                    "required": true
                  },
                  {
                    "name": "Status",
                    "lifetime": "TimeVariant",
                    "type": "string",
                    "required": true
                  },
                  {
                    "name": "Effort In Days",
                    "lifetime": "Perpetual",
                    "type": "number",
                    "required": false
                  },
                  {
                    "name": "DateCreated",
                    "lifetime": "Perpetual",
                    "type": "datetime",
                    "required": true
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinitionRequest"
              },
              "example": {
                "entityTypeName": "issue",
                "displayName": "Issue",
                "description": "Represents an issue in the system",
                "fieldSchema": [
                  {
                    "name": "Assigned",
                    "lifetime": "TimeVariant",
                    "type": "bool",
                    "required": true
                  },
                  {
                    "name": "Status",
                    "lifetime": "TimeVariant",
                    "type": "string",
                    "required": true
                  },
                  {
                    "name": "Effort In Days",
                    "lifetime": "Perpetual",
                    "type": "number",
                    "required": false
                  },
                  {
                    "name": "DateCreated",
                    "lifetime": "Perpetual",
                    "type": "datetime",
                    "required": true
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinitionRequest"
              },
              "example": {
                "entityTypeName": "issue",
                "displayName": "Issue",
                "description": "Represents an issue in the system",
                "fieldSchema": [
                  {
                    "name": "Assigned",
                    "lifetime": "TimeVariant",
                    "type": "bool",
                    "required": true
                  },
                  {
                    "name": "Status",
                    "lifetime": "TimeVariant",
                    "type": "string",
                    "required": true
                  },
                  {
                    "name": "Effort In Days",
                    "lifetime": "Perpetual",
                    "type": "number",
                    "required": false
                  },
                  {
                    "name": "DateCreated",
                    "lifetime": "Perpetual",
                    "type": "datetime",
                    "required": true
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinitionRequest"
              },
              "example": {
                "entityTypeName": "issue",
                "displayName": "Issue",
                "description": "Represents an issue in the system",
                "fieldSchema": [
                  {
                    "name": "Assigned",
                    "lifetime": "TimeVariant",
                    "type": "bool",
                    "required": true
                  },
                  {
                    "name": "Status",
                    "lifetime": "TimeVariant",
                    "type": "string",
                    "required": true
                  },
                  {
                    "name": "Effort In Days",
                    "lifetime": "Perpetual",
                    "type": "number",
                    "required": false
                  },
                  {
                    "name": "DateCreated",
                    "lifetime": "Perpetual",
                    "type": "datetime",
                    "required": true
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created custom entity definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/issue",
                  "entityTypeName": "issue",
                  "displayName": "Issue",
                  "description": "Represents an issue in the system",
                  "entityType": "~issue",
                  "fieldSchema": [
                    {
                      "name": "Assigned",
                      "lifetime": "TimeVariant",
                      "type": "bool",
                      "required": true
                    },
                    {
                      "name": "Status",
                      "lifetime": "TimeVariant",
                      "type": "string",
                      "required": true
                    },
                    {
                      "name": "Effort In Days",
                      "lifetime": "Perpetual",
                      "type": "number",
                      "required": false
                    },
                    {
                      "name": "DateCreated",
                      "lifetime": "Perpetual",
                      "type": "datetime",
                      "required": true
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/issue",
                  "entityTypeName": "issue",
                  "displayName": "Issue",
                  "description": "Represents an issue in the system",
                  "entityType": "~issue",
                  "fieldSchema": [
                    {
                      "name": "Assigned",
                      "lifetime": "TimeVariant",
                      "type": "bool",
                      "required": true
                    },
                    {
                      "name": "Status",
                      "lifetime": "TimeVariant",
                      "type": "string",
                      "required": true
                    },
                    {
                      "name": "Effort In Days",
                      "lifetime": "Perpetual",
                      "type": "number",
                      "required": false
                    },
                    {
                      "name": "DateCreated",
                      "lifetime": "Perpetual",
                      "type": "datetime",
                      "required": true
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/issue",
                  "entityTypeName": "issue",
                  "displayName": "Issue",
                  "description": "Represents an issue in the system",
                  "entityType": "~issue",
                  "fieldSchema": [
                    {
                      "name": "Assigned",
                      "lifetime": "TimeVariant",
                      "type": "bool",
                      "required": true
                    },
                    {
                      "name": "Status",
                      "lifetime": "TimeVariant",
                      "type": "string",
                      "required": true
                    },
                    {
                      "name": "Effort In Days",
                      "lifetime": "Perpetual",
                      "type": "number",
                      "required": false
                    },
                    {
                      "name": "DateCreated",
                      "lifetime": "Perpetual",
                      "type": "datetime",
                      "required": true
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/customentities/entitytypes/{entityType}": {
      "get": {
        "tags": [
          "CustomEntityDefinitions"
        ],
        "summary": "[EXPERIMENTAL] Get CustomEntityDefinition",
        "description": "Retrieve a CustomEntityDefinition by a specific EntityType at a point in AsAt time",
        "operationId": "GetDefinition",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of entity for which to retrieve the CustomEntityDefinition. This is included in the response from M:Finbourne.WebApi.Controllers.CustomEntityDefinitionController.CreateCustomEntityDefinition(Finbourne.WebApi.Interface.Dto.CustomEntityDefinitions.CustomEntityDefinitionRequest).",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "description": "The type of entity for which to retrieve the CustomEntityDefinition. This is included in the response from M:Finbourne.WebApi.Controllers.CustomEntityDefinitionController.CreateCustomEntityDefinition(Finbourne.WebApi.Interface.Dto.CustomEntityDefinitions.CustomEntityDefinitionRequest)."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt at which to retrieve the CustomEntityDefinition.",
            "schema": {
              "type": "string",
              "description": "The AsAt at which to retrieve the CustomEntityDefinition.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested custom entity definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/issue",
                  "entityTypeName": "issue",
                  "displayName": "Issue",
                  "description": "Represents an issue in the system",
                  "entityType": "~issue",
                  "fieldSchema": [
                    {
                      "name": "Assigned",
                      "lifetime": "TimeVariant",
                      "type": "bool",
                      "required": true
                    },
                    {
                      "name": "Status",
                      "lifetime": "TimeVariant",
                      "type": "string",
                      "required": true
                    },
                    {
                      "name": "Effort In Days",
                      "lifetime": "Perpetual",
                      "type": "number",
                      "required": false
                    },
                    {
                      "name": "DateCreated",
                      "lifetime": "Perpetual",
                      "type": "datetime",
                      "required": true
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/issue",
                  "entityTypeName": "issue",
                  "displayName": "Issue",
                  "description": "Represents an issue in the system",
                  "entityType": "~issue",
                  "fieldSchema": [
                    {
                      "name": "Assigned",
                      "lifetime": "TimeVariant",
                      "type": "bool",
                      "required": true
                    },
                    {
                      "name": "Status",
                      "lifetime": "TimeVariant",
                      "type": "string",
                      "required": true
                    },
                    {
                      "name": "Effort In Days",
                      "lifetime": "Perpetual",
                      "type": "number",
                      "required": false
                    },
                    {
                      "name": "DateCreated",
                      "lifetime": "Perpetual",
                      "type": "datetime",
                      "required": true
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/customentities/entitytypes/issue",
                  "entityTypeName": "issue",
                  "displayName": "Issue",
                  "description": "Represents an issue in the system",
                  "entityType": "~issue",
                  "fieldSchema": [
                    {
                      "name": "Assigned",
                      "lifetime": "TimeVariant",
                      "type": "bool",
                      "required": true
                    },
                    {
                      "name": "Status",
                      "lifetime": "TimeVariant",
                      "type": "string",
                      "required": true
                    },
                    {
                      "name": "Effort In Days",
                      "lifetime": "Perpetual",
                      "type": "number",
                      "required": false
                    },
                    {
                      "name": "DateCreated",
                      "lifetime": "Perpetual",
                      "type": "datetime",
                      "required": true
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/customentities/{entityType}": {
      "post": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EXPERIMENTAL] Upsert a new CustomEntity",
        "description": "Insert the custom entity if it does not exist or update the custom entity with the supplied state if it does exist.",
        "operationId": "UpsertCustomEntity",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of the CustomEntity to be created. An entityType can be created using the M:Finbourne.WebApi.Controllers.CustomEntityDefinitionController.GetDefinition(System.String,System.Nullable{System.DateTimeOffset}) endpoint.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "description": "The type of the CustomEntity to be created. An entityType can be created using the M:Finbourne.WebApi.Controllers.CustomEntityDefinitionController.GetDefinition(System.String,System.Nullable{System.DateTimeOffset}) endpoint."
            }
          }
        ],
        "requestBody": {
          "description": "The CustomEntity to be created.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityRequest"
              },
              "example": {
                "displayName": "Issue",
                "description": "Issue with loading data",
                "effectiveAt": "2021-07-23T12:00:00.0000000+00:00",
                "identifiers": [
                  {
                    "identifierScope": "DataLoadingIssues",
                    "identifierType": "InternalId",
                    "identifierValue": "662d5484bbfd42989db6745b3d41d5bc"
                  },
                  {
                    "identifierScope": "DataLoadingIssues",
                    "identifierType": "JiraID",
                    "identifierValue": "PLAT-250"
                  }
                ],
                "fields": [
                  {
                    "name": "IssueName",
                    "value": "InstrumentNotFound"
                  },
                  {
                    "name": "Status",
                    "value": "InProgress"
                  },
                  {
                    "name": "StoryPointEstimate",
                    "value": 1
                  },
                  {
                    "name": "Assigned",
                    "value": true
                  },
                  {
                    "name": "DateCreated",
                    "value": "2021-07-13T12:00:00.0000000+00:00"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityRequest"
              },
              "example": {
                "displayName": "Issue",
                "description": "Issue with loading data",
                "effectiveAt": "2021-07-23T12:00:00.0000000+00:00",
                "identifiers": [
                  {
                    "identifierScope": "DataLoadingIssues",
                    "identifierType": "InternalId",
                    "identifierValue": "662d5484bbfd42989db6745b3d41d5bc"
                  },
                  {
                    "identifierScope": "DataLoadingIssues",
                    "identifierType": "JiraID",
                    "identifierValue": "PLAT-250"
                  }
                ],
                "fields": [
                  {
                    "name": "IssueName",
                    "value": "InstrumentNotFound"
                  },
                  {
                    "name": "Status",
                    "value": "InProgress"
                  },
                  {
                    "name": "StoryPointEstimate",
                    "value": 1
                  },
                  {
                    "name": "Assigned",
                    "value": true
                  },
                  {
                    "name": "DateCreated",
                    "value": "2021-07-13T12:00:00.0000000+00:00"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityRequest"
              },
              "example": {
                "displayName": "Issue",
                "description": "Issue with loading data",
                "effectiveAt": "2021-07-23T12:00:00.0000000+00:00",
                "identifiers": [
                  {
                    "identifierScope": "DataLoadingIssues",
                    "identifierType": "InternalId",
                    "identifierValue": "662d5484bbfd42989db6745b3d41d5bc"
                  },
                  {
                    "identifierScope": "DataLoadingIssues",
                    "identifierType": "JiraID",
                    "identifierValue": "PLAT-250"
                  }
                ],
                "fields": [
                  {
                    "name": "IssueName",
                    "value": "InstrumentNotFound"
                  },
                  {
                    "name": "Status",
                    "value": "InProgress"
                  },
                  {
                    "name": "StoryPointEstimate",
                    "value": 1
                  },
                  {
                    "name": "Assigned",
                    "value": true
                  },
                  {
                    "name": "DateCreated",
                    "value": "2021-07-13T12:00:00.0000000+00:00"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityRequest"
              },
              "example": {
                "displayName": "Issue",
                "description": "Issue with loading data",
                "effectiveAt": "2021-07-23T12:00:00.0000000+00:00",
                "identifiers": [
                  {
                    "identifierScope": "DataLoadingIssues",
                    "identifierType": "InternalId",
                    "identifierValue": "662d5484bbfd42989db6745b3d41d5bc"
                  },
                  {
                    "identifierScope": "DataLoadingIssues",
                    "identifierType": "JiraID",
                    "identifierValue": "PLAT-250"
                  }
                ],
                "fields": [
                  {
                    "name": "IssueName",
                    "value": "InstrumentNotFound"
                  },
                  {
                    "name": "Status",
                    "value": "InProgress"
                  },
                  {
                    "name": "StoryPointEstimate",
                    "value": 1
                  },
                  {
                    "name": "Assigned",
                    "value": true
                  },
                  {
                    "name": "DateCreated",
                    "value": "2021-07-13T12:00:00.0000000+00:00"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The upserted Custom Entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~issue/JiraId/PLAT-250?identifierScope=DataLoadingIssues",
                  "entityType": "~issue",
                  "customEntityId": "81dce173-cdcb-492e-84de-f544b9b4adb9",
                  "version": {
                    "effectiveFrom": "2021-07-23T12:00:00.0000000+00:00",
                    "asAtDate": "2021-07-23T12:00:00.0000000+00:00"
                  },
                  "displayName": "Issue",
                  "description": "Issue with loading data",
                  "identifiers": [
                    {
                      "identifierScope": "DataLoadingIssues",
                      "identifierType": "InternalId",
                      "identifierValue": "190599be16124ee9bae85e30fd3cb797",
                      "effectiveRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      }
                    },
                    {
                      "identifierScope": "DataLoadingIssues",
                      "identifierType": "JiraId",
                      "identifierValue": "PLAT-250",
                      "effectiveRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      }
                    }
                  ],
                  "fields": [
                    {
                      "name": "IssueName",
                      "value": "InstrumentNotFound"
                    },
                    {
                      "name": "Status",
                      "value": "InProgress"
                    },
                    {
                      "name": "StoryPointEstimate",
                      "value": 1
                    },
                    {
                      "name": "Assigned",
                      "value": true
                    },
                    {
                      "name": "DateCreated",
                      "value": "2021-07-13T12:00:00.0000000+00:00"
                    }
                  ],
                  "effectiveRange": {
                    "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                    "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                  },
                  "asAtRange": {
                    "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                    "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~issue/JiraId/PLAT-250?identifierScope=DataLoadingIssues",
                  "entityType": "~issue",
                  "customEntityId": "81dce173-cdcb-492e-84de-f544b9b4adb9",
                  "version": {
                    "effectiveFrom": "2021-07-23T12:00:00.0000000+00:00",
                    "asAtDate": "2021-07-23T12:00:00.0000000+00:00"
                  },
                  "displayName": "Issue",
                  "description": "Issue with loading data",
                  "identifiers": [
                    {
                      "identifierScope": "DataLoadingIssues",
                      "identifierType": "InternalId",
                      "identifierValue": "190599be16124ee9bae85e30fd3cb797",
                      "effectiveRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      }
                    },
                    {
                      "identifierScope": "DataLoadingIssues",
                      "identifierType": "JiraId",
                      "identifierValue": "PLAT-250",
                      "effectiveRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      }
                    }
                  ],
                  "fields": [
                    {
                      "name": "IssueName",
                      "value": "InstrumentNotFound"
                    },
                    {
                      "name": "Status",
                      "value": "InProgress"
                    },
                    {
                      "name": "StoryPointEstimate",
                      "value": 1
                    },
                    {
                      "name": "Assigned",
                      "value": true
                    },
                    {
                      "name": "DateCreated",
                      "value": "2021-07-13T12:00:00.0000000+00:00"
                    }
                  ],
                  "effectiveRange": {
                    "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                    "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                  },
                  "asAtRange": {
                    "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                    "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~issue/JiraId/PLAT-250?identifierScope=DataLoadingIssues",
                  "entityType": "~issue",
                  "customEntityId": "81dce173-cdcb-492e-84de-f544b9b4adb9",
                  "version": {
                    "effectiveFrom": "2021-07-23T12:00:00.0000000+00:00",
                    "asAtDate": "2021-07-23T12:00:00.0000000+00:00"
                  },
                  "displayName": "Issue",
                  "description": "Issue with loading data",
                  "identifiers": [
                    {
                      "identifierScope": "DataLoadingIssues",
                      "identifierType": "InternalId",
                      "identifierValue": "190599be16124ee9bae85e30fd3cb797",
                      "effectiveRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      }
                    },
                    {
                      "identifierScope": "DataLoadingIssues",
                      "identifierType": "JiraId",
                      "identifierValue": "PLAT-250",
                      "effectiveRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                        "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                      }
                    }
                  ],
                  "fields": [
                    {
                      "name": "IssueName",
                      "value": "InstrumentNotFound"
                    },
                    {
                      "name": "Status",
                      "value": "InProgress"
                    },
                    {
                      "name": "StoryPointEstimate",
                      "value": 1
                    },
                    {
                      "name": "Assigned",
                      "value": true
                    },
                    {
                      "name": "DateCreated",
                      "value": "2021-07-13T12:00:00.0000000+00:00"
                    }
                  ],
                  "effectiveRange": {
                    "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                    "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                  },
                  "asAtRange": {
                    "fromDate": "2021-07-23T12:00:00.0000000+00:00",
                    "untilDate": "9999-12-31T23:59:59.9999999+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EXPERIMENTAL] List Custom Entities",
        "description": "List all the Custom Entities matching particular criteria.",
        "operationId": "ListCustomEntities",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of entity to list.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "description": "The type of entity to list."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the entities. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the entities. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the entities. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the entities. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the results. For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing entities; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing entities; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested custom entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCustomEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/customentities/{entityType}/{identifierType}/{identifierValue}": {
      "get": {
        "tags": [
          "CustomEntities"
        ],
        "summary": "[EXPERIMENTAL] Get CustomEntity",
        "description": "Retrieve a CustomEntity by a specific Id at a point in AsAt time.",
        "operationId": "GetCustomEntity",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of entity to retrieve. This is included in the response from M:Finbourne.WebApi.Controllers.CustomEntityDefinitionController.CreateCustomEntityDefinition(Finbourne.WebApi.Interface.Dto.CustomEntityDefinitions.CustomEntityDefinitionRequest).",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "description": "The type of entity to retrieve. This is included in the response from M:Finbourne.WebApi.Controllers.CustomEntityDefinitionController.CreateCustomEntityDefinition(Finbourne.WebApi.Interface.Dto.CustomEntityDefinitions.CustomEntityDefinitionRequest)."
            }
          },
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the CustomEntity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "An identifier type attached to the CustomEntity."
            }
          },
          {
            "name": "identifierValue",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The identifier value."
            }
          },
          {
            "name": "identifierScope",
            "in": "query",
            "description": "The identifier scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The identifier scope."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The AsAt at which to retrieve the CustomEntity.",
            "schema": {
              "type": "string",
              "description": "The AsAt at which to retrieve the CustomEntity.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Custom Entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~branch/what3words/loaf.fires.basket",
                  "entityType": "~branch",
                  "customEntityId": "0605622f-9d77-4fc8-ac2a-043ff697f6c7",
                  "version": {
                    "effectiveFrom": "2020-01-23T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-23T12:00:00.0000000+00:00"
                  },
                  "displayName": "The Frames",
                  "description": "Finbourne's London office in The Frames building",
                  "identifiers": [
                    {
                      "identifierScope": "locations",
                      "identifierType": "what3words",
                      "identifierValue": "loaf.fires.basket",
                      "effectiveRange": {
                        "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                      }
                    },
                    {
                      "identifierScope": "locations",
                      "identifierType": "Coordinates",
                      "identifierValue": "51.52356,-0.08192",
                      "effectiveRange": {
                        "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                      }
                    }
                  ],
                  "fields": [
                    {
                      "name": "Name of building",
                      "value": "Frames Building"
                    },
                    {
                      "name": "Town",
                      "value": "Shoreditch"
                    },
                    {
                      "name": "CurrentOffice",
                      "value": 1
                    },
                    {
                      "name": "Date Moved in",
                      "value": true
                    },
                    {
                      "name": "Date Created",
                      "value": "2019-01-23T12:00:00.0000000+00:00"
                    }
                  ],
                  "effectiveRange": {
                    "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                  },
                  "asAtRange": {
                    "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~branch/what3words/loaf.fires.basket",
                  "entityType": "~branch",
                  "customEntityId": "0605622f-9d77-4fc8-ac2a-043ff697f6c7",
                  "version": {
                    "effectiveFrom": "2020-01-23T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-23T12:00:00.0000000+00:00"
                  },
                  "displayName": "The Frames",
                  "description": "Finbourne's London office in The Frames building",
                  "identifiers": [
                    {
                      "identifierScope": "locations",
                      "identifierType": "what3words",
                      "identifierValue": "loaf.fires.basket",
                      "effectiveRange": {
                        "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                      }
                    },
                    {
                      "identifierScope": "locations",
                      "identifierType": "Coordinates",
                      "identifierValue": "51.52356,-0.08192",
                      "effectiveRange": {
                        "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                      }
                    }
                  ],
                  "fields": [
                    {
                      "name": "Name of building",
                      "value": "Frames Building"
                    },
                    {
                      "name": "Town",
                      "value": "Shoreditch"
                    },
                    {
                      "name": "CurrentOffice",
                      "value": 1
                    },
                    {
                      "name": "Date Moved in",
                      "value": true
                    },
                    {
                      "name": "Date Created",
                      "value": "2019-01-23T12:00:00.0000000+00:00"
                    }
                  ],
                  "effectiveRange": {
                    "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                  },
                  "asAtRange": {
                    "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityResponse"
                },
                "example": {
                  "href": "https://myco.lusid.com/api/api/customentities/~branch/what3words/loaf.fires.basket",
                  "entityType": "~branch",
                  "customEntityId": "0605622f-9d77-4fc8-ac2a-043ff697f6c7",
                  "version": {
                    "effectiveFrom": "2020-01-23T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-23T12:00:00.0000000+00:00"
                  },
                  "displayName": "The Frames",
                  "description": "Finbourne's London office in The Frames building",
                  "identifiers": [
                    {
                      "identifierScope": "locations",
                      "identifierType": "what3words",
                      "identifierValue": "loaf.fires.basket",
                      "effectiveRange": {
                        "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                      }
                    },
                    {
                      "identifierScope": "locations",
                      "identifierType": "Coordinates",
                      "identifierValue": "51.52356,-0.08192",
                      "effectiveRange": {
                        "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                      },
                      "asAtRange": {
                        "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                      }
                    }
                  ],
                  "fields": [
                    {
                      "name": "Name of building",
                      "value": "Frames Building"
                    },
                    {
                      "name": "Town",
                      "value": "Shoreditch"
                    },
                    {
                      "name": "CurrentOffice",
                      "value": 1
                    },
                    {
                      "name": "Date Moved in",
                      "value": true
                    },
                    {
                      "name": "Date Created",
                      "value": "2019-01-23T12:00:00.0000000+00:00"
                    }
                  ],
                  "effectiveRange": {
                    "fromDate": "2020-01-23T12:00:00.0000000+00:00"
                  },
                  "asAtRange": {
                    "fromDate": "2020-01-22T12:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/datatypes": {
      "post": {
        "tags": [
          "Data Types"
        ],
        "summary": "[BETA] Create data type definition",
        "description": "Create a new data type definition\r\n\r\nData types cannot be created in either the \"default\" or \"system\" scopes.",
        "operationId": "CreateDataType",
        "requestBody": {
          "description": "The definition of the new data type",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              },
              "example": {
                "scope": "TestScope",
                "code": "MyType",
                "typeValueRange": "Open",
                "displayName": "My data format",
                "description": "Data type description",
                "valueType": "Decimal",
                "unitSchema": "Basic",
                "acceptableUnits": [
                  {
                    "code": "Ap",
                    "displayName": "Apples",
                    "description": "A quantity of apples"
                  },
                  {
                    "code": "Bn",
                    "displayName": "Bananas",
                    "description": "A quantity of bananas"
                  },
                  {
                    "code": "Ch",
                    "displayName": "Cherry",
                    "description": "A quantity of cherries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/datatypes/{scope}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] List data types",
        "description": "List all data types in a specified scope",
        "operationId": "ListDataTypes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The requested scope of the data types",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The requested scope of the data types",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as at of the requested data types",
            "schema": {
              "type": "string",
              "description": "The as at of the requested data types",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "includeSystem",
            "in": "query",
            "description": "Whether to additionally include those data types in the \"system\" scope",
            "schema": {
              "type": "boolean",
              "description": "Whether to additionally include those data types in the \"system\" scope",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}": {
      "put": {
        "tags": [
          "Data Types"
        ],
        "summary": "[BETA] Update data type definition",
        "description": "Update the definition of the specified existing data type\r\n\r\nNot all elements within a data type definition are modifiable due to the potential implications for data\r\nalready stored against the types",
        "operationId": "UpdateDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated definition of the data type",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "displayName": "My data format",
                "description": "Data type description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "displayName": "My data format",
                "description": "Data type description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "displayName": "My data format",
                "description": "Data type description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              },
              "example": {
                "displayName": "My data format",
                "description": "Data type description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      },
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] Get data type definition",
        "description": "Get the definition of a specified data type",
        "operationId": "GetDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}/units": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] Get units from data type",
        "description": "Get the definitions of the specified units associated bound to a specific data type",
        "operationId": "GetUnitsFromDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          },
          {
            "name": "units",
            "in": "query",
            "description": "One or more unit identifiers for which the definition is being requested",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "One or more unit identifiers for which the definition is being requested",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The as at of the requested data type",
            "schema": {
              "type": "string",
              "description": "Optional. The as at of the requested data type",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Create derived portfolio",
        "description": "Create a derived transaction portfolio from a parent transaction portfolio (which may itself be derived).",
        "operationId": "CreateDerivedPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which to create the derived transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the derived transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created derived portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}/{code}/details": {
      "delete": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Delete derived portfolio details",
        "description": "Delete all the portfolio details for a derived transaction portfolio.",
        "operationId": "DeleteDerivedPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the derived transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the derived transaction portfolio. Together with the scope this uniquely identifies\r\n            the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the derived transaction portfolio. Together with the scope this uniquely identifies\r\n            the derived transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the change.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective date of the change.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/entities/changes/portfolios": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "[EARLY ACCESS] Get the next change to each portfolio in a scope.",
        "description": "Gets the time of the next (earliest effective at) modification (correction and/or amendment) to each portfolio in a scope relative to a point in bitemporal time.\r\nIncludes changes from parent portfolios in different scopes.\r\nExcludes changes from subcriptions (e.g corporate actions).",
        "operationId": "GetPortfolioChanges",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the origin.",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective date of the origin.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as-at date of the origin.",
            "schema": {
              "type": "string",
              "description": "The as-at date of the origin.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "A list of portfolio changes in the requested scope relative to the specified time.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/executions": {
      "get": {
        "tags": [
          "Executions"
        ],
        "summary": "[EXPERIMENTAL] List Executions",
        "description": "Fetch the last pre-AsAt date version of each execution in scope (does not fetch the entire history).",
        "operationId": "ListExecutions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the execution. Defaults to return the latest version of the execution if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the execution. Defaults to return the latest version of the execution if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing execution from a previous call to list executions.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing execution from a previous call to list executions.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Execution\" domain to decorate onto each execution.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Execution/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Execution\" domain to decorate onto each execution.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Execution/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Executions in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfExecution"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfExecution"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfExecution"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Executions"
        ],
        "summary": "[EXPERIMENTAL] Upsert Execution",
        "description": "Upsert; update existing executions with given ids, or create new executions otherwise.",
        "operationId": "UpsertExecutions",
        "requestBody": {
          "description": "The collection of execution requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "properties": {
                      "execution/MyScope/SomeExecutionProperty": {
                        "key": "Execution/MyScope/SomeExecutionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "GBP",
                    "settlementCurrencyFxRate": 0.67,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "properties": {
                      "execution/MyScope/SomeExecutionProperty": {
                        "key": "Execution/MyScope/SomeExecutionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "GBP",
                    "settlementCurrencyFxRate": 0.67,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "properties": {
                      "execution/MyScope/SomeExecutionProperty": {
                        "key": "Execution/MyScope/SomeExecutionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "GBP",
                    "settlementCurrencyFxRate": 0.67,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "EXEC00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "properties": {
                      "execution/MyScope/SomeExecutionProperty": {
                        "key": "Execution/MyScope/SomeExecutionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "GBP",
                    "settlementCurrencyFxRate": 0.67,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of executions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfExecution"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "EXEC0000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "GBP",
                      "settlementCurrencyFxRate": 0.67,
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfExecution"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "EXEC0000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "GBP",
                      "settlementCurrencyFxRate": 0.67,
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfExecution"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "EXEC0000123"
                      },
                      "placementId": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "GBP",
                      "settlementCurrencyFxRate": 0.67,
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/executions/{scope}/{code}": {
      "get": {
        "tags": [
          "Executions"
        ],
        "summary": "[EXPERIMENTAL] Get Execution",
        "description": "Fetch a Execution that matches the specified identifier",
        "operationId": "GetExecution",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the execution belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the execution belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The execution's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The execution's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the execution. Defaults to return the latest version of the execution if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the execution. Defaults to return the latest version of the execution if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Execution\" domain to decorate onto the execution.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Execution/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Execution\" domain to decorate onto the execution.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Execution/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The execution matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Execution"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "EXEC0000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "GBP",
                  "settlementCurrencyFxRate": 0.67,
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Execution"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "EXEC0000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "GBP",
                  "settlementCurrencyFxRate": 0.67,
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Execution"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "EXEC0000123"
                  },
                  "placementId": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "settlementDate": "2006-04-13T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "GBP",
                  "settlementCurrencyFxRate": 0.67,
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Executions"
        ],
        "summary": "[EXPERIMENTAL] Delete execution",
        "description": "Delete an execution. Deletion will be valid from the execution's creation datetime.\r\nThis means that the execution will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteExecution",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The execution scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The execution scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The execution's code. This, together with the scope uniquely identifies the execution to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The execution's code. This, together with the scope uniquely identifies the execution to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an execution.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/feesandcommissions": {
      "get": {
        "tags": [
          "FeesAndCommissions"
        ],
        "summary": "[EXPERIMENTAL] Get the Fees and Commissions that may be applicable to a transaction.",
        "description": "Additionally, matching can be based on the instrument's properties, its portfolio properties, and any additional property keys present in the data file.",
        "operationId": "GetApplicableFees",
        "parameters": [
          {
            "name": "instrumentIdentifierType",
            "in": "query",
            "description": "Optional. The unique identifier type to use, eg 'Figi' or 'LusidInstrumentId'.",
            "schema": {
              "type": "string",
              "description": "Optional. The unique identifier type to use, eg 'Figi' or 'LusidInstrumentId'.",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdentifier",
            "in": "query",
            "description": "Optional. The Instrument Identifier to get properties for.",
            "schema": {
              "type": "string",
              "description": "Optional. The Instrument Identifier to get properties for.",
              "nullable": true
            }
          },
          {
            "name": "portfolioScope",
            "in": "query",
            "description": "Optional. The scope of the portfolio to fetch additional properties from.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Optional. The scope of the portfolio to fetch additional properties from.",
              "nullable": true
            }
          },
          {
            "name": "portfolioCode",
            "in": "query",
            "description": "Optional. The code of the portfolio to fetch additional properties from.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Optional. The code of the portfolio to fetch additional properties from.",
              "nullable": true
            }
          },
          {
            "name": "additionalSearchKeys",
            "in": "query",
            "description": "Any other property keys or fields and their corresponding values that should be matched for fees. Eg. \"Instrument/default/Name=exampleValue\" or \"AdditionalKey2=Value2\".\r\n            The list of fields available is as follows : \"RuleName\", \"Country\", \"FeeType\", \"FeeRate\", \"MinFee\", \"MaxFee\", \"PropertyKey\", \r\n            \"TransactionType\", \"Counterparty\", \"SettlementCurrency\", \"TransactionCurrency\", \"ExecutionBroker\", \r\n            \"Custodian\", \"Exchange\"",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Any other property keys or fields and their corresponding values that should be matched for fees. Eg. \"Instrument/default/Name=exampleValue\" or \"AdditionalKey2=Value2\".\r\n            The list of fields available is as follows : \"RuleName\", \"Country\", \"FeeType\", \"FeeRate\", \"MinFee\", \"MaxFee\", \"PropertyKey\", \r\n            \"TransactionType\", \"Counterparty\", \"SettlementCurrency\", \"TransactionCurrency\", \"ExecutionBroker\", \r\n            \"Custodian\", \"Exchange\"",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The List of applicable fee calculations details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfFeeCalculationDetails"
                },
                "example": {
                  "values": [
                    {
                      "ruleType": "RuleType",
                      "ruleInformation": "Country : << unspecified / any >> , TransactionType: Buy, Counterparty : someName, SettlementCurrency : << unspecified / any >>, TransactionCurrency : << unspecified / any >>, ExecutionBroker : some, Custodian : some, Exchange : some",
                      "propertyKey": "Transaction/dummyPropertyScope/dummyPropertyCode",
                      "calculationMethod": "Calculation Method",
                      "amount": 0.5
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfFeeCalculationDetails"
                },
                "example": {
                  "values": [
                    {
                      "ruleType": "RuleType",
                      "ruleInformation": "Country : << unspecified / any >> , TransactionType: Buy, Counterparty : someName, SettlementCurrency : << unspecified / any >>, TransactionCurrency : << unspecified / any >>, ExecutionBroker : some, Custodian : some, Exchange : some",
                      "propertyKey": "Transaction/dummyPropertyScope/dummyPropertyCode",
                      "calculationMethod": "Calculation Method",
                      "amount": 0.5
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfFeeCalculationDetails"
                },
                "example": {
                  "values": [
                    {
                      "ruleType": "RuleType",
                      "ruleInformation": "Country : << unspecified / any >> , TransactionType: Buy, Counterparty : someName, SettlementCurrency : << unspecified / any >>, TransactionCurrency : << unspecified / any >>, ExecutionBroker : some, Custodian : some, Exchange : some",
                      "propertyKey": "Transaction/dummyPropertyScope/dummyPropertyCode",
                      "calculationMethod": "Calculation Method",
                      "amount": 0.5
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/instruments": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Upsert instruments",
        "description": "Create or update one or more instruments in the instrument master. An instrument is updated\r\nif it already exists and created if it does not.\r\n            \r\nIn the request, each instrument definition should be keyed by a unique correlation ID. This ID is ephemeral\r\nand not stored by LUSID. It serves only to easily identify each instrument in the response.\r\n            \r\nNote that an instrument must have at least one unique identifier, which is a combination of a type\r\n(such as 'Figi') and a value (such as 'BBG000BS1N49'). In addition, a random value is automatically\r\ngenerated for a LUSID Instrument ID (LUID) unique type by the system. For more information, see\r\nhttps://support.lusid.com/knowledgebase/article/KA-01862.\r\n            \r\nThe response returns both the collection of successfully created or updated instruments, as well as those\r\nthat failed. For each failure, a reason is provided. It is important to check the failed set for\r\nunsuccessful results.\n\nThe maximum number of instruments that this method can upsert per request is 2,000.",
        "operationId": "UpsertInstruments",
        "requestBody": {
          "description": "The definitions of the instruments to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to create or update."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to create or update."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to create or update."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to create or update."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The successfully created or updated instruments along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] List instruments",
        "description": "List all the instruments in the instrument master.\r\n            \r\nTo retrieve a particular set of instruments instead, use the Get instruments endpoint.\n\nThe maximum number of instruments that this method can list per request is 2,000.",
        "operationId": "ListInstruments",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list instruments. Defaults to returning the latest\r\n             version of each instrument if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list instruments. Defaults to returning the latest\r\n             version of each instrument if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list instruments.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list instruments.\r\n             Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing instruments; this value is returned from\r\n             the previous call. If a pagination token is provided, the <i>sortBy</i>, <i>filter</i>, <i>effectiveAt</i> and\r\n             <i>asAt</i> fields must not have changed since the original request. Also, a <i>start</i> value cannot be\r\n             provided. For more information, see https://support.lusid.com/knowledgebase/article/KA-01915.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing instruments; this value is returned from\r\n             the previous call. If a pagination token is provided, the <i>sortBy</i>, <i>filter</i>, <i>effectiveAt</i> and\r\n             <i>asAt</i> fields must not have changed since the original request. Also, a <i>start</i> value cannot be\r\n             provided. For more information, see https://support.lusid.com/knowledgebase/article/KA-01915.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order results by particular fields. Use the '-' sign to denote descending order, for\r\n             example '-MyFieldName'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order results by particular fields. Use the '-' sign to denote descending order, for\r\n             example '-MyFieldName'.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Defaults to filtering out inactive instruments\r\n             (that is, those that have been deleted). For more information about filtering results,\r\n             see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Defaults to filtering out inactive instruments\r\n             (that is, those that have been deleted). For more information about filtering results,\r\n             see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "default": "State eq 'Active'",
              "nullable": true
            }
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto\r\n             instruments. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' domain to decorate onto\r\n             instruments. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instruments",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/$get": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get instruments",
        "description": "Retrieve the definition of one or more instruments, as identified by a collection of unique identifiers.\r\n            \r\nNote that to retrieve all the instruments in the instrument master, use the List instruments endpoint instead.",
        "operationId": "GetInstruments",
        "parameters": [
          {
            "name": "identifierType",
            "in": "query",
            "description": "The unique identifier type to use, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to use, for example 'Figi'."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n             Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n             Defaults to returning the latest version of each instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n             Defaults to returning the latest version of each instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto the instrument.\r\n             These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' domain to decorate onto the instrument.\r\n             These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "A list of one or more <i>identifierType</i> values to use to identify instruments.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of one or more <i>identifierType</i> values to use to identify instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of one or more <i>identifierType</i> values to use to identify instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of one or more <i>identifierType</i> values to use to identify instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of one or more <i>identifierType</i> values to use to identify instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested instruments which could be identified along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/$upsertproperties": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Upsert instruments properties",
        "description": "Create or update one or more properties for particular instruments.\r\n            \r\nEach instrument property is updated if it exists and created if it does not. For any failures, a reason\r\nis provided.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime from which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertInstrumentsProperties",
        "requestBody": {
          "description": "A list of instruments and associated instrument properties to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A list of instruments and associated instrument properties to create or update."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A list of instruments and associated instrument properties to create or update."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A list of instruments and associated instrument properties to create or update."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A list of instruments and associated instrument properties to create or update."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The asAt datetime at which the properties were created or updated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/identifierTypes": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Get instrument identifier types",
        "description": "Retrieve a list of all valid instrument identifier types and whether they are unique or not.\r\n            \r\nAn instrument must have a value for at least one unique identifier type (it can have more than one unique type and value).\r\nIn addition, a value is automatically generated for a LUSID Instrument ID (LUID) unique type by the system.\r\n            \r\nAn instrument can have values for multiple non-unique identifier types (or it can have zero non-unique types and values).",
        "operationId": "GetInstrumentIdentifierTypes",
        "responses": {
          "200": {
            "description": "A list of valid instrument identifier types.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get instrument",
        "description": "Retrieve the definition of a particular instrument, as identified by a particular unique identifier.",
        "operationId": "GetInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to use, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to use, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the instrument.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument. Defaults to\r\n            returning the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument. Defaults to\r\n            returning the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto the instrument.\r\n            These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' domain to decorate onto the instrument.\r\n            These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instrument.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Update instrument identifier",
        "description": "Create, update or delete a particular instrument identifier for an instrument.\r\n            \r\nTo delete the identifier, leave the value unspecified in the request. If not being deleted, the\r\nidentifier is updated if it exists and created if it does not.",
        "operationId": "UpdateInstrumentIdentifier",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The identifier to update or delete. This need not be the same value as the\r\n             'identifier' parameter used to retrieve the instrument.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated instrument definition with the identifier created, updated or deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Delete instrument",
        "description": "Delete a particular instrument, as identified by a particular instrument identifier.\r\n            \r\nOnce deleted, an instrument is marked as inactive and can no longer be referenced when creating or updating\r\ntransactions or holdings. You can still query existing transactions and holdings related to the\r\ndeleted instrument.",
        "operationId": "DeleteInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the instrument was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EXPERIMENTAL] Get instrument properties",
        "description": "List all the properties of a particular instrument, as identified by a particular unique identifier.",
        "operationId": "GetInstrumentProperties",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the instrument's properties.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the instrument's properties.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instrument's properties. Defaults to returning\r\n            the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the instrument's properties. Defaults to returning\r\n            the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified instrument",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentProperties"
                },
                "example": {
                  "properties": {
                    "instrument/MyScope/SomeInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    "instrument/MyScope/SomeOtherInstrumentProperty": {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2015-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2020-01-01T12:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/$delete": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EXPERIMENTAL] Delete instrument properties",
        "description": "Delete one or more properties from a particular instrument. If the properties are time-variant then an effective datetime from which\r\nto delete properties must be specified. If the properties are perpetual then it is invalid to specify an effective datetime for deletion.",
        "operationId": "DeleteInstrumentProperties",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "A list of property keys from the 'Instruments' domain whose properties to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "A list of property keys from the 'Instruments' domain whose properties to delete."
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "A list of property keys from the 'Instruments' domain whose properties to delete."
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "A list of property keys from the 'Instruments' domain whose properties to delete."
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "A list of property keys from the 'Instruments' domain whose properties to delete."
              },
              "example": [
                "Instrument/scope/market-sector",
                "Instrument/scope/tenor"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The asAt datetime at which properties were deleted.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/list": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EXPERIMENTAL] Get instrument properties (with Pagination)",
        "description": "List all the properties of a particular instrument, as identified by a particular unique identifier.",
        "operationId": "ListInstrumentProperties",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the instrument's properties.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to list the instrument's properties.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instrument's properties. Defaults to returning\r\n            the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the instrument's properties. Defaults to returning\r\n            the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results per page to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results per page to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified instrument",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Instrument/MyScope/SomeInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomeOtherInstrumentProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/time-series": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Get instrument property time series",
        "description": "Retrieve the complete time series (history) for a particular property of an instrument.",
        "operationId": "GetInstrumentPropertyTimeSeries",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of a property from the 'Instrument' domain whose history to retrieve.\r\n            This must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "identifierEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the instrument from the identifier.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the instrument from the identifier.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument's property history. Defaults to\r\n            returning the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument's property history. Defaults to\r\n            returning the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. For more information about filtering,\r\n            see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the results. For more information about filtering,\r\n            see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties; this value is returned from\r\n            the previous call. If a pagination token is provided, the <i>filter</i>, <i>effectiveAt</i> and\r\n            <i>asAt</i> fields must not have changed since the original request. For more information, see\r\n            https://support.lusid.com/knowledgebase/article/KA-01915.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties; this value is returned from\r\n            the previous call. If a pagination token is provided, the <i>filter</i>, <i>effectiveAt</i> and\r\n            <i>asAt</i> fields must not have changed since the original request. For more information, see\r\n            https://support.lusid.com/knowledgebase/article/KA-01915.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities": {
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Upsert Legal Entity",
        "description": "Create or update a legal entity",
        "operationId": "UpsertLegalEntity",
        "requestBody": {
          "description": "Request to create or update a legal entity.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created or updated legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] List Legal Entities",
        "description": "List legal entities which has identifier of specific identifier type's scope and code, and satisfies filter criteria.",
        "operationId": "ListLegalEntities",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Legal Entities with specified identifier type",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Get Legal Entity",
        "description": "Retrieve the definition of a legal entity.",
        "operationId": "GetLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for found legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for found legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Delete Legal Entity",
        "description": "Delete a legal entity. Deletion will be valid from the legal entity's creation datetime.\r\nThis means that the legal entity will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "The scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "The scope of the legal entity identifier type."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "The code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "The code of the legal entity identifier type."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/metadata": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get Access Metadata rules for a Legal Entity",
        "description": "Pass the Scope and Code of the Legal Entity identifier along with the Legal Entity code parameter to retrieve the associated Access Metadata",
        "operationId": "GetAllLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the Legal Entity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/metadata/{metadataKey}": {
      "put": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Legal Entity Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Legal Entity Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Legal Entity Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to upsert the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Legal Entity Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Legal Entity",
        "description": "Get a specific Legal Entity Access Metadata by specifying the corresponding identifier parts and Legal Entity code\r\n            \r\nNo matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry",
        "operationId": "GetLegalEntityAccessMetadataByKey",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Legal Entity access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Delete a Legal Entity Access Metadata entry",
        "description": "Deletes the Legal Entity Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Access Metadata with the given metadataKey has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/properties": {
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Delete Legal Entity Properties",
        "description": "Delete all properties that belong to the given property keys of the legal entity.",
        "operationId": "DeleteLegalEntityProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the legal entities properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"LegalEntity/CompanyDetails/Role\". Each property must be from the \"LegalEntity\" domain. Properties or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the legal entities properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"LegalEntity/CompanyDetails/Role\". Each property must be from the \"LegalEntity\" domain. Properties or identifiers not specified in request will not be changed."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get Legal Entity Property Time Series",
        "description": "List the complete time series of a legal entity property.",
        "operationId": "GetLegalEntityPropertyTimeSeries",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the legal entity.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".\r\n            Each property must be from the \"LegalEntity\" domain.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/relations": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get Relations for Legal Entity",
        "description": "Get relations for the specified Legal Entity",
        "operationId": "GetLegalEntityRelations",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the legal entity's relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the legal entity's relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specific legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/relationships": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EXPERIMENTAL] Get Relationships for Legal Entity",
        "description": "Get Relationships for the specified Legal Entity",
        "operationId": "GetLegalEntityRelationships",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/login/saml/{domain}": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Get SAML Identity Provider",
        "description": "Get the unique identifier for the SAML 2.0 Identity Provider to be used for domain.",
        "operationId": "GetSamlIdentityProviderId",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain that the user will be logging in to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The domain that the user will be logging in to",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ID of the SAML Identity Provider to be used (may be null)",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/metadata/access/resources": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Get resources available for access control",
        "description": "Get the comprehensive set of resources that are available for access control",
        "operationId": "ListAccessControlledResources",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/downloads/exceladdin": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Download Excel Addin",
        "description": "Download the LUSID Excel Addin for Microsoft Excel. Not providing a specific value will return the latest version being returned",
        "operationId": "GetExcelAddin",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The requested version of the Excel plugin",
            "schema": {
              "type": "string",
              "description": "The requested version of the Excel plugin",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/quotes/rules": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EXPERIMENTAL] Get a quote access metadata rule",
        "description": "Get a specific quote access metadata rule by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetQuotesAccessMetadataRule",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "The Provider of the rule",
            "schema": {
              "type": "string",
              "description": "The Provider of the rule",
              "nullable": true
            }
          },
          {
            "name": "priceSource",
            "in": "query",
            "description": "The PriceSource of the rule",
            "schema": {
              "type": "string",
              "description": "The PriceSource of the rule",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdType",
            "in": "query",
            "description": "The InstrumentIdType of the rule",
            "schema": {
              "type": "string",
              "description": "The InstrumentIdType of the rule",
              "nullable": true
            }
          },
          {
            "name": "instrumentId",
            "in": "query",
            "description": "The InstrumentId of the rule",
            "schema": {
              "type": "string",
              "description": "The InstrumentId of the rule",
              "nullable": true
            }
          },
          {
            "name": "quoteType",
            "in": "query",
            "description": "The QuoteType of the rule",
            "schema": {
              "type": "string",
              "description": "The QuoteType of the rule",
              "nullable": true
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The Field of the rule",
            "schema": {
              "type": "string",
              "description": "The Field of the rule",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the rule",
            "schema": {
              "type": "string",
              "description": "The effective date of the rule",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the access metadata rule. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the access metadata rule. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Quote Access Metadata Rule or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/metadata/quotes/rules/{scope}": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EXPERIMENTAL] List all quote access metadata rules in a scope",
        "description": "Get all the quote access metadata rules in the specified scope",
        "operationId": "ListQuotesAccessMetadataRules",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the access metadata rule. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the access metadata rule. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The filtered list of results",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuoteAccessMetadataRule"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuoteAccessMetadataRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuoteAccessMetadataRule"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Quote Access Metadata Rule. This creates or updates the data in LUSID.",
        "description": "Update or insert one Quote Access Metadata Rule in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n\r\nThe response will return the successfully updated or inserted Quote Access Metadata Rule or failure message if unsuccessful\r\n\r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a key can exists with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched",
        "operationId": "UpsertQuoteAccessMetadataRule",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the Quote Access Metadata Rule.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the Quote Access Metadata Rule."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will effective from",
            "schema": {
              "type": "string",
              "description": "The date this rule will effective from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Quote Access Metadata Rule to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertQuoteAccessMetadataRuleRequest"
              },
              "example": {
                "id": {
                  "provider": "ExampleDataProvider",
                  "field": "ExampleQuoteField"
                },
                "metadata": {
                  "informationClassification": [
                    {
                      "value": "Public"
                    }
                  ],
                  "region": [
                    {
                      "value": "EMEA"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertQuoteAccessMetadataRuleRequest"
              },
              "example": {
                "id": {
                  "provider": "ExampleDataProvider",
                  "field": "ExampleQuoteField"
                },
                "metadata": {
                  "informationClassification": [
                    {
                      "value": "Public"
                    }
                  ],
                  "region": [
                    {
                      "value": "EMEA"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertQuoteAccessMetadataRuleRequest"
              },
              "example": {
                "id": {
                  "provider": "ExampleDataProvider",
                  "field": "ExampleQuoteField"
                },
                "metadata": {
                  "informationClassification": [
                    {
                      "value": "Public"
                    }
                  ],
                  "region": [
                    {
                      "value": "EMEA"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertQuoteAccessMetadataRuleRequest"
              },
              "example": {
                "id": {
                  "provider": "ExampleDataProvider",
                  "field": "ExampleQuoteField"
                },
                "metadata": {
                  "informationClassification": [
                    {
                      "value": "Public"
                    }
                  ],
                  "region": [
                    {
                      "value": "EMEA"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EXPERIMENTAL] Delete a Quote Access Metadata Rule",
        "description": "Delete the Quote Access Metadata Rule that exactly matches the provided identifier parts",
        "operationId": "DeleteQuoteAcccesMetadataRule",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "The Provider of the rule",
            "schema": {
              "type": "string",
              "description": "The Provider of the rule",
              "nullable": true
            }
          },
          {
            "name": "priceSource",
            "in": "query",
            "description": "The PriceSource of the rule",
            "schema": {
              "type": "string",
              "description": "The PriceSource of the rule",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdType",
            "in": "query",
            "description": "The InstrumentIdType of the rule",
            "schema": {
              "type": "string",
              "description": "The InstrumentIdType of the rule",
              "nullable": true
            }
          },
          {
            "name": "instrumentId",
            "in": "query",
            "description": "The InstrumentId of the rule",
            "schema": {
              "type": "string",
              "description": "The InstrumentId of the rule",
              "nullable": true
            }
          },
          {
            "name": "quoteType",
            "in": "query",
            "description": "The QuoteType of the rule",
            "schema": {
              "type": "string",
              "description": "The QuoteType of the rule",
              "nullable": true
            }
          },
          {
            "name": "field",
            "in": "query",
            "description": "The Field of the rule",
            "schema": {
              "type": "string",
              "description": "The Field of the rule",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The rule that has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccessMetadataRule"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/metadata/versions": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Get LUSID versions",
        "description": "Get the semantic versions associated with LUSID and its ecosystem",
        "operationId": "GetLusidVersions",
        "responses": {
          "200": {
            "description": "Collection of versions associated with LUSID",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/orderinstructions": {
      "get": {
        "tags": [
          "OrderInstructions"
        ],
        "summary": "[EXPERIMENTAL] List OrderInstructions",
        "description": "Fetch the last pre-AsAt date version of each orderInstruction in scope (does not fetch the entire history).",
        "operationId": "ListOrderInstructions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the orderInstruction. Defaults to return the latest version of the orderInstruction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the orderInstruction. Defaults to return the latest version of the orderInstruction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing orderInstructions from a previous call to list orderInstructions.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing orderInstructions from a previous call to list orderInstructions.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"OrderInstruction\" domain to decorate onto each orderInstruction.\r\n                These take the format {domain}/{scope}/{code} e.g. \"OrderInstruction/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"OrderInstruction\" domain to decorate onto each orderInstruction.\r\n                These take the format {domain}/{scope}/{code} e.g. \"OrderInstruction/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OrderInstructions in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrderInstruction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrderInstruction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrderInstruction"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "OrderInstructions"
        ],
        "summary": "[EXPERIMENTAL] Upsert OrderInstruction",
        "description": "Upsert; update existing orderInstructions with given ids, or create new orderInstructions otherwise.",
        "operationId": "UpsertOrderInstructions",
        "requestBody": {
          "description": "The collection of orderInstruction requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInstructionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PACK00000123"
                    },
                    "properties": {
                      "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                        "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInstructionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PACK00000123"
                    },
                    "properties": {
                      "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                        "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInstructionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PACK00000123"
                    },
                    "properties": {
                      "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                        "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInstructionSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PACK00000123"
                    },
                    "properties": {
                      "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                        "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of orderInstructions.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrderInstruction"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PACK00000123"
                      },
                      "properties": {
                        "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                          "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrderInstruction"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PACK00000123"
                      },
                      "properties": {
                        "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                          "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrderInstruction"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PACK00000123"
                      },
                      "properties": {
                        "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                          "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/orderinstructions/{scope}/{code}": {
      "get": {
        "tags": [
          "OrderInstructions"
        ],
        "summary": "[EXPERIMENTAL] Get OrderInstruction",
        "description": "Fetch a OrderInstruction that matches the specified identifier",
        "operationId": "GetOrderInstruction",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the orderInstruction belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the orderInstruction belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The orderInstruction's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The orderInstruction's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the orderInstruction. Defaults to return the latest version of the orderInstruction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the orderInstruction. Defaults to return the latest version of the orderInstruction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"OrderInstruction\" domain to decorate onto the orderInstruction.\r\n            These take the format {domain}/{scope}/{code} e.g. \"OrderInstruction/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"OrderInstruction\" domain to decorate onto the orderInstruction.\r\n            These take the format {domain}/{scope}/{code} e.g. \"OrderInstruction/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The orderInstruction matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInstruction"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PACK00000123"
                  },
                  "properties": {
                    "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                      "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInstruction"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PACK00000123"
                  },
                  "properties": {
                    "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                      "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderInstruction"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PACK00000123"
                  },
                  "properties": {
                    "orderInstruction/MyScope/SomeOrderInstructionProperty": {
                      "key": "OrderInstruction/MyScope/SomeOrderInstructionProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "OrderInstructions"
        ],
        "summary": "[EXPERIMENTAL] Delete orderInstruction",
        "description": "Delete an orderInstruction. Deletion will be valid from the orderInstruction's creation datetime.\r\nThis means that the orderInstruction will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteOrderInstruction",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The orderInstruction scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The orderInstruction scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The orderInstruction's code. This, together with the scope uniquely identifies the orderInstruction to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The orderInstruction's code. This, together with the scope uniquely identifies the orderInstruction to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an orderInstruction.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] List Orders",
        "description": "Fetch the last pre-AsAt date version of each order in scope (does not fetch the entire history).",
        "operationId": "ListOrders",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing orders from a previous call to list orders.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing orders from a previous call to list orders.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Orders\" domain to decorate onto each order.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Orders\" domain to decorate onto each order.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Orders in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] Upsert Order",
        "description": "Upsert; update existing orders with given ids, or create new orders otherwise.",
        "operationId": "UpsertOrders",
        "requestBody": {
          "description": "The collection of order requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ Package"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ Package"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ Package"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ Package"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of orders.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ Package"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ Package"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ Package"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/orders/{scope}/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] Get Order",
        "description": "Fetch an Order that matches the specified identifier",
        "operationId": "GetOrder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the order belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the order belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The order's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Orders\" domain to decorate onto the order.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Orders\" domain to decorate onto the order.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The order matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ Package"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ Package"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ Package"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] Delete order",
        "description": "Delete an order. Deletion will be valid from the order's creation datetime.\r\nThis means that the order will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteOrder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The order scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The order's code. This, together with the scope uniquely identifies the order to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order's code. This, together with the scope uniquely identifies the order to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an order.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "[EXPERIMENTAL] List Packages",
        "description": "Fetch the last pre-AsAt date version of each package in scope (does not fetch the entire history).",
        "operationId": "ListPackages",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the package. Defaults to return the latest version of the package if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the package. Defaults to return the latest version of the package if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing packages from a previous call to list packages.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing packages from a previous call to list packages.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Package\" domain to decorate onto each package.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Package/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Package\" domain to decorate onto each package.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Package/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Packages in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPackage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPackage"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Packages"
        ],
        "summary": "[EXPERIMENTAL] Upsert Package",
        "description": "Upsert; update existing packages with given ids, or create new packages otherwise.",
        "operationId": "UpsertPackages",
        "requestBody": {
          "description": "The collection of package requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PackageSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PACK00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "ORDER00000123"
                      }
                    ],
                    "orderInstructionIds": [
                      {
                        "scope": "MyScope",
                        "code": "INSTR00000123"
                      }
                    ],
                    "properties": {
                      "package/MyScope/SomePackageProperty": {
                        "key": "Package/MyScope/SomePackageProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PACK00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "ORDER00000123"
                      }
                    ],
                    "orderInstructionIds": [
                      {
                        "scope": "MyScope",
                        "code": "INSTR00000123"
                      }
                    ],
                    "properties": {
                      "package/MyScope/SomePackageProperty": {
                        "key": "Package/MyScope/SomePackageProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PACK00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "ORDER00000123"
                      }
                    ],
                    "orderInstructionIds": [
                      {
                        "scope": "MyScope",
                        "code": "INSTR00000123"
                      }
                    ],
                    "properties": {
                      "package/MyScope/SomePackageProperty": {
                        "key": "Package/MyScope/SomePackageProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PackageSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PACK00000123"
                    },
                    "orderIds": [
                      {
                        "scope": "MyScope",
                        "code": "ORDER00000123"
                      }
                    ],
                    "orderInstructionIds": [
                      {
                        "scope": "MyScope",
                        "code": "INSTR00000123"
                      }
                    ],
                    "properties": {
                      "package/MyScope/SomePackageProperty": {
                        "key": "Package/MyScope/SomePackageProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of packages.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPackage"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PACK00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "orderInstructionIds": [
                        {
                          "scope": "MyScope",
                          "code": "INSTR00000123"
                        }
                      ],
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPackage"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PACK00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "orderInstructionIds": [
                        {
                          "scope": "MyScope",
                          "code": "INSTR00000123"
                        }
                      ],
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPackage"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PACK00000123"
                      },
                      "orderIds": [
                        {
                          "scope": "MyScope",
                          "code": "ORDER00000123"
                        }
                      ],
                      "orderInstructionIds": [
                        {
                          "scope": "MyScope",
                          "code": "INSTR00000123"
                        }
                      ],
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/packages/{scope}/{code}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "[EXPERIMENTAL] Get Package",
        "description": "Fetch a Package that matches the specified identifier",
        "operationId": "GetPackage",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the package belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the package belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The package's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The package's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the package. Defaults to return the latest version of the package if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the package. Defaults to return the latest version of the package if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Package\" domain to decorate onto the package.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Package/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Package\" domain to decorate onto the package.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Package/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The package matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Package"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PACK00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "orderInstructionIds": [
                    {
                      "scope": "MyScope",
                      "code": "INSTR00000123"
                    }
                  ],
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Package"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PACK00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "orderInstructionIds": [
                    {
                      "scope": "MyScope",
                      "code": "INSTR00000123"
                    }
                  ],
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Package"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PACK00000123"
                  },
                  "orderIds": [
                    {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  ],
                  "orderInstructionIds": [
                    {
                      "scope": "MyScope",
                      "code": "INSTR00000123"
                    }
                  ],
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Packages"
        ],
        "summary": "[EXPERIMENTAL] Delete package",
        "description": "Delete an package. Deletion will be valid from the package's creation datetime.\r\nThis means that the package will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePackage",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The package scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The package scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The package's code. This, together with the scope uniquely identifies the package to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The package's code. This, together with the scope uniquely identifies the package to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an package.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/participations": {
      "get": {
        "tags": [
          "Participations"
        ],
        "summary": "[EXPERIMENTAL] List Participations",
        "description": "Fetch the last pre-AsAt date version of each Participation in scope (does not fetch the entire history).",
        "operationId": "ListParticipations",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the participation. Defaults to return the latest version of the participation if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the participation. Defaults to return the latest version of the participation if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing participations from a previous call to list participations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing participations from a previous call to list participations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Participation\" domain to decorate onto each participation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Participation/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Participation\" domain to decorate onto each participation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Participation/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Participations in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfParticipation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfParticipation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfParticipation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Participations"
        ],
        "summary": "[EXPERIMENTAL] Upsert Participation",
        "description": "Upsert; update existing participations with given ids, or create new participations otherwise.",
        "operationId": "UpsertParticipations",
        "requestBody": {
          "description": "The collection of participation requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipationSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PART00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "orderId": {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipationSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PART00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "orderId": {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipationSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PART00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "orderId": {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipationSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PART00000123"
                    },
                    "placementId": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "orderId": {
                      "scope": "MyScope",
                      "code": "ORDER00000123"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of participations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfParticipation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfParticipation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfParticipation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "BLOC00000123"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/participations/{scope}/{code}": {
      "get": {
        "tags": [
          "Participations"
        ],
        "summary": "[EXPERIMENTAL] Get Participation",
        "description": "Fetch a Participation that matches the specified identifier",
        "operationId": "GetParticipation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the participation belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the participation belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The participation's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The participation's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the participation. Defaults to return the latest version of the participation if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the participation. Defaults to return the latest version of the participation if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Participation\" domain to decorate onto the participation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Participation/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Participation\" domain to decorate onto the participation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Participation/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The participation matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Participation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Participation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Participation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "BLOC00000123"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Participations"
        ],
        "summary": "[EXPERIMENTAL] Delete participation",
        "description": "Delete an participation. Deletion will be valid from the participation's creation datetime.\r\nThis means that the participation will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteParticipation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The participation scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The participation scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The participation's code. This, together with the scope uniquely identifies the participation to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The participation's code. This, together with the scope uniquely identifies the participation to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an participation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Upsert Person",
        "description": "Create or update a new person under the specified scope.",
        "operationId": "UpsertPerson",
        "requestBody": {
          "description": "Request to create or update a person.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "person/PersonalDetails/Name": [
                    {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  ],
                  "person/CompanyDetails/Role": [
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "SalesRepresentative"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "CustomerServiceRepresentative"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "person/PersonalDetails/Name": [
                    {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  ],
                  "person/CompanyDetails/Role": [
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "SalesRepresentative"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "CustomerServiceRepresentative"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "person/PersonalDetails/Name": [
                    {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  ],
                  "person/CompanyDetails/Role": [
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "SalesRepresentative"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "CustomerServiceRepresentative"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonRequest"
              },
              "example": {
                "identifiers": {
                  "person/HrSystem1/InternalId": {
                    "key": "Person/HrSystem1/InternalId",
                    "value": {
                      "labelValue": "XY10001111"
                    }
                  },
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453456"
                    }
                  },
                  "person/CompanyIntranet/LoginId": {
                    "key": "Person/CompanyIntranet/LoginId",
                    "value": {
                      "labelValue": "johnsmith001"
                    }
                  }
                },
                "properties": {
                  "person/PersonalDetails/Name": [
                    {
                      "key": "Person/PersonalDetails/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  ],
                  "person/CompanyDetails/Role": [
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "SalesRepresentative"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    {
                      "key": "Person/CompanyDetails/Role",
                      "value": {
                        "labelValue": "CustomerServiceRepresentative"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                },
                "displayName": "Person1DisplayName",
                "description": "Person1Description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created or updated person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] List Persons",
        "description": "List persons which have identifiers of a specific identifier type's scope and code, and satisfies filter criteria.",
        "operationId": "ListPersons",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the LUPID, use \"lusidPersonId eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the LUPID, use \"lusidPersonId eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Person\" domain to decorate onto each person.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Person\" domain to decorate onto each person.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "People in specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId1",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "John Smith"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "SalesRepresentative"
                            },
                            "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                          },
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "CustomerServiceRepresentative"
                            },
                            "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId2",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "Emily Evans"
                            }
                          }
                        ],
                        "person/ContactDetails/Phone": [
                          {
                            "key": "Person/ContactDetails/Phone",
                            "value": {
                              "labelValue": "01005675678"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "Manager"
                            },
                            "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId1",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "John Smith"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "SalesRepresentative"
                            },
                            "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                          },
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "CustomerServiceRepresentative"
                            },
                            "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId2",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "Emily Evans"
                            }
                          }
                        ],
                        "person/ContactDetails/Phone": [
                          {
                            "key": "Person/ContactDetails/Phone",
                            "value": {
                              "labelValue": "01005675678"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "Manager"
                            },
                            "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPerson"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "Person1DisplayName",
                      "description": "Person1Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId1",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10001111"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "HSI3453456"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "johnsmith001"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "John Smith"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "SalesRepresentative"
                            },
                            "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                          },
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "CustomerServiceRepresentative"
                            },
                            "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "Person2DisplayName",
                      "description": "Person2Description",
                      "href": "https://example.com",
                      "lusidPersonId": "UniqueLusidPersonId2",
                      "identifiers": {
                        "person/HrSystem1/InternalId": {
                          "key": "Person/HrSystem1/InternalId",
                          "value": {
                            "labelValue": "XY10008377"
                          }
                        },
                        "person/PayrollSystem1/Id": {
                          "key": "Person/PayrollSystem1/Id",
                          "value": {
                            "labelValue": "LFK9172001"
                          }
                        },
                        "person/CompanyIntranet/LoginId": {
                          "key": "Person/CompanyIntranet/LoginId",
                          "value": {
                            "labelValue": "emilyevans002"
                          }
                        }
                      },
                      "properties": {
                        "person/PersonalDetails/Name": [
                          {
                            "key": "Person/PersonalDetails/Name",
                            "value": {
                              "labelValue": "Emily Evans"
                            }
                          }
                        ],
                        "person/ContactDetails/Phone": [
                          {
                            "key": "Person/ContactDetails/Phone",
                            "value": {
                              "labelValue": "01005675678"
                            }
                          }
                        ],
                        "person/CompanyDetails/Role": [
                          {
                            "key": "Person/CompanyDetails/Role",
                            "value": {
                              "labelValue": "Manager"
                            },
                            "effectiveFrom": "2018-04-01T00:00:00.0000000+00:00"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Person",
        "description": "Retrieve the definition of a person.",
        "operationId": "GetPerson",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Person\" domain to decorate onto each person.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\". Defaults to include all properties if not specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Person\" domain to decorate onto each person.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Person/ContactDetails/Address\". Defaults to include all properties if not specified.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the person. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the person. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the person. Defaults to return the latest version of the person if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the person. Defaults to return the latest version of the person if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested person definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/PersonalDetails/Name": [
                      {
                        "key": "Person/PersonalDetails/Name",
                        "value": {
                          "labelValue": "John Smith"
                        }
                      }
                    ],
                    "person/CompanyDetails/Role": [
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "SalesRepresentative"
                        },
                        "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "key": "Person/CompanyDetails/Role",
                        "value": {
                          "labelValue": "CustomerServiceRepresentative"
                        },
                        "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Delete person",
        "description": "Delete a person. Deletion will be valid from the person's creation datetime.\r\nThis means that the person will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePerson",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "The scope of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "The scope of the person identifier type."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "The code of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "The code of the person identifier type."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type scope and code. This together with defined\r\n            identifier type uniquely identifies the person to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "Code of the person under specified identifier type scope and code. This together with defined\r\n            identifier type uniquely identifies the person to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/identifiers": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Set Person Identifiers",
        "description": "Set identifiers of the person.",
        "operationId": "SetPersonIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request containing identifiers to set for the person. Identifiers not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "person/PayrollSystem1/Id": {
                    "key": "Person/PayrollSystem1/Id",
                    "value": {
                      "labelValue": "HSI3453333"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Person with updated identifiers.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1DisplayName",
                  "description": "Person1Description",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453333"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Delete Person Identifiers",
        "description": "Delete identifiers that belong to the given property keys of the person.",
        "operationId": "DeletePersonIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the identifiers to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Identifiers or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the identifiers to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Identifiers or identifiers not specified in request will not be changed."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the identifiers. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime of identifiers are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete the identifiers. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime of identifiers are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the identifiers were deleted from the specified person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/metadata": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Access Metadata rules for a Person",
        "description": "Pass the Scope and Code of the Person identifier along with the person code parameter to retrieve the associated Access Metadata",
        "operationId": "GetAllPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the Person or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/metadata/{metadataKey}": {
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Person Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Person Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Person Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to upsert the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Person Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Person",
        "description": "Get a specific Person Access Metadata by specifying the corresponding identifier parts and Person code\r\n            \r\nNo matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry",
        "operationId": "GetPersonAccessMetadataByKey",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Person access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Delete a Person Access Metadata entry",
        "description": "Deletes the Person Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeletePersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Access Metadata with the given metadataKey has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/properties": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Set Person Properties",
        "description": "Set properties of the person.",
        "operationId": "SetPersonProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request containing properties to set for the person. Properties not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "person/ContactDetails/Phone": [
                    {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "person/ContactDetails/Phone": [
                    {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "person/ContactDetails/Phone": [
                    {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPersonPropertiesRequest"
              },
              "example": {
                "properties": {
                  "person/ContactDetails/Phone": [
                    {
                      "key": "Person/ContactDetails/Phone",
                      "value": {
                        "labelValue": "01156786789"
                      },
                      "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Person with updated properties or identifiers.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                },
                "example": {
                  "displayName": "Person1Description",
                  "description": "Person1DisplayName",
                  "href": "https://example.com",
                  "lusidPersonId": "UniqueLusidPersonId1",
                  "identifiers": {
                    "person/HrSystem1/InternalId": {
                      "key": "Person/HrSystem1/InternalId",
                      "value": {
                        "labelValue": "XY10001111"
                      }
                    },
                    "person/PayrollSystem1/Id": {
                      "key": "Person/PayrollSystem1/Id",
                      "value": {
                        "labelValue": "HSI3453456"
                      }
                    },
                    "person/CompanyIntranet/LoginId": {
                      "key": "Person/CompanyIntranet/LoginId",
                      "value": {
                        "labelValue": "johnsmith001"
                      }
                    }
                  },
                  "properties": {
                    "person/ContactDetails/Phone": [
                      {
                        "key": "Person/ContactDetails/Phone",
                        "value": {
                          "labelValue": "01156786789"
                        },
                        "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-07-01T00:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Delete Person Properties",
        "description": "Delete all properties that belong to the given property keys of the person.",
        "operationId": "DeletePersonProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the person's properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Properties or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the person's properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". Each property must be from the \"Person\" domain. Properties or identifiers not specified in request will not be changed."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified person",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Person Property Time Series",
        "description": "List the complete time series of a person property.",
        "operationId": "GetPersonPropertyTimeSeries",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\".\r\n            Each property must be from the \"Person\" domain.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the person's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/relations": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Relations for Person",
        "description": "Get relations for the specified person.",
        "operationId": "GetPersonRelations",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the person's relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the person's relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specified person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/relationships": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EXPERIMENTAL] Get Relationships for Person",
        "description": "Get relationships for the specified person.",
        "operationId": "GetPersonRelationships",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the person's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/placements": {
      "get": {
        "tags": [
          "Placements"
        ],
        "summary": "[EXPERIMENTAL] List Placements",
        "description": "Fetch the last pre-AsAt date version of each placement in scope (does not fetch the entire history).",
        "operationId": "ListPlacements",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the placement. Defaults to return the latest version of the placement if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the placement. Defaults to return the latest version of the placement if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing placements from a previous call to list placements.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing placements from a previous call to list placements.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Placement\" domain to decorate onto each placement.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Placement/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Placement\" domain to decorate onto each placement.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Placement/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Placements in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPlacement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPlacement"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPlacement"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Placements"
        ],
        "summary": "[EXPERIMENTAL] Upsert Placement",
        "description": "Upsert; update existing placements with given ids, or create new placements otherwise.",
        "operationId": "UpsertPlacements",
        "requestBody": {
          "description": "The collection of placement requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PlacementSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "blockIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOCK00000123"
                      }
                    ],
                    "properties": {
                      "placement/MyScope/SomePlacementProperty": {
                        "key": "Placement/MyScope/SomePlacementProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "timeInForce": "GoodTilCancel",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 124335.33,
                      "currency": "USD"
                    },
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlacementSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "blockIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOCK00000123"
                      }
                    ],
                    "properties": {
                      "placement/MyScope/SomePlacementProperty": {
                        "key": "Placement/MyScope/SomePlacementProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "timeInForce": "GoodTilCancel",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 124335.33,
                      "currency": "USD"
                    },
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlacementSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "blockIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOCK00000123"
                      }
                    ],
                    "properties": {
                      "placement/MyScope/SomePlacementProperty": {
                        "key": "Placement/MyScope/SomePlacementProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "timeInForce": "GoodTilCancel",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 124335.33,
                      "currency": "USD"
                    },
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlacementSetRequest"
              },
              "example": {
                "requests": [
                  {
                    "id": {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    },
                    "blockIds": [
                      {
                        "scope": "MyScope",
                        "code": "BLOCK00000123"
                      }
                    ],
                    "properties": {
                      "placement/MyScope/SomePlacementProperty": {
                        "key": "Placement/MyScope/SomePlacementProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "state": "New",
                    "side": "Buy",
                    "timeInForce": "GoodTilCancel",
                    "type": "Limit",
                    "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                    "limitPrice": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "stopPrice": {
                      "amount": 124335.33,
                      "currency": "USD"
                    },
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of placements.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPlacement"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "blockIds": [
                        {
                          "scope": "MyScope",
                          "code": "testBlock"
                        }
                      ],
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "timeInForce": "GoodTilCancel",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 51244.33,
                        "currency": "USD"
                      },
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPlacement"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "blockIds": [
                        {
                          "scope": "MyScope",
                          "code": "testBlock"
                        }
                      ],
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "timeInForce": "GoodTilCancel",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 51244.33,
                        "currency": "USD"
                      },
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPlacement"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "PLAC00000123"
                      },
                      "blockIds": [
                        {
                          "scope": "MyScope",
                          "code": "testBlock"
                        }
                      ],
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100.5,
                      "state": "New",
                      "side": "Buy",
                      "timeInForce": "GoodTilCancel",
                      "type": "Limit",
                      "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                      "limitPrice": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "stopPrice": {
                        "amount": 51244.33,
                        "currency": "USD"
                      },
                      "counterparty": "SomeCounterparty",
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/placements/{scope}/{code}": {
      "get": {
        "tags": [
          "Placements"
        ],
        "summary": "[EXPERIMENTAL] Get Placement",
        "description": "Fetch a Placement that matches the specified identifier",
        "operationId": "GetPlacement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the placement belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the placement belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The placement's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The placement's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the placement. Defaults to return the latest version of the placement if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the placement. Defaults to return the latest version of the placement if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Placement\" domain to decorate onto the placement.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Placement/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Placement\" domain to decorate onto the placement.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Placement/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The placement matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Placement"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "blockIds": [
                    {
                      "scope": "MyScope",
                      "code": "testBlock"
                    }
                  ],
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "timeInForce": "GoodTilCancel",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 51244.33,
                    "currency": "USD"
                  },
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Placement"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "blockIds": [
                    {
                      "scope": "MyScope",
                      "code": "testBlock"
                    }
                  ],
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "timeInForce": "GoodTilCancel",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 51244.33,
                    "currency": "USD"
                  },
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Placement"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "PLAC00000123"
                  },
                  "blockIds": [
                    {
                      "scope": "MyScope",
                      "code": "testBlock"
                    }
                  ],
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100.5,
                  "state": "New",
                  "side": "Buy",
                  "timeInForce": "GoodTilCancel",
                  "type": "Limit",
                  "createdDate": "2006-04-11T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "stopPrice": {
                    "amount": 51244.33,
                    "currency": "USD"
                  },
                  "counterparty": "SomeCounterparty",
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Placements"
        ],
        "summary": "[EXPERIMENTAL] Delete placement",
        "description": "Delete an placement. Deletion will be valid from the placement's creation datetime.\r\nThis means that the placement will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePlacement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The placement scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The placement scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The placement's code. This, together with the scope uniquely identifies the placement to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The placement's code. This, together with the scope uniquely identifies the placement to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an placement.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Create portfolio group",
        "description": "Create a portfolio group in a specific scope.",
        "operationId": "CreatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that the portfolio group will be created in.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope that the portfolio group will be created in.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition and details of the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] List portfolio groups",
        "description": "List all the portfolio groups in a single scope.",
        "operationId": "ListPortfolioGroups",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to list the portfolio groups in.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope to list the portfolio groups in.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio groups in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}": {
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Update portfolio group",
        "description": "Update the definition of a single portfolio group. Not all elements within a portfolio group definition are modifiable\r\ndue to the potential implications for data already stored against the portfolio group.",
        "operationId": "UpdatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to update the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to update the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to update the definition.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to update the definition.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The updated portfolio group definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated definition of the portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete portfolio group",
        "description": "Delete a single portfolio group. A portfolio group can be deleted while it still contains portfolios or sub groups.\r\nIn this case any portfolios or sub groups contained in this group will not be deleted, however they will no longer be grouped together by this portfolio group.\r\nThe deletion will be valid from the portfolio group's creation datetime, ie. the portfolio group will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to delete.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio group was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group",
        "description": "Retrieve the definition of a single portfolio group.",
        "operationId": "GetPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to retrieve the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio group definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/a2b": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get A2B data for a Portfolio Group",
        "description": "Get an A2B report for all Transaction Portfolios within the given portfolio group.",
        "operationId": "GetA2BDataForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to retrieve the A2B report for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to retrieve the A2B report for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to retrieve the A2B report for. Together with the scope this\r\n            uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to retrieve the A2B report for. Together with the scope this\r\n            uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested group A2B data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BDataRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BDataRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BDataRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "AnotherExample",
                        "code": "AnotherPortfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group commands",
        "description": "Gets all the commands that modified a single portfolio group.",
        "operationId": "GetPortfolioGroupCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the commands for.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the portfolio group to retrieve the commands for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/expansion": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group expansion",
        "description": "List all the portfolios in a group, including all portfolios within sub groups in the group. Each portfolio will be decorated with all of its properties unless a property filter is specified.",
        "operationId": "GetPortfolioGroupExpansion",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to expand.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The expanded portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/holdings": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get holdings for transaction portfolios in portfolio group",
        "description": "Get the holdings of transaction portfolios in specified portfolio group.",
        "operationId": "GetHoldingsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings of transaction portfolios in a specific version of portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/metadata": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get Access Metadata rules for Portfolio Group",
        "description": "Pass the scope and Portfolio Group code parameters to retrieve the associated Access Metadata",
        "operationId": "GetPortfolioGroupMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the portfolio group or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Portfolio Group",
        "description": "Get a specific Portfolio Group access metadata by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetPortfolioGroupAccessMetadataByKey",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the access metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the access metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the access metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the access metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Portfolio group access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Portfolio Group Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Portfolio Group Access Metadata Entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Portfolio Group Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the access metadata entry to upsert",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the access metadata entry to upsert"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will be effective from",
            "schema": {
              "type": "string",
              "description": "The date this rule will be effective from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Portfolio Group Access Metadata rule to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Delete a Portfolio Group Access Metadata entry",
        "description": "Deletes the Portfolio Group Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteKeyFromPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the Access Metadata entry to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the Access Metadata entry to delete"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Add portfolio to group",
        "description": "Add a single portfolio to a portfolio group.",
        "operationId": "AddPortfolioToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to add a portfolio to.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the portfolio will be added to the group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the portfolio will be added to the group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio to add to the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios/{portfolioScope}/{portfolioCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete portfolio from group",
        "description": "Remove a single portfolio from a portfolio group.",
        "operationId": "DeletePortfolioFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the portfolio from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to remove the portfolio from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "portfolioScope",
            "in": "path",
            "description": "The scope of the portfolio being removed from the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the portfolio being removed from the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the portfolio will be removed from the portfolio group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the portfolio will be removed from the portfolio group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the portfolio removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get group properties",
        "description": "List all the properties of a single portfolio group.",
        "operationId": "GetGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to list the properties for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to list the properties for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$delete": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete group properties",
        "description": "Delete one or more properties from a single portfolio group. If the properties are time variant then an effective date time from which the properties\r\nwill be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
        "operationId": "DeleteGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to delete properties from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$upsert": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Upsert group properties",
        "description": "Update or insert one or more properties onto a single group. A property will be updated if it\r\nalready exists and inserted if it does not. All properties must be of the domain 'PortfolioGroup'.\r\n            \r\nUpserting a property that exists for a group, with a null value, will delete the instance of the property for that group.\r\n\r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to update or insert the properties onto.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to update or insert the properties onto.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get the time series of a portfolio group property",
        "description": "List the complete time series of a portfolio group property.",
        "operationId": "GetPortfolioGroupPropertyTimeSeries",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".\r\n            Each property must be from the \"PortfolioGroup\" domain.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "portfolioGroupEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio group's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio group's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/relations": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get Relations for Portfolio Group",
        "description": "Get relations for the specified Portfolio Group",
        "operationId": "GetPortfolioGroupRelations",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specific portfolio group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/relationships": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EXPERIMENTAL] Get Relationships for Portfolio Group",
        "description": "Get relationships for the specified Portfolio Group",
        "operationId": "GetPortfolioGroupRelationships",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relationship. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relationship. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specific portfolio group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Add sub group to group",
        "description": "Add a portfolio group to a portfolio group as a sub group.",
        "operationId": "AddSubGroupToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio group to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to add a portfolio group to.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the sub group will be added to the group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the sub group will be added to the group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio group to add to the portfolio group as a sub group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio group as a sub group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups/{subgroupScope}/{subgroupCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete sub group from group",
        "description": "Remove a single portfolio group (sub group) from a portfolio group.",
        "operationId": "DeleteSubGroupFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the sub group from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to remove the sub group from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "subgroupScope",
            "in": "path",
            "description": "The scope of the sub group to remove from the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the sub group to remove from the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "subgroupCode",
            "in": "path",
            "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the sub group will be removed from the portfolio group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the sub group will be removed from the portfolio group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the sub group removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get transactions for transaction portfolios in a portfolio group",
        "description": "Get transactions for transaction portfolios in a portfolio group over a given interval of effective time. \r\n\r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "GetTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Build transactions for transaction portfolios in a portfolio group",
        "description": "Build transactions for transaction portfolios in a portfolio group over a given interval of effective time. \r\n\r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "BuildTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "List portfolios",
        "description": "List all the portfolios matching particular criteria.",
        "operationId": "ListPortfolios",
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to filter on the transaction type, specify \"type eq 'Transaction'\". For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the results.\r\n            For example, to filter on the transaction type, specify \"type eq 'Transaction'\". For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Expression specifying the criteria that the returned portfolios must meet. For example, to see which\r\n            portfolios have holdings in instruments with a LusidInstrumentId (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6',\r\n            specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
            "schema": {
              "type": "string",
              "description": "Expression specifying the criteria that the returned portfolios must meet. For example, to see which\r\n            portfolios have holdings in instruments with a LusidInstrumentId (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6',\r\n            specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolios",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/$reconcileholdings": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] Reconcile portfolio holdings",
        "description": "Reconcile the holdings of two portfolios.",
        "operationId": "ReconcileHoldings",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/$reconcileInline": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[BETA] Reconcile valuations performed on one or two sets of inline instruments using one or two configuration recipes.",
        "description": "Perform valuation of one or two set of inline instruments using different one or two configuration recipes. Produce a breakdown of the resulting differences in valuation.",
        "operationId": "ReconcileInline",
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPUSD",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "USD",
                        "refSpotRate": 1.5,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "right": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPJPY",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "JPY",
                        "refSpotRate": 132,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPUSD",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "USD",
                        "refSpotRate": 1.5,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "right": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPJPY",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "JPY",
                        "refSpotRate": 132,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPUSD",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "USD",
                        "refSpotRate": 1.5,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "right": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPJPY",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "JPY",
                        "refSpotRate": 132,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPUSD",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "USD",
                        "refSpotRate": 1.5,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "right": {
                  "recipeId": {
                    "scope": "MyScope",
                    "code": "default"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Value"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  },
                  "instruments": [
                    {
                      "quantity": 10000,
                      "holdingIdentifier": "fx-fwd-GBPJPY",
                      "instrument": {
                        "startDate": "2018-03-01T00:00:00.0000000+00:00",
                        "maturityDate": "2018-03-30T00:00:00.0000000+00:00",
                        "domAmount": 100,
                        "domCcy": "GBP",
                        "fgnAmount": -150,
                        "fgnCcy": "JPY",
                        "refSpotRate": 132,
                        "isNdf": false,
                        "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                        "instrumentType": "FxForward"
                      }
                    }
                  ]
                },
                "leftToRightMapping": [],
                "preserveKeys": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/portfolios/$reconcileValuation": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[BETA] Reconcile valuations performed on one or two sets of holdings using one or two configuration recipes.",
        "description": "Perform valuation of one or two set of holdings using different one or two configuration recipes. Produce a breakdown of the resulting differences in valuation.",
        "operationId": "ReconcileValuation",
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationsReconciliationRequest"
              },
              "example": {
                "left": {
                  "recipeId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "right": {
                  "recipeId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "asAt": "2018-03-05T00:00:00.0000000+00:00",
                  "metrics": [
                    {
                      "key": "Instrument/default/Name",
                      "op": "Value"
                    },
                    {
                      "key": "Holding/default/PV",
                      "op": "Sum"
                    }
                  ],
                  "groupBy": [
                    "Instrument/default/Name"
                  ],
                  "sort": [],
                  "reportCurrency": "USD",
                  "equipWithSubtotals": false,
                  "portfolioEntityIds": [
                    {
                      "scope": "PortfolioScope1",
                      "code": "MyPortfolioAbC",
                      "portfolioEntityType": "SinglePortfolio"
                    },
                    {
                      "scope": "PortfolioScope2",
                      "code": "MyPortfolioDeF",
                      "portfolioEntityType": "SinglePortfolio"
                    }
                  ],
                  "valuationSchedule": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "tenor": "1D",
                    "rollConvention": "F",
                    "holidayCalendars": [],
                    "valuationDateTimes": []
                  }
                },
                "leftToRightMapping": [],
                "preserveKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationReconciliation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/portfolios/preview/$reconcileholdings": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EXPERIMENTAL] Reconcile portfolio holdings with given tolerance",
        "description": "Reconcile the holdings of two portfolios.",
        "operationId": "ReconcileHoldingsPreview",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation. This request can take tolerance for units and cost.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequestPreview"
              },
              "example": {
                "tolerance": {
                  "/Holding/Units": {
                    "value": 0,
                    "type": "Absolute"
                  },
                  "/Holding/Cost": {
                    "value": 0,
                    "type": "Relative"
                  }
                },
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequestPreview"
              },
              "example": {
                "tolerance": {
                  "/Holding/Units": {
                    "value": 0,
                    "type": "Absolute"
                  },
                  "/Holding/Cost": {
                    "value": 0,
                    "type": "Relative"
                  }
                },
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequestPreview"
              },
              "example": {
                "tolerance": {
                  "/Holding/Units": {
                    "value": 0,
                    "type": "Absolute"
                  },
                  "/Holding/Cost": {
                    "value": 0,
                    "type": "Relative"
                  }
                },
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequestPreview"
              },
              "example": {
                "tolerance": {
                  "/Holding/Units": {
                    "value": 0,
                    "type": "Absolute"
                  },
                  "/Holding/Cost": {
                    "value": 0,
                    "type": "Relative"
                  }
                },
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "List portfolios for scope",
        "description": "List all the portfolios in a particular scope.",
        "operationId": "ListPortfoliosForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope whose portfolios to list.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope whose portfolios to list.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the results.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolios in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get portfolio",
        "description": "Retrieve the definition of a particular portfolio.",
        "operationId": "GetPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to returning the latest version of the portfolio definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to returning the latest version of the portfolio definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto the portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Portfolio' domain to decorate onto the portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete portfolio",
        "description": "Delete a particular portfolio.\r\n            \r\nThe deletion will take effect from the portfolio's creation datetime. This means that the portfolio will no longer exist at any effective datetime, as per the asAt datetime of deletion.",
        "operationId": "DeletePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Update portfolio",
        "description": "Update the definition of a particular portfolio.\r\n            \r\nNote that not all elements of a portfolio definition are\r\nmodifiable due to the potential implications for data already stored.",
        "operationId": "UpdatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n             LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n             LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated portfolio definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated definition of the portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] Get portfolio commands",
        "description": "Get all the commands that modified a particular portfolio, including any input transactions.",
        "operationId": "GetPortfolioCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to filter on the User ID, specify \"userId.id eq 'string'\".\r\n            For more information about filtering, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the results.\r\n            For example, to filter on the User ID, specify \"userId.id eq 'string'\".\r\n            For more information about filtering, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 500 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number. Defaults to 500 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/metadata": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get access metadata rules for a portfolio",
        "description": "Pass the scope and portfolio code parameters to retrieve the AccessMetadata associated with a portfolio",
        "operationId": "GetPortfolioMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the access metadata rule.",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the access metadata rule.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The filtered list of results",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get an entry identified by a metadataKey in the access metadata object",
        "description": "Get a specific portfolio access metadata rule by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetPortfoliosAccessMetadataByKey",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the rule",
            "schema": {
              "type": "string",
              "description": "The effective date of the rule",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Portfolio Access Metadata Rule or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Portfolio Access Metadata Rule associated with specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Portfolio Access Metadata Rule in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n\r\nThe response will return the successfully updated or inserted Portfolio Access Metadata Rule or failure message if unsuccessful\r\n\r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exists with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched",
        "operationId": "UpsertPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the Portfolio Access Metadata Rule.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the Portfolio Access Metadata Rule."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the access metadata to upsert",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the access metadata to upsert"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will effective from",
            "schema": {
              "type": "string",
              "description": "The date this rule will effective from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The Portfolio Access Metadata Rule to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Delete a Portfolio Access Metadata Rule",
        "description": "Delete the Portfolio Access Metadata Rule that exactly matches the provided identifier parts",
        "operationId": "DeleteKeyFromPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "The metadataKey identifying the access metadata entry to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The metadataKey identifying the access metadata entry to delete"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The rule that has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get portfolio properties",
        "description": "List all the properties of a particular portfolio.",
        "operationId": "GetPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio's properties. Defaults to returning the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio's properties. Defaults to returning the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete portfolio properties",
        "description": "Delete one or more properties from a particular portfolio. If the properties are time-variant then an effective datetime from which\r\nto delete properties must be specified. If the properties are perpetual then it is invalid to specify an effective datetime for deletion.",
        "operationId": "DeletePortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete. These must take the format\r\n            {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'. Each property must be from the 'Portfolio' domain.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the properties to delete. These must take the format\r\n            {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'. Each property must be from the 'Portfolio' domain."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Upsert portfolio properties",
        "description": "Create or update one or more properties for a particular portfolio. A property is updated if it\r\nalready exists and created if it does not. All properties must be from the 'Portfolio' domain.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime from which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which it is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/properties/list": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get portfolio properties",
        "description": "List all the properties of a particular portfolio.",
        "operationId": "ListPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio's properties. Defaults to returning the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio's properties. Defaults to returning the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results per page to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results per page to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Portfolio/MyScope/SomePortfolioProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Portfolio/MyScope/SomeOtherPortfolioProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Portfolio/MyScope/SomePortfolioProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Portfolio/MyScope/SomeOtherPortfolioProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProperty"
                },
                "example": {
                  "values": [
                    {
                      "key": "Portfolio/MyScope/SomePortfolioProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      },
                      "effectiveFrom": "2018-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Portfolio/MyScope/SomeOtherPortfolioProperty",
                      "value": {
                        "labelValue": "XYZ00008910"
                      },
                      "effectiveFrom": "2017-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get portfolio property time series",
        "description": "Show the complete time series (history) for a particular portfolio property.",
        "operationId": "GetPortfolioPropertyTimeSeries",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property whose history to show.\r\n            This must be from the 'Portfolio' domain and in the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "portfolioEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the portfolio. Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to show the history. Defaults to returning the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to show the history. Defaults to returning the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. For more information about filtering,\r\n            see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the results. For more information about filtering,\r\n            see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties; this value is returned from\r\n            the previous call. If a pagination token is provided, the filter, portfolioEffectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties; this value is returned from\r\n            the previous call. If a pagination token is provided, the filter, portfolioEffectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/relations": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get portfolio relations",
        "description": "Get relations for a particular portfolio.",
        "operationId": "GetPortfolioRelations",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relations. Defaults to returning the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relations. Defaults to returning the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Provide a null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Provide a null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These must be from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. Only identifier types provided will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These must be from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. Only identifier types provided will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/relationships": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get portfolio relationships",
        "description": "Get relationships for a particular portfolio.",
        "operationId": "GetPortfolioRelationships",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to returning the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to returning the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relationships. Provide a null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the relationships. Provide a null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These must be from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. Only identifier types provided will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These must be from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. Only identifier types provided will be used to look up relevant entities in relationships. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {}
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {}
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] Upsert Returns",
        "description": "Update or insert returns into the specified portfolio.",
        "operationId": "UpsertPortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "This contains the Returns which need to be upsert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the portfolio that contains the newly updated or inserted Returns.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] Get Returns",
        "description": "Get Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to get the Returns.",
            "schema": {
              "type": "string",
              "description": "The start date from which to get the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date from which to get the Returns.",
            "schema": {
              "type": "string",
              "description": "The end date from which to get the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Show the Returns on a Daily or Monthly period.",
            "schema": {
              "type": "string",
              "description": "Show the Returns on a Daily or Monthly period.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Returns on the given time period.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}/$aggregated": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Aggregated Returns",
        "description": "Aggregate Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioAggregatedReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to calculate the Returns.",
            "schema": {
              "type": "string",
              "description": "The start date from which to calculate the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date for which to calculate the Returns.",
            "schema": {
              "type": "string",
              "description": "The end date for which to calculate the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "alternativeIncDate",
            "in": "query",
            "description": "The date from which to consider the Returns on the Portfolio, if this is different from the date when Returns begin. Can be a date string or Portfolio property.",
            "schema": {
              "type": "string",
              "description": "The date from which to consider the Returns on the Portfolio, if this is different from the date when Returns begin. Can be a date string or Portfolio property.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The request used in the AggregatedReturns.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "recipeId": {
                  "scope": "TestScope",
                  "code": "default"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "recipeId": {
                  "scope": "TestScope",
                  "code": "default"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "recipeId": {
                  "scope": "TestScope",
                  "code": "default"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "recipeId": {
                  "scope": "TestScope",
                  "code": "default"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The aggregated returns.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}/$delete": {
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Delete Returns",
        "description": "Cancel one or more Returns which exist into the specified portfolio.",
        "operationId": "DeletePortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to delete the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The start date from which to delete the Returns.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date from which to delete the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The end date from which to delete the Returns.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "The Period (Daily or Monthly) of the Returns to be deleted.",
            "schema": {
              "type": "string",
              "description": "The Period (Daily or Monthly) of the Returns to be deleted.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully deleted Returns data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}/aggregated": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Aggregate Returns (This is a deprecated endpoint).",
        "description": "Aggregate Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioAggregateReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The Recipe Scope for getting the fx rates",
            "schema": {
              "type": "string",
              "description": "The Recipe Scope for getting the fx rates",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The Recipe Code for getting the fx rates",
            "schema": {
              "type": "string",
              "description": "The Recipe Code for getting the fx rates",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to calculate the Returns.",
            "schema": {
              "type": "string",
              "description": "The start date from which to calculate the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date for which to calculate the Returns.",
            "schema": {
              "type": "string",
              "description": "The end date for which to calculate the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "compositeMethod",
            "in": "query",
            "description": "The method used to calculate the Portfolio performance:\r\n            Equal/Asset.",
            "schema": {
              "type": "string",
              "description": "The method used to calculate the Portfolio performance:\r\n            Equal/Asset.",
              "nullable": true
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "The type of the returns used to calculate the aggregation result: Daily/Monthly.",
            "schema": {
              "type": "string",
              "description": "The type of the returns used to calculate the aggregation result: Daily/Monthly.",
              "nullable": true
            }
          },
          {
            "name": "outputFrequency",
            "in": "query",
            "description": "The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.",
            "schema": {
              "type": "string",
              "description": "The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.",
              "nullable": true
            }
          },
          {
            "name": "metrics",
            "in": "query",
            "description": "Determines what type of returns should be calculated, see https://support.lusid.com/knowledgebase/article/KA-01675/en-us for a list of available metrics.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Determines what type of returns should be calculated, see https://support.lusid.com/knowledgebase/article/KA-01675/en-us for a list of available metrics.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "alternativeIncDate",
            "in": "query",
            "description": "The date from which to consider the Returns on the Portfolio, if this is different from the date when Returns begin. Can be a date string or Portfolio property.",
            "schema": {
              "type": "string",
              "description": "The date from which to consider the Returns on the Portfolio, if this is different from the date when Returns begin. Can be a date string or Portfolio property.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The aggregated returns.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregatedReturn"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/propertydefinitions": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Create property definition",
        "description": "Define a new property.",
        "operationId": "CreatePropertyDefinition",
        "requestBody": {
          "description": "The definition of the new property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Get multiple property definitions",
        "description": "Retrieve the definition of one or more specified properties.",
        "operationId": "GetMultiplePropertyDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definitions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/propertydefinitions/derived": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "[EARLY ACCESS] Create derived property definition",
        "description": "Define a new derived property.",
        "operationId": "CreateDerivedPropertyDefinition",
        "requestBody": {
          "description": "The definition of the new derived property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created derived property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}": {
      "put": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Update property definition",
        "description": "Update the definition of a specified existing property. Not all elements within a property definition\r\nare modifiable due to the potential implications for values already stored against the property.",
        "operationId": "UpdatePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property being updated.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "CustomEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, CustomEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the property being updated.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated definition of the property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Delete property definition",
        "description": "Delete the definition of the specified property.",
        "operationId": "DeletePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property to be deleted.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "CustomEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, CustomEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the property to be deleted.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time that the property definition was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Get property definition",
        "description": "Retrieve the definition of a specified property.",
        "operationId": "GetPropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the specified property.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "CustomEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, CustomEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified property.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/quotes/{scope}": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Upsert quotes",
        "description": "Update or insert one or more quotes in a single scope. A quote will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.\n\nThe maximum number of quotes that this method can upsert per request is 2,000.",
        "operationId": "UpsertQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the quotes.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the quotes.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] List quotes for scope",
        "description": "List all the quotes from a single scope at the specified date/time",
        "operationId": "ListQuotesForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the quotes to list.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/quotes/{scope}/$delete": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Delete quotes",
        "description": "Delete one or more specified quotes from a single scope. A quote is identified by its unique id which includes information about\r\nthe type of quote as well as the exact effective datetime (to the microsecond) from which it became valid.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to delete.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to delete keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully deleted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/quotes/{scope}/$deprecated": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[DEPRECATED] List quotes",
        "description": "List all the quotes from a single scope at the specified date/time\r\nPlease use M:Finbourne.WebApi.Controllers.QuotesController.ListQuotesForScope(System.String,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String) - the signature and behaviour of this endpoint will be changing to omit scope",
        "operationId": "ListQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the quotes to list.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/quotes/{scope}/$get": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Get quotes",
        "description": "Get one or more quotes from a single scope.\r\n            \r\nEach quote can be identified by its time invariant quote series id.\r\n            \r\nFor each quote series id LUSID will return the most recent quote with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for a quote from the specified effective datetime.\r\nLUSID will return the most recent quote within this window.\r\n            \r\nIn the request each quote series id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved quotes. Two, those that had a\r\nvalid quote series id but could not be found. Three, those that failed because LUSID could not construct a valid quote series id from the request.\r\n\r\nFor the quotes that failed or could not be found a reason will be provided explaining why the quote could not be retrieved.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.\n\nThe maximum number of quotes that this method can get per request is 2,000.",
        "operationId": "GetQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to retrieve.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/recipes": {
      "post": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "[EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid.",
        "description": "Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertConfigurationRecipe",
        "requestBody": {
          "description": "The Configuration Recipe to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false
                    }
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": ""
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false
                    }
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": ""
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false
                    }
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": ""
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false
                    }
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": ""
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "[EXPERIMENTAL] List the set of Configuration Recipes",
        "description": "List the set of configuration recipes at the specified date/time and scope",
        "operationId": "ListConfigurationRecipes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested configuration recipes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false
                          }
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": ""
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": ""
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false
                          }
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": ""
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false
                          }
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": ""
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": ""
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false
                          }
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": ""
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false
                          }
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": ""
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": ""
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false
                          }
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": ""
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/recipes/{scope}/{code}": {
      "get": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "[EXPERIMENTAL] Get Configuration Recipe",
        "description": "Get a Configuration Recipe from a single scope.\r\n            \r\nThe response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.\r\n            \r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Configuration Recipe to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Configuration Recipe to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the recipe to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the recipe to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Configuration Recipe or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": ""
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false
                      }
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": ""
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": ""
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": ""
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false
                      }
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": ""
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": ""
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": ""
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false
                      }
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": ""
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": ""
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "[EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present.",
        "description": "Delete the specified Configuration Recipe from a single scope.\r\n            \r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Configuration Recipe to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Configuration Recipe to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Configuration Recipe to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Configuration Recipe to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/referenceportfolios/{scope}": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Create reference portfolio",
        "description": "Create a reference portfolio in a particular scope.",
        "operationId": "CreateReferencePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the reference portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope in which to create the reference portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the reference portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created reference portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituents": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Upsert reference portfolio constituents",
        "description": "Add constituents to a reference portfolio.",
        "operationId": "UpsertReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The constituents to upload to the reference portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Get reference portfolio constituents",
        "description": "Get constituents from a reference portfolio at a particular effective time.",
        "operationId": "GetReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' or 'ReferenceHolding' domain to decorate onto\r\n            constituents. These take the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or\r\n            'ReferenceHolding/strategy/quantsignal'. Defaults to return all available instrument and reference holding properties if not specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' or 'ReferenceHolding' domain to decorate onto\r\n            constituents. These take the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or\r\n            'ReferenceHolding/strategy/quantsignal'. Defaults to return all available instrument and reference holding properties if not specified.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reference portfolio constituents",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituentsadjustments": {
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "List constituents adjustments",
        "description": "List adjustments made to constituents in a reference portfolio.",
        "operationId": "ListConstituentsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAtTime",
            "in": "query",
            "description": "The asAt time for which the result is valid.",
            "schema": {
              "type": "string",
              "description": "The asAt time for which the result is valid.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/relationdefinitions": {
      "post": {
        "tags": [
          "Relation Definitions"
        ],
        "summary": "[EXPERIMENTAL] Create a relation definition",
        "description": "Define a new relation.",
        "operationId": "CreateRelationDefinition",
        "requestBody": {
          "description": "The definition of the new relation.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relation definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationdefinitions/{scope}/{code}": {
      "get": {
        "tags": [
          "Relation Definitions"
        ],
        "summary": "[EXPERIMENTAL] Get relation definition",
        "description": "Retrieve the definition of a specified relation.",
        "operationId": "GetRelationDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified relation.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified relation.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified relation. Together with the domain and scope this uniquely\r\n            identifies the relation.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified relation. Together with the domain and scope this uniquely\r\n            identifies the relation.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relation definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the relation definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relation definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relations/{scope}/{code}": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "[EXPERIMENTAL] Create Relation",
        "description": "Create a relation between two entity objects by their identifiers",
        "operationId": "CreateRelation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the relation should be effective from. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the relation should be effective from. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relation to create.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly created relation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relations/{scope}/{code}/$delete": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "[EXPERIMENTAL] Delete a relation",
        "description": "Delete a relation between two entity objects represented by their identifiers",
        "operationId": "DeleteRelation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the relation should the deletion be effective from. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the relation should the deletion be effective from. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relation to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the relation is deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationshipdefinitions": {
      "post": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EXPERIMENTAL] Create Relationship Definition",
        "description": "Create a new relationship definition to be used for creating relationships between entities.",
        "operationId": "CreateRelationshipDefinition",
        "requestBody": {
          "description": "The definition of the new relationship.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}": {
      "put": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EXPERIMENTAL] Update Relationship Definition",
        "description": "Update the definition of a specified existing relationship. Not all elements within a relationship definition\r\nare modifiable due to the potential implications for values already stored against the relationship.",
        "operationId": "UpdateRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship definition being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship definition being updated.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship definition being updated. Together with the scope this uniquely\r\n            identifies the relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship definition being updated. Together with the scope this uniquely\r\n            identifies the relationship definition.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of relationship definition to update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EXPERIMENTAL] Get relationship definition",
        "description": "Retrieve the specified relationship definition",
        "operationId": "GetRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified relationship definition.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified relationship definition. Together with the domain and scope this uniquely\r\n            identifies the relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified relationship definition. Together with the domain and scope this uniquely\r\n            identifies the relationship definition.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relationship definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the relationship definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}/relationships": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "[EXPERIMENTAL] Create Relationship",
        "description": "Create a relationship between two entity objects by their identifiers",
        "operationId": "CreateRelationship",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relationship to create.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relationship.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {}
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {}
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {}
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {}
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {}
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {}
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}/relationships/$delete": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "[EXPERIMENTAL] Delete Relationship",
        "description": "Delete a relationship between two entity objects represented by their identifiers",
        "operationId": "DeleteRelationship",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relationship to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the relationship is deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/results/queryable/keys": {
      "get": {
        "tags": [
          "Aggregation"
        ],
        "summary": "[EXPERIMENTAL] Query the set of supported \"addresses\" that can be queried from the aggregation endpoint.",
        "description": "When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,\r\nwhat they are and what they return.",
        "operationId": "GetQueryableKeys",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing queryable keys from a previous call to list queryable keys.\r\n            This value is returned from the previous call.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing queryable keys from a previous call to list queryable keys.\r\n            This value is returned from the previous call.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAggregationQuery"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/schemas/entities": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[BETA] List entities",
        "description": "List all available entities for which schema information is available.",
        "operationId": "ListEntities",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfString"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/schemas/entities/{entity}": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[BETA] Get schema",
        "description": "Gets the schema and meta-data for a given entity",
        "operationId": "GetEntitySchema",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "description": "The name of a valid entity",
            "required": true,
            "schema": {
              "maxLength": 6000,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of a valid entity",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/schemas/properties": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[BETA] Get property schema",
        "description": "Get the schemas for the provided list of property keys.",
        "operationId": "GetPropertySchema",
        "parameters": [
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more property keys for which the schema is requested",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "One or more property keys for which the schema is requested",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "schema": {
              "type": "string",
              "description": "Optional. The AsAt date of the data",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySchema"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/schemas/types": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "[BETA] Get value types",
        "description": "Gets the available value types for which a schema is available.",
        "operationId": "GetValueTypes",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfValueType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/scopes": {
      "get": {
        "tags": [
          "Scopes"
        ],
        "summary": "[EARLY ACCESS] List Scopes",
        "description": "List all the scopes that contain data.",
        "operationId": "ListScopes",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scopes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/search/instruments": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[EXPERIMENTAL] Instruments search",
        "description": "Search across all instruments that have been mastered in LUSID. Optionally augment the results with instruments from an external symbology service,\r\ncurrently OpenFIGI.",
        "operationId": "InstrumentsSearch",
        "parameters": [
          {
            "name": "masteredEffectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label to use when searching mastered instruments. This parameter has no effect on instruments that\r\nhave not been mastered within LUSID. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label to use when searching mastered instruments. This parameter has no effect on instruments that\r\nhave not been mastered within LUSID. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "masteredOnly",
            "in": "query",
            "description": "If set to true, only search over instruments that have been mastered within LUSID. Defaults to false.",
            "schema": {
              "type": "boolean",
              "description": "If set to true, only search over instruments that have been mastered within LUSID. Defaults to false.",
              "default": false
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                },
                "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties."
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                },
                "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties."
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                },
                "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties."
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentSearchProperty"
                },
                "description": "A collection of instrument properties to search for. LUSID will return instruments for any matched\r\n            properties."
              },
              "example": [
                {
                  "key": "Instrument/default/Isin",
                  "value": "US0378331005"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The instruments found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstrumentMatch"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/search/portfoliogroups": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Portfolio Groups",
        "description": "Search through all portfolio groups",
        "operationId": "SearchPortfolioGroups",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/search/portfolios": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Portfolios",
        "description": "Search through all portfolios",
        "operationId": "SearchPortfolios",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/search/propertydefinitions": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Property Definitions",
        "description": "Search through all Property Definitions",
        "operationId": "SearchProperties",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/structured/{scope}": {
      "post": {
        "tags": [
          "Structured Market Data"
        ],
        "summary": "[EXPERIMENTAL] Upsert a set of structured market data items. This creates or updates the data in Lusid.",
        "description": "Update or insert one or more structured market data items in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each structured market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each structured market data in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted structured market data, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the item could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "UpsertStructuredMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the structured market data.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the structured market data."
            }
          }
        ],
        "requestBody": {
          "description": "The set of structured market data items to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredMarketDataRequest"
                },
                "description": "The set of structured market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "FxVolSurface",
                    "marketAsset": "USDJPY"
                  },
                  "marketData": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "IrVolCube",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredMarketDataRequest"
                },
                "description": "The set of structured market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "FxVolSurface",
                    "marketAsset": "USDJPY"
                  },
                  "marketData": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "IrVolCube",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredMarketDataRequest"
                },
                "description": "The set of structured market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "FxVolSurface",
                    "marketAsset": "USDJPY"
                  },
                  "marketData": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "IrVolCube",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredMarketDataRequest"
                },
                "description": "The set of structured market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "FxVolSurface",
                    "marketAsset": "USDJPY"
                  },
                  "marketData": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketElementType": "IrVolCube",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted StructuredMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/structured/{scope}/$delete": {
      "post": {
        "tags": [
          "Structured Market Data"
        ],
        "summary": "[EXPERIMENTAL] Delete one or more items of structured market data, assuming they are present.",
        "description": "Delete one or more specified structured market data items from a single scope. Each item is identified by a unique id which includes\r\ninformation about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).\r\n            \r\nIn the request each market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted market data items, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the it could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteStructuredMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the structured market data to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the structured market data to delete."
            }
          }
        ],
        "requestBody": {
          "description": "The structured market data Ids to delete, each keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The structured market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The structured market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The structured market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The structured market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully deleted StructuredMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/structured/{scope}/$get": {
      "post": {
        "tags": [
          "Structured Market Data"
        ],
        "summary": "[EXPERIMENTAL] Get structured market data",
        "description": "Get one or more items of structured market data from a single scope.\r\n            \r\nEach item can be identified by its time invariant structured market data identifier.\r\n            \r\nFor each id LUSID will return the most recent matched item with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for data from the specified effective datetime.\r\nLUSID will return the most recent item within this window.\r\n            \r\nIn the request each structured market data id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each item in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved structured market data. Two, those that had a\r\nvalid identifier but could not be found. Three, those that failed because LUSID could not construct a valid identifier from the request.\r\n\r\nFor the ids that failed to resolve or could not be found a reason will be provided explaining why that is the case.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.",
        "operationId": "GetStructuredMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the structured market data to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the structured market data to retrieve."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the structured market data. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime at which to retrieve the structured market data. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the structured market data. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the structured market data. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a structured market data item must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a structured market data item must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredMarketDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "someCorrelationId1": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketElementType": "FxVol",
                  "marketAsset": "USDJPY"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved structured market data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredMarketDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredMarketDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredMarketDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/systemconfiguration/cutlabels": {
      "post": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Create a Cut Label",
        "description": "Create a Cut Label valid in all scopes",
        "operationId": "CreateCutLabelDefinition",
        "requestBody": {
          "description": "The cut label definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] List Existing Cut Labels",
        "description": "List all the Cut Label Definitions that are valid at the given AsAt time",
        "operationId": "ListCutLabelDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The As At time at which listed Cut Labels are valid",
            "schema": {
              "type": "string",
              "description": "Optional. The As At time at which listed Cut Labels are valid",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cut labels",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/cutlabels/{code}": {
      "put": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Update a Cut Label",
        "description": "Update a specified cut label",
        "operationId": "UpdateCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being updated",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being updated",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The cut label update definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Get a Cut Label",
        "description": "Get a specified cut label at a given time",
        "operationId": "GetCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being queried",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being queried",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The time at which to get the Cut Label",
            "schema": {
              "type": "string",
              "description": "The time at which to get the Cut Label",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Delete a Cut Label",
        "description": "Delete a specified cut label",
        "operationId": "DeleteCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being Deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being Deleted",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time of deletion",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactions": {
      "put": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EXPERIMENTAL] Set transaction types",
        "description": "Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.\r\n            \r\nWARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.",
        "operationId": "SetConfigurationTransactionTypes",
        "requestBody": {
          "description": "The complete set of transaction type definitions.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSetConfigurationDataRequest"
              },
              "example": {
                "transactionConfigRequests": [
                  {
                    "aliases": [
                      {
                        "type": "Simple-Sell",
                        "description": "Sale",
                        "transactionClass": "MyDefault",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {},
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {}
                  },
                  {
                    "aliases": [
                      {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                          "transactionConfiguration/default/TaxLotSelectionMethod": {
                            "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                            "value": {
                              "labelValue": "FirstInFirstOut"
                            }
                          }
                        },
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {
                      "transactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                          "labelValue": "Value"
                        }
                      }
                    }
                  }
                ],
                "sideConfigRequests": [
                  {
                    "side": "Side1",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.5",
                    "units": "500",
                    "amount": "1000"
                  },
                  {
                    "side": "Side2",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.75",
                    "units": "250",
                    "amount": "2000"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSetConfigurationDataRequest"
              },
              "example": {
                "transactionConfigRequests": [
                  {
                    "aliases": [
                      {
                        "type": "Simple-Sell",
                        "description": "Sale",
                        "transactionClass": "MyDefault",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {},
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {}
                  },
                  {
                    "aliases": [
                      {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                          "transactionConfiguration/default/TaxLotSelectionMethod": {
                            "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                            "value": {
                              "labelValue": "FirstInFirstOut"
                            }
                          }
                        },
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {
                      "transactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                          "labelValue": "Value"
                        }
                      }
                    }
                  }
                ],
                "sideConfigRequests": [
                  {
                    "side": "Side1",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.5",
                    "units": "500",
                    "amount": "1000"
                  },
                  {
                    "side": "Side2",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.75",
                    "units": "250",
                    "amount": "2000"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSetConfigurationDataRequest"
              },
              "example": {
                "transactionConfigRequests": [
                  {
                    "aliases": [
                      {
                        "type": "Simple-Sell",
                        "description": "Sale",
                        "transactionClass": "MyDefault",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {},
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {}
                  },
                  {
                    "aliases": [
                      {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                          "transactionConfiguration/default/TaxLotSelectionMethod": {
                            "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                            "value": {
                              "labelValue": "FirstInFirstOut"
                            }
                          }
                        },
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {
                      "transactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                          "labelValue": "Value"
                        }
                      }
                    }
                  }
                ],
                "sideConfigRequests": [
                  {
                    "side": "Side1",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.5",
                    "units": "500",
                    "amount": "1000"
                  },
                  {
                    "side": "Side2",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.75",
                    "units": "250",
                    "amount": "2000"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSetConfigurationDataRequest"
              },
              "example": {
                "transactionConfigRequests": [
                  {
                    "aliases": [
                      {
                        "type": "Simple-Sell",
                        "description": "Sale",
                        "transactionClass": "MyDefault",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {},
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {}
                  },
                  {
                    "aliases": [
                      {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                      }
                    ],
                    "movements": [
                      {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                          "transactionConfiguration/default/TaxLotSelectionMethod": {
                            "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                            "value": {
                              "labelValue": "FirstInFirstOut"
                            }
                          }
                        },
                        "mappings": []
                      },
                      {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                      }
                    ],
                    "properties": {
                      "transactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                          "labelValue": "Value"
                        }
                      }
                    }
                  }
                ],
                "sideConfigRequests": [
                  {
                    "side": "Side1",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.5",
                    "units": "500",
                    "amount": "1000"
                  },
                  {
                    "side": "Side2",
                    "security": "security",
                    "currency": "currency",
                    "rate": "0.75",
                    "units": "250",
                    "amount": "2000"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] List transaction types",
        "description": "Get the list of current transaction types. For information on the default transaction types provided with\r\nLUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.",
        "operationId": "ListConfigurationTransactionTypes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transaction types. Defaults\r\n            to returning the latest versions if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the transaction types. Defaults\r\n            to returning the latest versions if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactions/side": {
      "post": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EXPERIMENTAL] Create side definition",
        "description": "Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.",
        "operationId": "CreateSideDefinition",
        "requestBody": {
          "description": "The definition of the side.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SideConfigurationDataRequest"
              },
              "example": {
                "side": "Side_Test",
                "security": "security",
                "currency": "currency",
                "rate": "0.7",
                "units": "300",
                "amount": "2000"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SideConfigurationDataRequest"
              },
              "example": {
                "side": "Side_Test",
                "security": "security",
                "currency": "currency",
                "rate": "0.7",
                "units": "300",
                "amount": "2000"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SideConfigurationDataRequest"
              },
              "example": {
                "side": "Side_Test",
                "security": "security",
                "currency": "currency",
                "rate": "0.7",
                "units": "300",
                "amount": "2000"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SideConfigurationDataRequest"
              },
              "example": {
                "side": "Side_Test",
                "security": "security",
                "currency": "currency",
                "rate": "0.7",
                "units": "300",
                "amount": "2000"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/systemconfiguration/transactions/type": {
      "post": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] Create transaction type",
        "description": "Create a new transaction type by specifying a definition and mappings to movements.",
        "operationId": "CreateConfigurationTransactionType",
        "requestBody": {
          "description": "A transaction type definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Create portfolio",
        "description": "Create a transaction portfolio in a particular scope.",
        "operationId": "CreatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope in which to create the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly-created transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/$resolve": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Resolve instrument",
        "description": "Try to resolve the instrument for transaction and holdings for a given instrument identifier and a specified  \r\nperiod of time. Also update the instrument identifiers with the given instrument identifiers collection.",
        "operationId": "ResolveInstrument",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdentifierType",
            "in": "query",
            "description": "The instrument identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "instrumentIdentifierValue",
            "in": "query",
            "description": "The value for the given instrument identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value for the given instrument identifier."
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/a2b": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get A2B data",
        "description": "Get an A2B report for the given portfolio.",
        "operationId": "GetA2BData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the A2B report for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the A2B report for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the A2B report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the A2B report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio A2B data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BDataRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "cost": 505178.94,
                            "currencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "in": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "in": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "deltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": 39506.91,
                            "deltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "cost": 12020258.65,
                            "marketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "cost": 571435.51,
                            "marketGain": 39506.91,
                            "currencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "cost": -331495.14,
                            "marketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "cost": -276798.44,
                            "marketGain": 42620.62,
                            "currencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "in": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "in": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -6016,
                            "carry": 406.38,
                            "deltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -5113.59,
                            "realCurrencyGain": -1657.48,
                            "carry": 345.42,
                            "deltaMarketGain": -55644.35,
                            "deltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "cost": -220996.76,
                            "marketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "cost": -184532.29,
                            "marketGain": -13023.73,
                            "currencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "cost": 163259.7,
                            "marketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "cost": 136321.85,
                            "marketGain": 7221.26,
                            "currencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": 29288.3,
                            "deltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 24865.76,
                            "realCurrencyGain": 2285.64,
                            "deltaMarketGain": -7221.26,
                            "deltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "cost": 4480295.86,
                            "marketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "cost": 215054.2,
                            "marketGain": -28601.23,
                            "currencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -115985.86,
                            "deltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -6031.26,
                            "realCurrencyGain": 4266.95,
                            "deltaMarketGain": 20157.73,
                            "deltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 3413558.75,
                            "marketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "cost": 163850.82,
                            "marketGain": -8443.5,
                            "currencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "cost": -234688.46,
                            "marketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "cost": -195495.49,
                            "marketGain": -3261.5,
                            "currencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "in": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "in": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -10145.8,
                            "carry": 157.3,
                            "deltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -8644.22,
                            "realCurrencyGain": -664.12,
                            "carry": 134.02,
                            "deltaMarketGain": -46525.38,
                            "deltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "cost": -199734.86,
                            "marketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "cost": -166379.14,
                            "marketGain": -49786.88,
                            "currencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "cost": 3509200,
                            "marketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "cost": 2485778.5,
                            "marketGain": -138680.75,
                            "currencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "realMarketGain": 16640,
                            "deltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 11825,
                            "realCurrencyGain": 27927.5,
                            "deltaMarketGain": 138680.75,
                            "deltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10824063.04,
                            "marketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "cost": 530379.09,
                            "marketGain": -55176.34,
                            "currencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -65876.91,
                            "deltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -3478.3,
                            "realCurrencyGain": 3199.11,
                            "deltaMarketGain": 54044.58,
                            "deltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 9982191.47,
                            "marketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "cost": 489127.38,
                            "marketGain": -1131.76,
                            "currencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": 462.92,
                            "currencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -11982.92,
                            "deltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": -11520,
                            "currencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BDataRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "cost": 505178.94,
                            "currencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "in": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "in": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "deltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": 39506.91,
                            "deltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "cost": 12020258.65,
                            "marketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "cost": 571435.51,
                            "marketGain": 39506.91,
                            "currencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "cost": -331495.14,
                            "marketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "cost": -276798.44,
                            "marketGain": 42620.62,
                            "currencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "in": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "in": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -6016,
                            "carry": 406.38,
                            "deltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -5113.59,
                            "realCurrencyGain": -1657.48,
                            "carry": 345.42,
                            "deltaMarketGain": -55644.35,
                            "deltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "cost": -220996.76,
                            "marketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "cost": -184532.29,
                            "marketGain": -13023.73,
                            "currencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "cost": 163259.7,
                            "marketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "cost": 136321.85,
                            "marketGain": 7221.26,
                            "currencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": 29288.3,
                            "deltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 24865.76,
                            "realCurrencyGain": 2285.64,
                            "deltaMarketGain": -7221.26,
                            "deltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "cost": 4480295.86,
                            "marketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "cost": 215054.2,
                            "marketGain": -28601.23,
                            "currencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -115985.86,
                            "deltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -6031.26,
                            "realCurrencyGain": 4266.95,
                            "deltaMarketGain": 20157.73,
                            "deltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 3413558.75,
                            "marketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "cost": 163850.82,
                            "marketGain": -8443.5,
                            "currencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "cost": -234688.46,
                            "marketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "cost": -195495.49,
                            "marketGain": -3261.5,
                            "currencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "in": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "in": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -10145.8,
                            "carry": 157.3,
                            "deltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -8644.22,
                            "realCurrencyGain": -664.12,
                            "carry": 134.02,
                            "deltaMarketGain": -46525.38,
                            "deltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "cost": -199734.86,
                            "marketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "cost": -166379.14,
                            "marketGain": -49786.88,
                            "currencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "cost": 3509200,
                            "marketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "cost": 2485778.5,
                            "marketGain": -138680.75,
                            "currencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "realMarketGain": 16640,
                            "deltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 11825,
                            "realCurrencyGain": 27927.5,
                            "deltaMarketGain": 138680.75,
                            "deltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10824063.04,
                            "marketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "cost": 530379.09,
                            "marketGain": -55176.34,
                            "currencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -65876.91,
                            "deltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -3478.3,
                            "realCurrencyGain": 3199.11,
                            "deltaMarketGain": 54044.58,
                            "deltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 9982191.47,
                            "marketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "cost": 489127.38,
                            "marketGain": -1131.76,
                            "currencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": 462.92,
                            "currencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -11982.92,
                            "deltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": -11520,
                            "currencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BDataRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "cost": 505178.94,
                            "currencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "in": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "in": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "deltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": 39506.91,
                            "deltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "cost": 12020258.65,
                            "marketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "cost": 571435.51,
                            "marketGain": 39506.91,
                            "currencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "cost": -331495.14,
                            "marketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "cost": -276798.44,
                            "marketGain": 42620.62,
                            "currencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "in": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "in": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -6016,
                            "carry": 406.38,
                            "deltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -5113.59,
                            "realCurrencyGain": -1657.48,
                            "carry": 345.42,
                            "deltaMarketGain": -55644.35,
                            "deltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "cost": -220996.76,
                            "marketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "cost": -184532.29,
                            "marketGain": -13023.73,
                            "currencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "cost": 163259.7,
                            "marketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "cost": 136321.85,
                            "marketGain": 7221.26,
                            "currencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": 29288.3,
                            "deltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 24865.76,
                            "realCurrencyGain": 2285.64,
                            "deltaMarketGain": -7221.26,
                            "deltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "cost": 4480295.86,
                            "marketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "cost": 215054.2,
                            "marketGain": -28601.23,
                            "currencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -115985.86,
                            "deltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -6031.26,
                            "realCurrencyGain": 4266.95,
                            "deltaMarketGain": 20157.73,
                            "deltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 3413558.75,
                            "marketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "cost": 163850.82,
                            "marketGain": -8443.5,
                            "currencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "cost": -234688.46,
                            "marketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "cost": -195495.49,
                            "marketGain": -3261.5,
                            "currencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "in": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "in": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -10145.8,
                            "carry": 157.3,
                            "deltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -8644.22,
                            "realCurrencyGain": -664.12,
                            "carry": 134.02,
                            "deltaMarketGain": -46525.38,
                            "deltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "cost": -199734.86,
                            "marketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "cost": -166379.14,
                            "marketGain": -49786.88,
                            "currencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "cost": 3509200,
                            "marketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "cost": 2485778.5,
                            "marketGain": -138680.75,
                            "currencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "realMarketGain": 16640,
                            "deltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 11825,
                            "realCurrencyGain": 27927.5,
                            "deltaMarketGain": 138680.75,
                            "deltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10824063.04,
                            "marketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "cost": 530379.09,
                            "marketGain": -55176.34,
                            "currencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -65876.91,
                            "deltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -3478.3,
                            "realCurrencyGain": 3199.11,
                            "deltaMarketGain": 54044.58,
                            "deltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 9982191.47,
                            "marketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "cost": 489127.38,
                            "marketGain": -1131.76,
                            "currencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": 462.92,
                            "currencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -11982.92,
                            "deltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": -11520,
                            "currencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/a2bmovements": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get an A2B report at the movement level for the given portfolio.",
        "description": "Get an A2B report at the movement level for the given portfolio.",
        "operationId": "GetA2BMovements",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the A2B movement report for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the A2B movement report for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the A2B movement report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the A2B movement report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio A2B movement data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BMovementRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BMovementRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfA2BMovementRecord"
                },
                "example": {
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/bucketedCashFlows": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get bucketed cash flows from a list of portfolios",
        "description": "We bucket/aggregate a transaction portfolio's instruments by date or tenor specified in the request.\r\nThe cashflows are grouped by both instrumentId and currency. \r\n            \r\nIf you want transactional level cashflow, please use the 'GetUpsertableCashFlows' endpoint.\r\nIf you want instrument cashflow, please use the 'GetPortfolioCashFlows' endpoint.\r\nNote that these endpoints do not apply bucketing.",
        "operationId": "GetBucketedCashFlows",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request specifying the bucketing of cashflows",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BucketedCashFlowRequest"
              },
              "example": {
                "roundingMethod": "RoundUp",
                "bucketingDates": [
                  "2020-01-01T00:00:00.0000000+00:00",
                  "2020-07-01T00:00:00.0000000+00:00",
                  "2021-01-01T00:00:00.0000000+00:00",
                  "2021-07-01T00:00:00.0000000+00:00"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BucketedCashFlowRequest"
              },
              "example": {
                "roundingMethod": "RoundUp",
                "bucketingDates": [
                  "2020-01-01T00:00:00.0000000+00:00",
                  "2020-07-01T00:00:00.0000000+00:00",
                  "2021-01-01T00:00:00.0000000+00:00",
                  "2021-07-01T00:00:00.0000000+00:00"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BucketedCashFlowRequest"
              },
              "example": {
                "roundingMethod": "RoundUp",
                "bucketingDates": [
                  "2020-01-01T00:00:00.0000000+00:00",
                  "2020-07-01T00:00:00.0000000+00:00",
                  "2021-01-01T00:00:00.0000000+00:00",
                  "2021-07-01T00:00:00.0000000+00:00"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BucketedCashFlowRequest"
              },
              "example": {
                "roundingMethod": "RoundUp",
                "bucketingDates": [
                  "2020-01-01T00:00:00.0000000+00:00",
                  "2020-07-01T00:00:00.0000000+00:00",
                  "2021-01-01T00:00:00.0000000+00:00",
                  "2021-07-01T00:00:00.0000000+00:00"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested portfolio instruments' bucketed cash flow data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BucketedCashFlowResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketedCashFlowResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketedCashFlowResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashflows": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[BETA] Get portfolio cash flows",
        "description": "Get the set of cash flows that occur in a window for the transaction portfolio's instruments.\r\n            \r\nNote that grouping can affect the quantity of information returned; where a holding is an amalgamation of one or more (e.g. cash) instruments, a unique\r\ntransaction identifier will not be available. The same may go for diagnostic information (e.g. multiple sources of an aggregate cash amount on a date that is\r\nnot split out. Grouping at the transaction and instrument level is recommended for those seeking to attribute individual flows.",
        "operationId": "GetPortfolioCashFlows",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this\r\n             uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this\r\n             uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
            "schema": {
              "type": "string",
              "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "windowStart",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\n             There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\n             There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "windowEnd",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\n             The upper bound defaults to 'today' if it is not specified",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\n             The upper bound defaults to 'today' if it is not specified",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the data. Defaults to returning the latest version\r\n             of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the data. Defaults to returning the latest version\r\n             of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n             For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n             For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n             For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n             For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio instruments' cash flow data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentCashFlow"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentCashFlow"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentCashFlow"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashladder": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get portfolio cash ladder",
        "description": "Get a cash ladder for a transaction portfolio.",
        "operationId": "GetPortfolioCashLadder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio cash-ladder",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "trades to settle": -8200,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "trades to settle": -19850,
                            "dividend": 0,
                            "estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "trades to settle": -5000,
                            "dividend": 560,
                            "estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -2000,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -1200,
                            "dividend": 0,
                            "estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ]
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "trades to settle": -15000,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "trades to settle": 25500,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "trades to settle": 0,
                            "dividend": 5400,
                            "estimated funding": 0
                          },
                          "close": 165900
                        }
                      ]
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "trades to settle": -8200,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "trades to settle": -19850,
                            "dividend": 0,
                            "estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "trades to settle": -5000,
                            "dividend": 560,
                            "estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -2000,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -1200,
                            "dividend": 0,
                            "estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ]
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "trades to settle": -15000,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "trades to settle": 25500,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "trades to settle": 0,
                            "dividend": 5400,
                            "estimated funding": 0
                          },
                          "close": 165900
                        }
                      ]
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "trades to settle": -8200,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "trades to settle": -19850,
                            "dividend": 0,
                            "estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "trades to settle": -5000,
                            "dividend": 560,
                            "estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -2000,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -1200,
                            "dividend": 0,
                            "estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ]
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "trades to settle": -15000,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "trades to settle": 25500,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "trades to settle": 0,
                            "dividend": 5400,
                            "estimated funding": 0
                          },
                          "close": 165900
                        }
                      ]
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashstatement": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Get portfolio cash statement",
        "description": "Get a cash statement for a transaction portfolio.",
        "operationId": "GetPortfolioCashStatement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio cash flow data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/details": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get details",
        "description": "Get certain details associated with a transaction portfolio.",
        "operationId": "GetDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert portfolio details",
        "description": "Create or update certain details for a particular transaction portfolio. The details are updated if they already exist, and inserted if they do not.\r\n            \r\nNote that not all elements of a transaction portfolio definition are\r\nmodifiable once it has been created due to the potential implications for data already stored.",
        "operationId": "UpsertPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the\r\n             scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the\r\n             scope this uniquely identifies the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n             Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details to create or update for the specified transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly updated or inserted details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdings": {
      "put": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Set holdings",
        "description": "Set the holdings of the specified transaction portfolio to the provided targets. LUSID will automatically\r\nconstruct adjustment transactions to ensure that the entire set of holdings for the transaction portfolio\r\nare always set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "SetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The complete set of target holdings for the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly set holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Adjust holdings",
        "description": "Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will\r\nautomatically construct adjustment transactions to ensure that the holdings which have been adjusted are\r\nalways set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "AdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly adjusted holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Cancel adjust holdings",
        "description": "Cancel all previous holding adjustments made on the specified transaction portfolio for a specified effective\r\ndatetime. This should be used to undo holding adjustments made via set holdings or adjust holdings.",
        "operationId": "CancelAdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the holding adjustments were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get holdings",
        "description": "Calculate holdings for a transaction portfolio.",
        "operationId": "GetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            holdings. These must have the format {domain}/{scope}/{code}, for example \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            holdings. These must have the format {domain}/{scope}/{code}, for example \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings and version of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "List holdings adjustments",
        "description": "List the holdings adjustments made to the specified transaction portfolio over a specified interval of effective time.",
        "operationId": "ListHoldingsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The record of holdings adjustments made to the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments/{effectiveAt}": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get holdings adjustment",
        "description": "Get a holdings adjustment made to a transaction portfolio at a specific effective datetime. Note that a\r\nholdings adjustment will only be returned if one exists for the specified effective datetime.",
        "operationId": "GetHoldingsAdjustment",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective datetime or cut label of the holdings adjustment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label of the holdings adjustment.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the requested holdings adjustment",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsWithOrders": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EXPERIMENTAL] Get holdings with orders",
        "description": "Get the holdings of a transaction portfolio. Create virtual holdings for any outstanding orders,\r\nand account for order state/fulfillment; that is, treat outstanding orders (and related records) as\r\nif they had been realised at moment of query.",
        "operationId": "GetHoldingsWithOrders",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\"\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\"\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings and version of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "O",
                      "units": 100,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "GBP",
                      "holdingType": "OC",
                      "units": -250,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "O",
                      "units": 100,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "GBP",
                      "holdingType": "OC",
                      "units": -250,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "O",
                      "units": 100,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    },
                    {
                      "instrumentUid": "GBP",
                      "holdingType": "OC",
                      "units": -250,
                      "settledUnits": 0,
                      "cost": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 1,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get transactions",
        "description": "Retrieve all the transactions that occurred during a particular time interval. \r\n\r\nIf the portfolio is a derived transaction portfolio, the transactions returned are the\r\nunion set of all transactions of the parent (and any grandparents, etc.) as well as\r\nthose of the derived transaction portfolio itself.",
        "operationId": "GetTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve transactions. Defaults to returning the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve transactions. Defaults to returning the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression with which to filter the result set. \r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\"\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression with which to filter the result set. \r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\"\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' or 'Transaction' domain to decorate onto\r\n            transactions. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name' or\r\n            'Transaction/strategy/quantsignal'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' or 'Transaction' domain to decorate onto\r\n            transactions. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name' or\r\n            'Transaction/strategy/quantsignal'.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert transactions",
        "description": "Create or update transactions in the transaction portfolio. A transaction will be updated\r\nif it already exists and created if it does not.\n\nThe maximum number of transactions that this method can upsert per request is 10,000.",
        "operationId": "UpsertTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "A list of transactions to be created or updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "A list of transactions to be created or updated."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "A list of transactions to be created or updated."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "A list of transactions to be created or updated."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "A list of transactions to be created or updated."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Cancel transactions",
        "description": "Cancel one or more transactions from the transaction portfolio.",
        "operationId": "CancelTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionIds",
            "in": "query",
            "description": "The IDs of the transactions to cancel.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The IDs of the transactions to cancel."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the transactions were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Build transactions",
        "description": "Builds and returns all transactions that affect the holdings of a portfolio over a given interval of\r\neffective time into a set of output transactions. This includes transactions automatically generated by\r\nLUSID such as holding adjustments.",
        "operationId": "BuildTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/{transactionId}/properties": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert transaction properties",
        "description": "Create or update one or more transaction properties for a single transaction in the transaction portfolio.\r\nEach property will be updated if it already exists and created if it does not.\r\nBoth transaction and portfolio must exist at the time when properties are created or updated.",
        "operationId": "UpsertTransactionProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique ID of the transaction to create or update properties for.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique ID of the transaction to create or update properties for.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties and their associated values to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties and their associated values to create or update."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties and their associated values to create or update."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties and their associated values to create or update."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties and their associated values to create or update."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transaction property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Delete properties from transaction",
        "description": "Delete one or more properties from a single transaction in a transaction portfolio.",
        "operationId": "DeletePropertiesFromTransaction",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique ID of the transaction from which to delete properties.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique ID of the transaction from which to delete properties.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete.\r\n            These must be from the \"Transaction\" domain and have the format {domain}/{scope}/{code}, for example\r\n            \"Transaction/strategy/quantsignal\".",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the properties to delete.\r\n            These must be from the \"Transaction\" domain and have the format {domain}/{scope}/{code}, for example\r\n            \"Transaction/strategy/quantsignal\"."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the property was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/upsertablecashflows": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[BETA] Get upsertable portfolio cash flows.",
        "description": "Get the set of cash flows that occur in a window for the given portfolio instruments as a set of upsertable transactions (DTOs).\r\n            \r\nNote that grouping can affect the quantity of information returned; where a holding is an amalgamation of one or more (e.g. cash) instruments, a unique\r\ntransaction identifier will not be available. The same may go for diagnostic information (e.g. multiple sources of an aggregate cash amount on a date that is\r\nnot split out. Grouping at the transaction and instrument level is recommended for those seeking to attribute individual flows.\r\n            \r\nIn essence this is identical to the 'GetCashFlows' endpoint but returns the cash flows as a set of transactions suitable for directly putting back into LUSID.\r\nThere are a couple of important points:\r\n(1) Internally it can not be fully known where the user wishes to insert these transactions, e.g. portfolio and movement type.\r\n    These are therefore defaulted to a sensible option; the user will likely need to change these.\r\n(2) Similarly, knowledge of any properties the user might wish to add to a transaction are unknown and consequently left empty.\r\n(3) The transaction id that is added is simply a concatenation of the original transaction id, instrument id and payment date and direction. The user can happily override this.",
        "operationId": "GetUpsertablePortfolioCashFlows",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this\r\n             uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this\r\n             uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
            "schema": {
              "type": "string",
              "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "windowStart",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\n             There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\n             There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "windowEnd",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\n             The upper bound defaults to 'today' if it is not specified",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\n             The upper bound defaults to 'today' if it is not specified",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n             of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n             of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n             For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n             For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n             For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n             For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio instruments' cash flow data as a set of upsertable transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfTransaction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfTransaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfTransaction"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/translation/instrumentdefinitions": {
      "post": {
        "tags": [
          "Translation"
        ],
        "summary": "[EXPERIMENTAL] Translate instruments",
        "description": "Translates one or more instruments into the given target dialect.\r\n            \r\nIn the request each instrument definition should be keyed by a unique correlation id. This id is ephemeral\r\nand is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.\r\n            \r\nAny instrument that is not already in the LUSID dialect should be given as an ExoticInstrument.\r\n            \r\nThe response will return both the collection of successfully translated instruments in the target dialect,\r\nas well as those that failed.\r\nFor the failures a reason will be provided explaining why the instrument could not be updated or inserted.",
        "operationId": "TranslateInstrumentDefinitions",
        "requestBody": {
          "description": "The definitions of the instruments to translate along with the target dialect.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TranslateInstrumentDefinitionsRequest"
              },
              "example": {
                "instruments": {
                  "myFavouriteInstrument": {
                    "instrumentFormat": {
                      "sourceSystem": "someSource",
                      "vendor": "someVendor",
                      "version": "someVersion"
                    },
                    "content": "{\"InstrumentContentShouldBeGivenAsAJsonString\": \"OrAnXmlString\"}",
                    "instrumentType": "ExoticInstrument"
                  },
                  "myFavouriteLusidInstrument": {
                    "startDate": "2018-01-01T00:00:00.0000000+00:00",
                    "maturityDate": "2019-01-01T00:00:00.0000000+00:00",
                    "domAmount": 1,
                    "domCcy": "GBP",
                    "fgnAmount": -1.5,
                    "fgnCcy": "USD",
                    "refSpotRate": 1.5,
                    "isNdf": false,
                    "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                    "instrumentType": "FxForward"
                  }
                },
                "dialect": "targetDialect"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranslateInstrumentDefinitionsRequest"
              },
              "example": {
                "instruments": {
                  "myFavouriteInstrument": {
                    "instrumentFormat": {
                      "sourceSystem": "someSource",
                      "vendor": "someVendor",
                      "version": "someVersion"
                    },
                    "content": "{\"InstrumentContentShouldBeGivenAsAJsonString\": \"OrAnXmlString\"}",
                    "instrumentType": "ExoticInstrument"
                  },
                  "myFavouriteLusidInstrument": {
                    "startDate": "2018-01-01T00:00:00.0000000+00:00",
                    "maturityDate": "2019-01-01T00:00:00.0000000+00:00",
                    "domAmount": 1,
                    "domCcy": "GBP",
                    "fgnAmount": -1.5,
                    "fgnCcy": "USD",
                    "refSpotRate": 1.5,
                    "isNdf": false,
                    "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                    "instrumentType": "FxForward"
                  }
                },
                "dialect": "targetDialect"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TranslateInstrumentDefinitionsRequest"
              },
              "example": {
                "instruments": {
                  "myFavouriteInstrument": {
                    "instrumentFormat": {
                      "sourceSystem": "someSource",
                      "vendor": "someVendor",
                      "version": "someVersion"
                    },
                    "content": "{\"InstrumentContentShouldBeGivenAsAJsonString\": \"OrAnXmlString\"}",
                    "instrumentType": "ExoticInstrument"
                  },
                  "myFavouriteLusidInstrument": {
                    "startDate": "2018-01-01T00:00:00.0000000+00:00",
                    "maturityDate": "2019-01-01T00:00:00.0000000+00:00",
                    "domAmount": 1,
                    "domCcy": "GBP",
                    "fgnAmount": -1.5,
                    "fgnCcy": "USD",
                    "refSpotRate": 1.5,
                    "isNdf": false,
                    "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                    "instrumentType": "FxForward"
                  }
                },
                "dialect": "targetDialect"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TranslateInstrumentDefinitionsRequest"
              },
              "example": {
                "instruments": {
                  "myFavouriteInstrument": {
                    "instrumentFormat": {
                      "sourceSystem": "someSource",
                      "vendor": "someVendor",
                      "version": "someVersion"
                    },
                    "content": "{\"InstrumentContentShouldBeGivenAsAJsonString\": \"OrAnXmlString\"}",
                    "instrumentType": "ExoticInstrument"
                  },
                  "myFavouriteLusidInstrument": {
                    "startDate": "2018-01-01T00:00:00.0000000+00:00",
                    "maturityDate": "2019-01-01T00:00:00.0000000+00:00",
                    "domAmount": 1,
                    "domCcy": "GBP",
                    "fgnAmount": -1.5,
                    "fgnCcy": "USD",
                    "refSpotRate": 1.5,
                    "isNdf": false,
                    "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                    "instrumentType": "FxForward"
                  }
                },
                "dialect": "targetDialect"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully translated instruments along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TranslateInstrumentDefinitionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslateInstrumentDefinitionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslateInstrumentDefinitionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/datamap/{scope}": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Create data map",
        "description": "Create or update one or more structured result store address definition data maps in a particular scope. Note these are immutable and cannot be changed once created.\r\n            \r\nIn the request, each data map must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.\r\nIt serves only to easily identify each data map object in the response.\r\n            \r\nThe response returns both the collection of successfully created or updated data maps, as well as those that failed.\r\nFor each failure, a reason is provided.\r\n            \r\nIt is important to check the failed set for any unsuccessful results.",
        "operationId": "CreateDataMap",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create or update data maps.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which to create or update data maps."
            }
          }
        ],
        "requestBody": {
          "description": "Individual data map creation requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateDataMapRequest"
                },
                "description": "Individual data map creation requests."
              },
              "example": {}
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateDataMapRequest"
                },
                "description": "Individual data map creation requests."
              },
              "example": {}
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateDataMapRequest"
                },
                "description": "Individual data map creation requests."
              },
              "example": {}
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/CreateDataMapRequest"
                },
                "description": "Individual data map creation requests."
              },
              "example": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully created or updated data maps along with any failures.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/datamap/{scope}/$get": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Get data map",
        "description": "Retrieve one or more structured result store address definition data maps from a particular scope.\r\n            \r\nEach data map can be identified by its invariant key, which can be thought of as a permanent URL.\r\nFor each ID, LUSID returns the most recently matched item.\r\n            \r\nIn the request, each data map must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.\r\nIt serves only to easily identify each data map in the response.\r\n            \r\nThe response returns three collections. The first contains successfully retrieved data maps. The second contains those with a\r\nvalid identifier but that could not be found. The third contains those that failed because LUSID could not construct a valid identifier from the request.\r\n            \r\nFor the IDs that failed to resolve or could not be found, a reason is provided.\r\n            \r\nIt is important to check the failed sets for any unsuccessful results.",
        "operationId": "GetDataMap",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope from which to retrieve data maps.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope from which to retrieve data maps."
            }
          }
        ],
        "requestBody": {
          "description": "The data map keys to look up, each keyed by a unique, ephemeral correlation ID.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/DataMapKey"
                },
                "description": "The data map keys to look up, each keyed by a unique, ephemeral correlation ID."
              },
              "example": {}
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/DataMapKey"
                },
                "description": "The data map keys to look up, each keyed by a unique, ephemeral correlation ID."
              },
              "example": {}
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/DataMapKey"
                },
                "description": "The data map keys to look up, each keyed by a unique, ephemeral correlation ID."
              },
              "example": {}
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/DataMapKey"
                },
                "description": "The data map keys to look up, each keyed by a unique, ephemeral correlation ID."
              },
              "example": {}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved data maps along with any failures.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataMapResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataMapResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataMapResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/{scope}": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[BETA] Upsert structured result data",
        "description": "Create or update one or more structured result data items in a particular scope. An item is updated if it already exists\r\nand created if it does not.\r\n            \r\nIn the request, each data item must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.\r\nIt serves only to easily identify each data item in the response.\r\n            \r\nThe response returns both the collection of successfully created or updated data items, as well as those that failed.\r\nFor each failure, a reason is provided.\r\n            \r\nIt is important to check the failed set for any unsuccessful results.",
        "operationId": "UpsertStructuredResultData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create or update data items.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which to create or update data items."
            }
          }
        ],
        "requestBody": {
          "description": "The set of data items to create or update, keyed by a unique, ephemeral correlation ID.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredResultDataRequest"
                },
                "description": "The set of data items to create or update, keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "first-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults-1",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults-2",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 2",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredResultDataRequest"
                },
                "description": "The set of data items to create or update, keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "first-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults-1",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults-2",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 2",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredResultDataRequest"
                },
                "description": "The set of data items to create or update, keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "first-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults-1",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults-2",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 2",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertStructuredResultDataRequest"
                },
                "description": "The set of data items to create or update, keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "first-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults-1",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Xml",
                    "version": "1.0.0",
                    "name": "free text identifier of document 1",
                    "document": "<xml>data</xml>"
                  }
                },
                "second-item": {
                  "id": {
                    "source": "Client",
                    "code": "MyUploadedRiskResults-2",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "resultType": "Risk"
                  },
                  "data": {
                    "documentFormat": "Json",
                    "version": "1.0.0",
                    "name": "free text identifier of document 2",
                    "document": "{ \"some\":\"valid json\"}"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully created or updated data items along with any failures.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Beta"
      }
    },
    "/api/unitresults/{scope}/$delete": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Delete structured result data",
        "description": "Delete one or more structured result data items from a particular scope. Each item is identified by a unique ID which includes\r\ninformation about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).\r\n            \r\nIn the request, each data item must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.\r\nIt serves only to easily identify each data item in the response.\r\n            \r\nThe response returns both the collection of successfully deleted data items, as well as those that failed.\r\nFor each failure, a reason is provided.\r\n            \r\nIt is important to check the failed set for any unsuccessful results.",
        "operationId": "DeleteStructuredResultData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope from which to delete data items.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope from which to delete data items."
            }
          }
        ],
        "requestBody": {
          "description": "The data IDs to delete, each keyed by a unique, ephemeral correlation ID.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The data IDs to delete, each keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The data IDs to delete, each keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The data IDs to delete, each keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The data IDs to delete, each keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully deleted data items along with any failures.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/unitresults/{scope}/$get": {
      "post": {
        "tags": [
          "Structured Result Data"
        ],
        "summary": "[EXPERIMENTAL] Get structured result data",
        "description": "Retrieve one or more structured result data items from a particular scope.\r\n            \r\nEach item can be identified by its time invariant structured result data identifier. For each ID, LUSID\r\nreturns the most recently matched item with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified to control how far back to look from the specified\r\neffective datetime. LUSID returns the most recent item within this window.\r\n            \r\nIn the request, each data item must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.\r\nIt serves only to easily identify each data item in the response.\r\n\r\nThe response returns three collections. The first contains successfully retrieved data items. The second contains those with a\r\nvalid identifier but that could not be found. The third contains those that failed because LUSID could not construct a valid identifier from the request.\r\n\r\nFor the IDs that failed to resolve or could not be found, a reason is provided.\r\n            \r\nIt is important to check the failed sets for any unsuccessful results.",
        "operationId": "GetStructuredResultData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope from which to retrieve data items.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope from which to retrieve data items."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the structured result data. Defaults to returning the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the structured result data. Defaults to returning the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look-back window in ISO8601 time interval format, for example 'P1Y2M3DT4H30M' (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a data item must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look-back window in ISO8601 time interval format, for example 'P1Y2M3DT4H30M' (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a data item must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant set of structured data identifiers to retrieve, keyed by a unique, ephemeral correlation ID.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve, keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve, keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve, keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/StructuredResultDataId"
                },
                "description": "The time invariant set of structured data identifiers to retrieve, keyed by a unique, ephemeral correlation ID."
              },
              "example": {
                "someCorrelationId1": {
                  "source": "MiddleOffice",
                  "code": "MyUploadedRiskResults",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "resultType": "Risk"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved data items along with any failures.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredResultDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredResultDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStructuredResultDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    }
  },
  "components": {
    "schemas": {
      "A2BBreakdown": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "The total value of all the components within this category.",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "The currency. Applies to the Total, as well as all the componenents.",
            "nullable": true
          },
          "components": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The individual components that make up the category. For example, the Start category may have Cost, Unrealised gains and accrued interest components.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Breakdown - Shows the total, and each sub-element within an A2B Category"
      },
      "A2BCategory": {
        "type": "object",
        "properties": {
          "holdingCurrency": {
            "$ref": "#/components/schemas/A2BBreakdown"
          },
          "portfolioCurrency": {
            "$ref": "#/components/schemas/A2BBreakdown"
          }
        },
        "additionalProperties": false,
        "description": "A2B Category - one of the five major categories in the A2BDataRecord"
      },
      "A2BDataRecord": {
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "holdingType": {
            "type": "string",
            "description": "The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "flows": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "gains": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "carry": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "end": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Arbitrary string that can be used to cross reference an entry in the A2B report with activity in the A2B-Movements. This should be used purely as a token. The content should not be relied upon.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Record - shows values on, and changes between two dates: A and B"
      },
      "A2BMovementRecord": {
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "holdingType": {
            "type": "string",
            "description": "The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "nullable": true
          },
          "movementName": {
            "type": "string",
            "description": "The name of the movement.",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "description": "The date of the movement.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units of the instrument that are affected by the movement.",
            "format": "double"
          },
          "start": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "flows": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "gains": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "carry": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "end": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Arbitrary string that can be used to cross reference an entry in the A2B report with activity in the A2B-Movements. This should be used purely as a token. The content should not be relied upon.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Movement Record - shows A2B category based changes relating to a specific movement"
      },
      "AccessControlledAction": {
        "required": [
          "action",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the action"
          },
          "action": {
            "$ref": "#/components/schemas/ActionId"
          },
          "limitedSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdSelectorDefinition"
            },
            "description": "When populated, the provided values are the limited set of resources that are allowed to be specified for\r\naccess control for this action",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An action that can be access controlled"
      },
      "AccessControlledResource": {
        "required": [
          "actions",
          "description"
        ],
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "description": "The application to which this resource belongs",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The display name of the resource",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the resource"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledAction"
            },
            "description": "The actions acceptable for this type of resource"
          },
          "identifierParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierPartSchema"
            },
            "description": "The constituent parts of a valid identifier for this resource",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A resource to which access can be controlled"
      },
      "AccessMetadataValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An access control value. Provider should only be used if you are a service provide licensing data. In that case\r\nthe provider value must match your domain."
      },
      "AccountingMethod": {
        "enum": [
          "Default",
          "AverageCost",
          "FirstInFirstOut",
          "LastInFirstOut",
          "HighestCostFirst",
          "LowestCostFirst"
        ],
        "type": "string"
      },
      "ActionId": {
        "required": [
          "activity",
          "entity",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "activity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          },
          "entity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddBusinessDaysToDateRequest": {
        "required": [
          "businessDayOffset",
          "holidayCodes"
        ],
        "type": "object",
        "properties": {
          "businessDayOffset": {
            "type": "integer",
            "format": "int32"
          },
          "holidayCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "asAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddBusinessDaysToDateResponse": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The date that is the requested number of business days after the given start date"
      },
      "AdjustHolding": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdjustHoldingRequest": {
        "required": [
          "instrumentIdentifiers",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the holding adjustment to a unique instrument."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to store with the holding adjustment transaction automatically created by LUSID. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique holding properties and associated values to store with the target holding. Each property must be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLotRequest"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency. This needs to be equal with the one on the TaxLot -> cost if one is specified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This request specifies target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly."
      },
      "AggregatedReturn": {
        "required": [
          "effectiveAt",
          "metricsValue"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt for the return.",
            "format": "date-time"
          },
          "openingMarketValue": {
            "type": "number",
            "description": "The opening market value.",
            "format": "double",
            "nullable": true
          },
          "closingMarketValue": {
            "type": "number",
            "description": "The closing market value.",
            "format": "double",
            "nullable": true
          },
          "metricsValue": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The value for the specified metric."
          },
          "frequency": {
            "type": "string",
            "description": "Show the aggregated output returns on a Daily or Monthly period.",
            "nullable": true
          },
          "compositeMembers": {
            "type": "integer",
            "description": "The number of members in the Composite on the given day.",
            "format": "int32",
            "nullable": true
          },
          "compositeMembersWithoutReturn": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "List containing Composite members which post no return on the given day.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Aggregated Returns."
      },
      "AggregatedReturnsRequest": {
        "required": [
          "metrics"
        ],
        "type": "object",
        "properties": {
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReturnsMetric"
            },
            "description": "A list of metrics to calculate in the AggregatedReturns."
          },
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "compositeMethod": {
            "type": "string",
            "description": "The method used to calculate the Portfolio performance: Equal/Asset.",
            "nullable": true
          },
          "period": {
            "type": "string",
            "description": "The type of the returns used to calculate the aggregation result: Daily/Monthly.",
            "nullable": true
          },
          "outputFrequency": {
            "type": "string",
            "description": "The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request used in the AggregatedReturns."
      },
      "AggregateSpec": {
        "required": [
          "key",
          "op"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid."
          },
          "op": {
            "enum": [
              "Sum",
              "Proportion",
              "Average",
              "Count",
              "Min",
              "Max",
              "Value"
            ],
            "type": "string",
            "description": "The available values are: Sum, Proportion, Average, Count, Min, Max, Value"
          }
        },
        "additionalProperties": false
      },
      "AggregationContext": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/AggregationOptions"
          }
        },
        "additionalProperties": false,
        "description": "Aggregation context node. Whilst the market and pricing nodes concern themselves with which models are used and where the market data comes from, the aggregation\r\ncontext determines how data is aggregated together. This controls the behaviour of the grouping and sql-like engine at the back of the valuation. For instance,\r\nit controls conversion of currencies and whether the sql-like engine behaves more like ANSI or MySql SQL."
      },
      "AggregationMeasureFailureDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "measure": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregationOp": {
        "enum": [
          "Sum",
          "Proportion",
          "Average",
          "Count",
          "Min",
          "Max",
          "Value"
        ],
        "type": "string"
      },
      "AggregationOptions": {
        "type": "object",
        "properties": {
          "useAnsiLikeSyntax": {
            "type": "boolean",
            "description": "Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \"select a,sum(a) from results\";\r\nANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a)."
          }
        },
        "additionalProperties": false,
        "description": "Options for controlling the default aspects and behaviour of the aggregation."
      },
      "AggregationQuery": {
        "required": [
          "addressKey",
          "description",
          "displayName",
          "lifeCycleStatus",
          "removalDate",
          "scalesWithHoldingQuantity",
          "supportedOperations",
          "type"
        ],
        "type": "object",
        "properties": {
          "addressKey": {
            "type": "string",
            "description": "The address that is the query to be made into the system. e.g. a Valuation/Pv or Instrument/MaturityDate"
          },
          "description": {
            "type": "string",
            "description": "What does the information that is being queried by the address mean. What is the address for."
          },
          "displayName": {
            "type": "string",
            "description": "The suggested name that the user would wish to put on to the returned information for visualisation in preference to the address."
          },
          "type": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "ResultValue",
              "Array",
              "Map",
              "Json"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, ResultValue, Array, Map, Json"
          },
          "scalesWithHoldingQuantity": {
            "type": "boolean",
            "description": "Is the data scaled when it is for, e.g. a holding in an instrument. A key example would be the difference between price and pv. The present value\r\nof an instrument would scale with the quantity held. The price would be that for a hypothetical unit of that instrument, typically associated with the\r\ncontract size."
          },
          "supportedOperations": {
            "type": "string",
            "description": "When performing an aggregation operation, what column type operations can be performed on the data. For example, it makes sense to sum decimals but\r\nnot strings. Either can be counted. With more complex types, e.g. ResultValues, operations may be linked to a semantic meaning such as the currency\r\nof the result. In such cases the operations may be supported but context specific. For example, it makes sense to sum PVs in a single currency but not\r\nwhen the currency is different. In such cases, an error would result (it being assumed that no fx rates for currency conversion were implicit in the context)."
          },
          "lifeCycleStatus": {
            "type": "string",
            "description": "Within an API where an item can be accessed through an address or property, there is an associated status that determines\r\nwhether the item is stable or likely to change. This status is one of [Experimental, Beta, EAP, Prod,  Deprecated]. If the item is\r\ndeprecated it will be removed on or after the associated DateTime RemovalDate field. That field will not otherwise be set."
          },
          "removalDate": {
            "type": "string",
            "description": "If the life cycle status is set to deprecated then this will be populated with the date on or after which removal of the address query will happen",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AggregationType": {
        "enum": [
          "String",
          "Int",
          "Decimal",
          "DateTime",
          "Boolean",
          "ResultValue",
          "Array",
          "Map",
          "Json"
        ],
        "type": "string",
        "description": "A list of types, that define the expected output types found from an aggregation request in its result."
      },
      "Allocation": {
        "required": [
          "allocatedOrderId",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "portfolioId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocatedOrderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of given instrument allocated.",
            "format": "int32"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument allocated."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this allocation.",
            "nullable": true
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument allocated."
          },
          "placementIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A placement - also known as an order placed in the market - associated with this allocation.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of this allocation.",
            "nullable": true
          },
          "side": {
            "type": "string",
            "description": "The side of this allocation (examples: Buy, Sell, ...).",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of order associated with this allocation (examples: Limit, Market, ...).",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date for this allocation.",
            "format": "date-time"
          },
          "date": {
            "type": "string",
            "description": "The date of this allocation.",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The settlement currency of this allocation.",
            "nullable": true
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The settlement currency to allocation currency FX rate.",
            "format": "double"
          },
          "counterparty": {
            "type": "string",
            "description": "The counterparty for this allocation.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An Allocation of a certain quantity of a specific instrument against an originating\r\nOrder."
      },
      "AllocationRequest": {
        "required": [
          "allocatedOrderId",
          "id",
          "instrumentIdentifiers",
          "portfolioId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this allocation.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument allocated."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of given instrument allocated.",
            "format": "int32"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocatedOrderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A placement - also known as an order placed in the market - associated with this allocation.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of this allocation.",
            "nullable": true
          },
          "side": {
            "type": "string",
            "description": "The side of this allocation (examples: Buy, Sell, ...).",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of order associated with this allocation (examples: Limit, Market, ...).",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date for this allocation.",
            "format": "date-time"
          },
          "date": {
            "type": "string",
            "description": "The date of this allocation.",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The settlement currency of this allocation.",
            "nullable": true
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The settlement currency to allocation currency FX rate.",
            "format": "double"
          },
          "counterparty": {
            "type": "string",
            "description": "The counterparty for this allocation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Allocation."
      },
      "AllocationSetRequest": {
        "type": "object",
        "properties": {
          "allocationRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllocationRequest"
            },
            "description": "A collection of AllocationRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Allocations."
      },
      "AnnulQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The quotes which have been successfully deleted along with the asAt datetime at which the deletion was committed to LUSID.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be deleted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AnnulSingleStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The time at which the identifier was annulled",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response to a request to annul (delete) a set of structured data from Lusid. This might have been for market data or some other structured entity."
      },
      "AnnulStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The set of values that were removed.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values where removal failed, with a description as to why that is the case, e.g. badly formed request",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response to a request to annul (delete) a set of structured data from Lusid. This might have been for market data or some other structured entity."
      },
      "AssetClass": {
        "enum": [
          "InterestRates",
          "FX",
          "Inflation",
          "Equities",
          "Credit",
          "Commodities",
          "Unknown"
        ],
        "type": "string"
      },
      "Basket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "basketName",
              "basketType",
              "instrumentType",
              "weightedInstruments"
            ],
            "type": "object",
            "properties": {
              "basketName": {
                "$ref": "#/components/schemas/BasketIdentifier"
              },
              "basketType": {
                "type": "string",
                "description": "What contents does the basket have. The validation will check that the instrument types contained match those expected.\r\nSupported string (enumeration) values are: [Bonds, Credits, Equities, EquitySwap]."
              },
              "weightedInstruments": {
                "$ref": "#/components/schemas/WeightedInstruments"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Class that models a basket of risky instruments that can default.\r\nUpon default, the weight of a defaulting instrument can (will) change and this then affects the behaviour of the basket."
      },
      "BasketIdentifier": {
        "required": [
          "index",
          "name",
          "region",
          "seriesId"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "string",
            "description": "Index set, e.g. iTraxx or CDX"
          },
          "name": {
            "type": "string",
            "description": "The index name within the set, e.g. \"MAIN\" or \"Crossover\"."
          },
          "region": {
            "type": "string",
            "description": "Applicable geographic country or region. Typically something like \"Europe\", \"Asia ex-Japan\", \"Japan\" or \"Australia\"."
          },
          "seriesId": {
            "type": "integer",
            "description": "The series identifier.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Descriptive information that describes a particular basket of instruments. Most commonly required with a CDS Index or similarly defined instrument."
      },
      "Block": {
        "required": [
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "orderIds",
          "quantity",
          "side",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The related order ids."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this block.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The total quantity of given instrument ordered.",
            "format": "double"
          },
          "side": {
            "type": "string",
            "description": "The client's representation of the block's side (buy, sell, short, etc)"
          },
          "type": {
            "type": "string",
            "description": "The block order's type (examples: Limit, Market, ...)"
          },
          "timeInForce": {
            "type": "string",
            "description": "The block orders' time in force (examples: Day, GoodTilCancel, ...)"
          },
          "createdDate": {
            "type": "string",
            "description": "The date on which the block was made",
            "format": "date-time"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A block of orders for the same instrument, intended to record for example a trader's aggregation\r\nof outstanding orders at a given time."
      },
      "BlockRequest": {
        "required": [
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "orderIds",
          "quantity",
          "side",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The related order ids."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this block.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The total quantity of given instrument ordered.",
            "format": "double"
          },
          "side": {
            "type": "string",
            "description": "The client's representation of the block's side (buy, sell, short, etc)"
          },
          "type": {
            "type": "string",
            "description": "The block order's type (examples: Limit, Market, ...)"
          },
          "timeInForce": {
            "type": "string",
            "description": "The block orders' time in force (examples: Day, GoodTilCancel, ...)"
          },
          "createdDate": {
            "type": "string",
            "description": "The date on which the block was made",
            "format": "date-time"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Order."
      },
      "BlockSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockRequest"
            },
            "description": "A collection of BlockRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Blocks."
      },
      "Bond": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "couponRate",
              "domCcy",
              "flowConventions",
              "instrumentType",
              "maturityDate",
              "principal",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "flowConventions": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "principal": {
                "type": "number",
                "description": "The face-value or principal for the bond at outset.\r\n            This might be reduced through its lifetime in the event of amortization or similar.",
                "format": "double"
              },
              "couponRate": {
                "type": "number",
                "description": "simple coupon rate.",
                "format": "double"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "external market codes and identifiers for the bond, e.g. ISIN.",
                "nullable": true
              },
              "exDividendDays": {
                "type": "integer",
                "description": "The number of days before the next coupon payment for which the bond goes ex-dividend.",
                "format": "int32",
                "nullable": true
              },
              "initialCouponDate": {
                "type": "string",
                "description": "The initial coupon date which specifies the accrual start period for a fixed coupon bond with ex dividend schedule",
                "format": "date-time",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL Bond Instrument; Lusid-ibor internal representation of a Bond instrument"
      },
      "BucketedCashFlowRequest": {
        "required": [
          "roundingMethod"
        ],
        "type": "object",
        "properties": {
          "roundingMethod": {
            "type": "string",
            "description": "When bucketing, there is not a unique way to allocate the bucket points.\r\nRoundingMethod  \r\nSupported string (enumeration) values are: [RoundDown, RoundUp]."
          },
          "bucketingDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "A list of dates to perform cashflow bucketing upon.\r\nIf this is provided, the list of tenors for bucketing should be empty.",
            "nullable": true
          },
          "bucketTenors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of tenors to perform cashflow bucketing upon.\r\nIf this is provided, the list of dates for bucketing should be empty.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
            "nullable": true
          },
          "windowStart": {
            "type": "string",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\nThere is no lower bound if this is not specified.",
            "nullable": true
          },
          "windowEnd": {
            "type": "string",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.\r\nThe upper bound defaults to 'today' if it is not specified",
            "nullable": true
          },
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "reportCurrency": {
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification class consisting of parameters for BucketedCashFlow endpoint."
      },
      "BucketedCashFlowResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "description": "List of dictionary bucketed cash flow result set.\r\nEach dictionary represent a bucketed cashflow result set keyed by AddressKeys.\r\ne.g. dictionary[\"Valuation/CashFlowAmount\"] for the aggregated cash flow amount for the bucket.\r\ne.g. suppose \"RoundUp\" method, then dictionary[\"Valuation/CashFlowDate/RoundUp\"] returns the bucketed cashflow date.",
            "nullable": true
          },
          "reportCurrency": {
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCcy denominated queries.\r\nIf not present then the currency of the relevant portfolio will be used in its place where relevant.",
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Calendar": {
        "required": [
          "id",
          "properties",
          "sourceProvider",
          "type",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "type": "string"
          },
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        },
        "additionalProperties": false
      },
      "CalendarDate": {
        "required": [
          "dateIdentifier",
          "description",
          "fromUtc",
          "localDate",
          "timezone",
          "toUtc",
          "type"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "dateIdentifier": {
            "type": "string"
          },
          "fromUtc": {
            "type": "string",
            "format": "date-time"
          },
          "toUtc": {
            "type": "string",
            "format": "date-time"
          },
          "localDate": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/DateAttributes"
          },
          "sourceData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CashLadderRecord": {
        "required": [
          "activities",
          "close",
          "open"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "format": "date-time"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "activities": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "close": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CashPerpetual": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "instrumentType",
              "principal",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "principal": {
                "type": "number",
                "description": "The face-value or principal for the cash at outset.",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Cash Instrument; LUSID representation of a perpetual cash instrument."
      },
      "CdsFlowConventions": {
        "required": [
          "currency",
          "dayCountConvention",
          "paymentCalendars",
          "paymentFrequency",
          "resetCalendars",
          "resetDays",
          "rollConvention",
          "settleDays"
        ],
        "type": "object",
        "properties": {
          "rollFrequency": {
            "type": "string",
            "description": "The frequency at which the reference bonds are updated, this defaults to 6M, but can be 3M, exp for historically issued products",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention."
          },
          "paymentFrequency": {
            "type": "string",
            "description": "When generating a multiperiod flow, or when the maturity of the flow is not given but the start date is,\r\nthe tenor is the time-step from the anchor-date to the nominal maturity of the flow prior to any adjustment."
          },
          "dayCountConvention": {
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\nand difference between them.\r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365, ActActAFB, Act365Cad, ThirtyActIsda, Thirty365Isda, ThirtyEActIsda, ThirtyE360Isda, ThirtyE365Isda, ThirtyU360EOM]."
          },
          "rollConvention": {
            "type": "string",
            "description": "When generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.\r\nSupported string (enumeration) values are: [NoAdjustment, None, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, EndOfMonth, EOM, EndOfMonthPrevious, EOMP, EndOfMonthFollowing, EOMF]."
          },
          "paymentCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of payment schedules."
          },
          "resetCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of reset schedules."
          },
          "settleDays": {
            "type": "integer",
            "description": "Number of Good Business Days between the trade date and the effective or settlement date of the instrument.",
            "format": "int32"
          },
          "resetDays": {
            "type": "integer",
            "description": "The number of Good Business Days between determination and payment of reset.",
            "format": "int32"
          },
          "scope": {
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CdsIndex": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "basket",
              "couponRate",
              "identifiers",
              "instrumentType",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "flowConventions": {
                "$ref": "#/components/schemas/CdsFlowConventions"
              },
              "couponRate": {
                "type": "number",
                "description": "The coupon rate paid on each payment date of the premium leg as a fraction of 100 percent, e.g. \"0.05\" meaning 500 basis points or 5%.\r\nFor a standard corporate CDS (North American) this must be either 100bps or 500bps.",
                "format": "double"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "external market codes and identifiers for the cds index, e.g. a RED code, BBG ID or ICE code."
              },
              "basket": {
                "$ref": "#/components/schemas/Basket"
              },
              "conventionName": {
                "$ref": "#/components/schemas/FlowConventionName"
              },
              "notional": {
                "type": "number",
                "description": "The notional quantity that applies to both the premium and protection legs",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL CDS Index Instrument; Lusid-ibor internal representation of a Credit Default Swap Index instrument\r\nCalculation information and reference data can be obtained from Markit, e.g. https://www.markit.com/Documentation/Product/ITraxx"
      },
      "CdsProtectionDetailSpecification": {
        "required": [
          "payAccruedInterestOnDefault",
          "protectStartDay",
          "restructuringType",
          "seniority"
        ],
        "type": "object",
        "properties": {
          "seniority": {
            "enum": [
              "Unknown",
              "SNR",
              "SUB",
              "JRSUBUT2",
              "PREFT1",
              "SECDOM",
              "SNRFOR",
              "SUBLT2"
            ],
            "type": "string",
            "description": "The available values are: Unknown, SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2"
          },
          "restructuringType": {
            "enum": [
              "Unknown",
              "CR",
              "MR",
              "MM",
              "XR"
            ],
            "type": "string",
            "description": "The available values are: Unknown, CR, MR, MM, XR"
          },
          "protectStartDay": {
            "type": "boolean",
            "description": "Does the protection leg pay out in the case of default on the start date"
          },
          "payAccruedInterestOnDefault": {
            "type": "boolean",
            "description": "Should accrued interest on the premium leg be paid if a credit event occurs"
          }
        },
        "additionalProperties": false,
        "description": "CDSs generally conform to fairly standard definitions, but can be tweaked in a number of different ways.\r\nThis class gathers a number of common features which may deviate. These will default to the market standard when\r\nno overrides are provided"
      },
      "CdsRestructuringType": {
        "enum": [
          "Unknown",
          "CR",
          "MR",
          "MM",
          "XR"
        ],
        "type": "string"
      },
      "CdsSeniority": {
        "enum": [
          "Unknown",
          "SNR",
          "SUB",
          "JRSUBUT2",
          "PREFT1",
          "SECDOM",
          "SNRFOR",
          "SUBLT2"
        ],
        "type": "string"
      },
      "Change": {
        "required": [
          "amended",
          "corrected",
          "entityId"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "entityId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "corrected": {
            "type": "boolean",
            "description": ""
          },
          "correctionEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "correctionAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amended": {
            "type": "boolean",
            "description": ""
          },
          "amendmentEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amendmentAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The time an entity was modified (amendment and/or historical correction)."
      },
      "CompletePortfolio": {
        "required": [
          "id",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "If the portfolio is a transaction portfolio or derived transaction portfolio, this is the base currency of the portfolio.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompleteRelation": {
        "required": [
          "inwardDescription",
          "outwardDescription",
          "relationDefinitionId",
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "outwardDescription": {
            "type": "string"
          },
          "inwardDescription": {
            "type": "string"
          },
          "effectiveFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a relation containing details of source and target entities, and both outward and inward descriptions."
      },
      "CompleteRelationship": {
        "required": [
          "inwardDescription",
          "outwardDescription",
          "relationshipDefinitionId",
          "sourceEntity",
          "targetEntity"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "targetEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "outwardDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship definition's outward description."
          },
          "inwardDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship definition's inward description."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the relationship is valid.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a relationship containing details of source and target entities, and both outward and inward descriptions."
      },
      "ComplexMarketData": {
        "required": [
          "marketDataType"
        ],
        "type": "object",
        "properties": {
          "marketDataType": {
            "enum": [
              "DiscountFactorCurveData",
              "EquityVolSurfaceData",
              "FxVolSurfaceData",
              "IrVolCubeData",
              "OpaqueMarketData",
              "YieldCurveData"
            ],
            "type": "string",
            "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData"
          }
        },
        "additionalProperties": false,
        "description": "A base class for any form of market data with structure",
        "discriminator": {
          "propertyName": "marketDataType"
        }
      },
      "ComplexMarketDataId": {
        "required": [
          "provider"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the structured market data, e.g. 'DataScope', 'LUSID', 'ISDA' etc."
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the structured market data, e.g. a bank or financial institution.",
            "nullable": true
          },
          "lineage": {
            "type": "string",
            "description": "Description of the structured market data's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt or cut label that this item of structured market data is/was updated/inserted with.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "marketAsset": {
            "type": "string",
            "description": "The name of the market entity that the document represents",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely describes an item of complex market data such as an interest rate curve or volatility surface."
      },
      "ConfigurationRecipe": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the Configuration Recipe."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "User given string name (code) to identify the recipe."
          },
          "market": {
            "$ref": "#/components/schemas/MarketContext"
          },
          "pricing": {
            "$ref": "#/components/schemas/PricingContext"
          },
          "aggregation": {
            "$ref": "#/components/schemas/AggregationContext"
          },
          "inheritedRecipes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A list of parent recipes (scope,code) that can be used to share functionality between recipes. For instance one might use common recipes to set up\r\npricing for individual asset classes, e.g. rates or credit, and then combine them into a single recipe to be used by an exotics desk in conjunction with\r\nsome overrides that it requires for models or other pricing options.",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "User can assign a description to understand more humanly the recipe.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Configuration or Calculation Recipe controls how LUSID processes a given request.\r\nThis can be used to change where market data used in pricing is loaded from and in what order, or which model is used to\r\nprice a given instrument as well as how aggregation will process the produced results."
      },
      "ConfigurationRecipeSnippet": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the Configuration Recipe snippet"
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "User given string name (code) to identify the recipe."
          },
          "aggregationOptions": {
            "$ref": "#/components/schemas/AggregationOptions"
          },
          "modelRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorModelRule"
            },
            "description": "The set of model rules that are available. There may be multiple rules for Vendors, but only one per model-instrument pair.\r\nWhich of these preference sets is used depends upon the model choice selection if specified, or failing that the global default model specification\r\nin the options.",
            "nullable": true
          },
          "pricingOptions": {
            "$ref": "#/components/schemas/PricingOptions"
          },
          "marketRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataKeyRule"
            },
            "description": "The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.\r\nNominally any number are possible and will be processed in order where applicable. However, there is evidently a potential\r\nfor increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in\r\nsuch a way as to reduce the number of rules required is therefore sensible.",
            "nullable": true
          },
          "marketOptions": {
            "$ref": "#/components/schemas/MarketOptions"
          },
          "recipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          }
        },
        "additionalProperties": false,
        "description": "If it is desired to have multiple recipes, there is a strong likelihood that they will share various components.\r\nA configuration recipe snippet allows a user to define a set of rules that can then be included into a parent recipe.\r\nThis allows sharing of common blocks of the recipe.\r\n            \r\nFor example, a user might define a set of rules for resolving Fx and then include them into every recipe used firm-wide, thereby\r\nenforcing consistency. As the rules can be permissioned differently using Shrine, it is possible to enable users to \r\nread but not alter such a rule set.\r\n            \r\nThe same applies to a set of pricing rules.\r\n            \r\nA configuration snippet must only contain one entry from the available set. \r\n            \r\nRecipes are compiled from the set of snippets through a model that is analogous to inheritance.\r\nA recipe can have a set of 'parent' recipes from which it inherits. These are specified in the inheritance section of a recipe.\r\nUpon loading, the recipe will fall back on these recipe components for any options or rules that are not explicitly specified in the\r\nnamed recipe for the request.\r\n            \r\nThis allows control of pricing to be harmonised across a set of desks within an institution. Suppose that, e.g.\r\nthere are four desks looking after products under the areas of Fx, Rates, Credit and Exotics.\r\nThe model and market data for pricing given asset types would potentially be controlled by the appropriate desk; e.g. rules for Fx market data resolution being\r\ncontrolled by the Fx desk. The exotics desk would likely depend upon rules for all the other asset classes as well as, say, correlation rules of its own.\r\nIt could inherit the market data and model rules from the other desks for finding the appropriate institution-standard data and then overlay that with the correlation rules.\r\n            \r\nNote that permissioning of the store means that one could decide that only a particular desk or control function could update certain rules. That would assist the abilitiy\r\nto ensure that pricing is performed consistently and provide an audit of changes made to it along with restricting changes to appropriate authorised functions."
      },
      "ConstituentsAdjustmentHeader": {
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractForDifference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "contractSize",
              "instrumentType",
              "payCcy",
              "startDate",
              "type",
              "underlyingCcy",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the CFD.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The maturity date for the CFD. If CFDType is Futures, this should be set to be the maturity date of the underlying\r\nfuture. If CFDType is Cash, this should not be set.",
                "format": "date-time"
              },
              "code": {
                "type": "string",
                "description": "The code of the underlying."
              },
              "contractSize": {
                "type": "number",
                "description": "The size of the CFD contract, this should represent the total number of stocks that the CFD represents.",
                "format": "double"
              },
              "payCcy": {
                "type": "string",
                "description": "The currency that this CFD pays out, this can be different to the UnderlyingCcy."
              },
              "referenceRate": {
                "type": "number",
                "description": "The reference rate of the CFD, this can be set to 0 but not negative values.\r\nThis field is optional, if not set it will default to 0.",
                "format": "double"
              },
              "type": {
                "type": "string",
                "description": "The type of CFD.\r\nSupported string (enumeration) values are: [Cash, Futures]."
              },
              "underlyingCcy": {
                "type": "string",
                "description": "The currency of the underlying"
              },
              "underlyingIdentifier": {
                "type": "string",
                "description": "external market codes and identifiers for the CFD, e.g. RIC.\r\nSupported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode]."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL CFD Instrument; Lusid-ibor internal representation of a Contract For Difference instrument."
      },
      "CorporateAction": {
        "required": [
          "corporateActionCode"
        ],
        "type": "object",
        "properties": {
          "corporateActionCode": {
            "type": "string",
            "description": "The unique identifier of this corporate action"
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "announcementDate": {
            "type": "string",
            "description": "The announcement date of the corporate action",
            "format": "date-time"
          },
          "exDate": {
            "type": "string",
            "description": "The ex date of the corporate action",
            "format": "date-time"
          },
          "recordDate": {
            "type": "string",
            "description": "The record date of the corporate action",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "The payment date of the corporate action",
            "format": "date-time"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransition"
            },
            "description": "The transitions that result from this corporate action",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A corporate action"
      },
      "CorporateActionSource": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CorporateActionTransition": {
        "type": "object",
        "properties": {
          "inputTransition": {
            "$ref": "#/components/schemas/CorporateActionTransitionComponent"
          },
          "outputTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionComponent"
            },
            "description": "What will be generated relative to the input transition",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "CorporateActionTransitionComponent": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "instrumentUid",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "instrumentUid": {
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CorporateActionTransitionComponentRequest": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CorporateActionTransitionRequest": {
        "type": "object",
        "properties": {
          "inputTransition": {
            "$ref": "#/components/schemas/CorporateActionTransitionComponentRequest"
          },
          "outputTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionComponentRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "CounterpartyAgreement": {
        "required": [
          "agreementType",
          "counterpartySignatory",
          "creditSupportAnnexId",
          "datedAsOf",
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "A user-defined display label for the Counterparty Agreement."
          },
          "agreementType": {
            "type": "string",
            "description": "A user-defined field to capture the type of agreement this represents. Examples might be \"ISDA 2002 Master Agreement\" or \"ISDA 1992 Master Agreement\"."
          },
          "counterpartySignatory": {
            "$ref": "#/components/schemas/CounterpartySignatory"
          },
          "datedAsOf": {
            "type": "string",
            "description": "The date on which the CounterpartyAgreement was signed by both parties.",
            "format": "date-time"
          },
          "creditSupportAnnexId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "Represents the legal agreement between two parties engaged in an OTC transaction.\r\nA typical example would be a 2002 ISDA Master Agreement, signed by two legal entities on a given date."
      },
      "CounterpartyRiskInformation": {
        "required": [
          "countryOfRisk",
          "creditRatings",
          "industryClassifiers"
        ],
        "type": "object",
        "properties": {
          "countryOfRisk": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The country to which one would naturally ascribe risk, typically the legal entity's country of registration. This can be used to infer funding currency and related market data in the absence of a specific preference."
          },
          "creditRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditRating"
            },
            "description": ""
          },
          "industryClassifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndustryClassifier"
            },
            "description": ""
          }
        },
        "additionalProperties": false,
        "description": "In the event that the legal entity is a counterparty to an OTC transaction\r\n(as signatory to a counterparty agreement such as an ISDA 2002 Master Agreement),\r\nthis information would be needed for calculations\r\nsuch as Credit-Valuation-Adjustments and Debit-Valuation-Adjustments (CVA, DVA, XVA etc)."
      },
      "CounterpartySignatory": {
        "required": [
          "legalEntityIdentifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A user-defined name or label for the counterparty signatory.  There is no requirement for this to match the \"displayName\" of the legal entity."
          },
          "legalEntityIdentifier": {
            "$ref": "#/components/schemas/TypedResourceId"
          }
        },
        "additionalProperties": false,
        "description": "The counterpartyAgreement is signed by two parties, one of which is implicitly the LUSID user.\r\nThe CounterpartySignatory represents the 'other side' of the agreement.\r\nIt comprises a name and identifier for a Legal Entity in LUSID."
      },
      "CreateCalendarRequest": {
        "required": [
          "calendarId",
          "calendarType",
          "sourceProvider",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "calendarId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "calendarType": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCorporateActionSourceRequest": {
        "required": [
          "code",
          "displayName",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": ""
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCutLabelDefinitionRequest": {
        "required": [
          "code",
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "CreateDataMapRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/DataMapKey"
          },
          "data": {
            "$ref": "#/components/schemas/DataMapping"
          }
        },
        "additionalProperties": false,
        "description": "Request to create a new data map"
      },
      "CreateDataTypeRequest": {
        "required": [
          "code",
          "description",
          "displayName",
          "scope",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope that the data type will be created in."
          },
          "code": {
            "type": "string",
            "description": "The code of the data type. Together with the scope this uniquely defines the data type."
          },
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "Indicates the range of data acceptable by a data type. The available values are: Open, Closed"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the data type."
          },
          "description": {
            "type": "string",
            "description": "The description of the data type."
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The expected type of the values. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The acceptable set of values for this data type. Only applies to 'open' value type range.",
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The schema of the data type's units. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUnitDefinition"
            },
            "description": "The definitions of the acceptable units.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDateRequest": {
        "required": [
          "dateId",
          "description",
          "fromUtc",
          "timeZone",
          "toUtc"
        ],
        "type": "object",
        "properties": {
          "dateId": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "fromUtc": {
            "type": "string",
            "format": "date-time"
          },
          "toUtc": {
            "type": "string",
            "format": "date-time"
          },
          "timeZone": {
            "maxLength": 5,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "description": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "type": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "$ref": "#/components/schemas/DateAttributes"
          },
          "sourceData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDerivedPropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "CustomEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, CustomEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDerivedTransactionPortfolioRequest": {
        "required": [
          "code",
          "displayName",
          "parentPortfolioId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": ""
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "",
            "nullable": true
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "created": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": "The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioDetails": {
        "type": "object",
        "properties": {
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioGroupRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code that the portfolio group will be created with. Together with the scope this uniquely identifies the portfolio group."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolios to be contained within the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolio groups to be contained within the portfolio group as sub groups.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique group properties to add to the portfolio group. Each property must be from the 'PortfolioGroup' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'PortfolioGroup/Manager/Id'. These properties must be pre-defined.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "CustomEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, CustomEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key. Defaults to \"Property\" if not specified. Valid values for this field are: Property, Collection or Identifier.",
            "nullable": true
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRecipeRequest": {
        "required": [
          "effectiveAt",
          "recipeCreationMarketDataScopes"
        ],
        "type": "object",
        "properties": {
          "recipeCreationMarketDataScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The scopes in which the recipe creation would look for quotes/data."
          },
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "inlineRecipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The market data time, i.e. the recipe generated will look for rules with this effectiveAt.",
            "format": "dateorcutlabel"
          }
        },
        "additionalProperties": false,
        "description": "Specification class to request for the creation/supplementing of a configuration recipe"
      },
      "CreateReferencePortfolioRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": ""
          },
          "created": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Portfolio properties to add to the portfolio",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationDefinitionRequest": {
        "required": [
          "code",
          "displayName",
          "inwardDescription",
          "outwardDescription",
          "scope",
          "sourceEntityDomain",
          "targetEntityDomain"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope that the relation exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the relation. Together with the scope this uniquely defines the relation."
          },
          "sourceEntityDomain": {
            "type": "string",
            "description": "The entity domain of the source entity object must be, allowed values are \"Portfolio\" and \"Person\""
          },
          "targetEntityDomain": {
            "type": "string",
            "description": "The entity domain of the target entity object must be, allowed values are \"Portfolio\" and \"Person\""
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the relation."
          },
          "outwardDescription": {
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relations can change over time, allowed values are \"Perpetual\" and \"TimeVariant\"",
            "nullable": true
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \"Property\" and \"Collection\", defaults to \"Collection\" if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity."
          }
        },
        "additionalProperties": false
      },
      "CreateRelationshipDefinitionRequest": {
        "required": [
          "code",
          "displayName",
          "inwardDescription",
          "outwardDescription",
          "scope",
          "sourceEntityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope that the relationship definition exists in."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the relationship definition. Together with the scope this uniquely defines the relationship definition."
          },
          "sourceEntityType": {
            "type": "string",
            "description": "The entity type of the source entity object must be, allowed values are 'Portfolio', 'PortfolioGroup', 'Person' and 'LegalEntity'."
          },
          "targetEntityType": {
            "type": "string",
            "description": "The entity type of the target entity object must be, allowed values are 'Portfolio', 'PortfolioGroup', 'Person' and 'LegalEntity'."
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relationship definition."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relationships can change over time. Allowed values are 'Perpetual' and 'TimeVariant', defaults to 'Perpetual' if not specified.",
            "nullable": true
          },
          "relationshipCardinality": {
            "type": "string",
            "description": "Describes the cardinality of the relationship with a specific source entity object and relationships under this definition. Allowed values are 'ManyToMany' and 'OneToMany', defaults to 'ManyToMany' if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationshipRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity."
          },
          "effectiveFrom": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective date of the relationship to be created",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTransactionPortfolioRequest": {
        "required": [
          "baseCurrency",
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "A description for the transaction portfolio.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies the transaction portfolio."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which to create the transaction portfolio. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio in ISO 4217 currency code format."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": "Determines the accounting treatment given to the transaction portfolio's tax lots. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "A set of unique transaction properties to group the transaction portfolio's holdings by, perhaps for strategy tagging. Each property must be from the 'Transaction' domain and identified by a key in the format {domain}/{scope}/{code}, for example 'Transaction/strategies/quantsignal'. Note that sub-holding keys cannot currently be added after the transaction portfolio has been created; see https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique portfolio properties to add custom data to the transaction portfolio. Each property must be from the 'Portfolio' domain and identified by a key in the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'. Note these properties must be pre-defined.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateUnitDefinition": {
        "required": [
          "code",
          "description",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditDefaultSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "couponRate",
              "instrumentType",
              "maturityDate",
              "protectionDetailSpecification",
              "startDate",
              "ticker"
            ],
            "type": "object",
            "properties": {
              "ticker": {
                "type": "string",
                "description": "A ticker to uniquely specify then entity against which the cds is written"
              },
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "flowConventions": {
                "$ref": "#/components/schemas/CdsFlowConventions"
              },
              "couponRate": {
                "type": "number",
                "description": "The coupon rate paid on each payment date of the premium leg as a fraction of 100 percent, e.g. \"0.05\" meaning 500 basis points or 5%.\r\n            For a standard corporate CDS (North American) this must be either 100bps or 500bps.",
                "format": "double"
              },
              "conventionName": {
                "$ref": "#/components/schemas/FlowConventionName"
              },
              "protectionDetailSpecification": {
                "$ref": "#/components/schemas/CdsProtectionDetailSpecification"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL CDS Instrument; Lusid-ibor internal representation of a Credit Default Swap instrument"
      },
      "CreditRating": {
        "required": [
          "rating",
          "ratingSource"
        ],
        "type": "object",
        "properties": {
          "ratingSource": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The provider of the credit rating, which will typically be an agency such as Moody's or Standard and Poor."
          },
          "rating": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-+\\/]+$",
            "type": "string",
            "description": "The credit rating provided by the rating source. This would expected to be consistent with the rating scheme of that agency/source."
          }
        },
        "additionalProperties": false,
        "description": "Object describing a credit rating,\r\nwhich assesses the stability and credit worthiness of a legal entity\r\nand hence its likelihood of defaulting on its outstanding obligations (typically debt)."
      },
      "CreditSupportAnnex": {
        "required": [
          "collateralCurrencies",
          "id",
          "initialMarginAmount",
          "isdaAgreementVersion",
          "marginCallFrequency",
          "minimumTransferAmount",
          "referenceCurrency",
          "roundingDecimalPlaces",
          "thresholdAmount",
          "valuationAgent"
        ],
        "type": "object",
        "properties": {
          "referenceCurrency": {
            "type": "string",
            "description": "The base, or reference, currency against which MtM value and exposure should be calculated\r\nand in which the CSA parameters are defined if the currency is not otherwise explicitly stated."
          },
          "collateralCurrencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of currencies within which it is acceptable to post cash collateral."
          },
          "isdaAgreementVersion": {
            "type": "string",
            "description": "The transactions will take place with reference to a particular ISDA master agreement. This\r\nwill likely be either the ISDA 1992 or ISDA 2002 agremeents or ISDA close-out 2009."
          },
          "marginCallFrequency": {
            "type": "string",
            "description": "The tenor, e.g. daily (1D) or biweekly (2W), at which frequency a margin call will be made, calculations\r\nmade and money transferred to readjust. The calculation might also require a specific time for valuation and notification."
          },
          "valuationAgent": {
            "type": "string",
            "description": "Are the calculations performed by the institutions's counterparty or the institution trading with them."
          },
          "thresholdAmount": {
            "type": "number",
            "description": "At what level of exposure does collateral need to be posted. Will typically be zero for banks.\r\nShould be stated in reference currency",
            "format": "double"
          },
          "roundingDecimalPlaces": {
            "type": "integer",
            "description": "Where a calculation needs to be rounded to a specific number of decimal places,\r\nthis states the number that that requires.",
            "format": "int32"
          },
          "initialMarginAmount": {
            "type": "number",
            "description": "The initial margin that is required. In the reference currency",
            "format": "double"
          },
          "minimumTransferAmount": {
            "type": "number",
            "description": "The minimum amount, in the reference currency, that must be transferred when required.",
            "format": "double"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "Entity to capture the calculable and queryable methods and practices of determining and transferring collateral\r\nto a counterparty as part of margining of transactions. These typically come from a particular ISDA agreement\r\nthat is in place between the two counterparties."
      },
      "CrossCurrencySwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentType",
              "legs",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "legs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentLeg"
                },
                "description": "The set of instrument legs that define the swap instrument."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL Cross Currency Swap Instrument; Lusid-ibor internal representation of a Cross Currency Swap instrument\r\nA Cross Currency Swap is the exchange of two sets of cashflows (of differing currencies) occurring at one or more dates.\r\nThese may include a notional exchange at the start and, or, maturity of the trade. Depending upon the choice of\r\npayment currency, payment frequency and so on they can be used to match sets of future obligations"
      },
      "CurrencyAndAmount": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An amount of a specific currency, specifying a value and an associated unit"
      },
      "CustomEntityDefinition": {
        "required": [
          "displayName",
          "entityType",
          "entityTypeName",
          "fieldSchema"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "entityTypeName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "entityType": {
            "type": "string"
          },
          "fieldSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityFieldDefinition"
            }
          }
        },
        "additionalProperties": false,
        "description": "Representation of Custom Entity Definition on LUSID API"
      },
      "CustomEntityDefinitionRequest": {
        "required": [
          "displayName",
          "entityTypeName"
        ],
        "type": "object",
        "properties": {
          "entityTypeName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "fieldSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityFieldDefinition"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntityField": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "CustomEntityFieldDefinition": {
        "required": [
          "lifetime",
          "name",
          "required",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "lifetime": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CustomEntityIdRequest": {
        "required": [
          "identifierScope",
          "identifierType",
          "identifierValue"
        ],
        "type": "object",
        "properties": {
          "identifierScope": {
            "type": "string"
          },
          "identifierType": {
            "type": "string"
          },
          "identifierValue": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CustomEntityIdResponse": {
        "required": [
          "asAtRange",
          "effectiveRange",
          "identifierScope",
          "identifierType",
          "identifierValue"
        ],
        "type": "object",
        "properties": {
          "identifierScope": {
            "type": "string"
          },
          "identifierType": {
            "type": "string"
          },
          "identifierValue": {
            "type": "string"
          },
          "effectiveRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "asAtRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        },
        "additionalProperties": false
      },
      "CustomEntityRequest": {
        "required": [
          "description",
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "effectiveAt": {
            "type": "string",
            "nullable": true
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityIdRequest"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntityResponse": {
        "required": [
          "asAtRange",
          "customEntityId",
          "displayName",
          "effectiveRange",
          "entityType",
          "fields",
          "identifiers",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "entityType": {
            "type": "string",
            "description": "The EntityType to be used when relations are created to the CustomEntity"
          },
          "customEntityId": {
            "type": "string",
            "description": "A unique identifier for the CustomEntity"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the CustomEntity"
          },
          "description": {
            "type": "string",
            "description": "The description of the CustomEntity",
            "nullable": true
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityIdResponse"
            },
            "description": "A collection of CustomEntityIdentifiers that can identify the CustomEntity"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityField"
            },
            "description": "A collection of CustomEntityFields that decorate the CustomEntity"
          },
          "effectiveRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "asAtRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CutLabelDefinition": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CutLocalTime": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataDefinition": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The internal address (LUSID native) of the unit in the provided data itself and corresponds to the external name of the data item",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the data item. This is the name that will appear",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "A member of the set of possible data types, that all data passed under that key is expected to be of.\r\nCurrently limited to one of [string, integer, decimal].",
            "nullable": true
          },
          "keyType": {
            "type": "string",
            "description": "Is the item either a unique key for the dictionary, i.e. does it identify a unique index or conceptual 'row' within the list of dictionaries,\r\nor a partial key or is it simply a data item within that dictionary. Must be one of [Unique,PartOfUnique,Leaf]",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When importing data from an external data source, in order for it to be reliable queryable, LUSID needs to know something about it.\r\nA data definition tells LUSID, what a given external data item is, what type it is and whether it in some way identifies items of data.\r\nConsider presenting LUSID with a list of dictionaries where each dictionary contains the same set of keys (names). Each data item pointed to by\r\na key would be expected to be of the same type (integer, string, decimal etc.). To identify a particular dictionary from the list, a tuple of\r\none or more of the items in the dictionary would make it unique. If only a single item is required then the"
      },
      "DataMapKey": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of the mappings. It is possible that a client will wish to update mappings over time. The version identifies the MAJOR.MINOR.PATCH version\r\nof the mappings that the client assigns it.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A unique name to semantically identify the mapping set.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataMapping": {
        "type": "object",
        "properties": {
          "dataDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataDefinition"
            },
            "description": "A map from LUSID item keys to data definitions that define the names, types and degree of uniqueness of data provided to LUSID in structured data stores.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When importing data from an external source there are essentially three levels of interaction with LUSID.\r\n(1) The data is a raw document that LUSID does not understand. You can store and retrieve it but it does not full interact with other documents inside LUSID\r\n(2) The data has a map from fields and paths to 'properties' in LUSID. In essence, LUSID can then treat the data as weakly typed (decimal, string) data that can be returned through queries\r\n    and where various aggregation requests will then work.\r\n(3) The data is fully translatable into LUSID and understood, in some sense, natively. This means that it can be used for context sensitive calculations such as pricing or risk calculations.\r\nThe data map object is designed to allow data to transition from step 1 to 2 and in some cases as an alternative for step 2 to 3."
      },
      "DataType": {
        "required": [
          "description",
          "displayName",
          "id",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "The available values are: Open, Closed"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataTypeValueRange": {
        "enum": [
          "Open",
          "Closed"
        ],
        "type": "string",
        "description": "This class indicates what the range of data acceptable by a data type"
      },
      "DateAttributes": {
        "required": [
          "irregular",
          "irregularSession",
          "newHours"
        ],
        "type": "object",
        "properties": {
          "irregular": {
            "type": "boolean"
          },
          "irregularSession": {
            "type": "boolean"
          },
          "newHours": {
            "type": "boolean"
          },
          "activity": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "firstOpen": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "lastOpen": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "firstClose": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          },
          "lastClose": {
            "maxLength": 100,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateRange": {
        "required": [
          "fromDate"
        ],
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "untilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "DeletedEntityResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which the deletion became valid. May be null in the case where multiple date times are applicable.",
            "format": "date-time",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the deletion was committed to LUSID.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentPropertiesResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "asAt": {
            "type": "string",
            "description": "The as-at datetime at which properties were deleted.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The as-at datetime at which the instrument was deleted.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteRelationRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity of the relation to be deleted."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity of the relation to be deleted."
          }
        },
        "additionalProperties": false
      },
      "DeleteRelationshipRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity of the relationship to be deleted."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity of the relationship to be deleted."
          },
          "effectiveFrom": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective date of the relationship to be deleted",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeliveryType": {
        "enum": [
          "Cash",
          "Physical"
        ],
        "type": "string"
      },
      "DiscountFactorCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "dates",
              "discountFactors",
              "marketDataType"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "BaseDate for the Curve",
                "format": "date-time"
              },
              "dates": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "Dates for which the discount factors apply"
              },
              "discountFactors": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "description": "Discount factors to be applied to cashflow on the specified dates"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData"
              }
            }
          }
        ],
        "description": "A curve containing discount factors and dates to which they apply"
      },
      "EquityOption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "deliveryType",
              "domCcy",
              "instrumentType",
              "optionMaturityDate",
              "optionSettlementDate",
              "optionType",
              "startDate",
              "strike",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "optionMaturityDate": {
                "type": "string",
                "description": "The maturity date of the option.",
                "format": "date-time"
              },
              "optionSettlementDate": {
                "type": "string",
                "description": "The settlement date of the option.",
                "format": "date-time"
              },
              "deliveryType": {
                "enum": [
                  "Cash",
                  "Physical"
                ],
                "type": "string",
                "description": "The available values are: Cash, Physical"
              },
              "optionType": {
                "enum": [
                  "None",
                  "Call",
                  "Put"
                ],
                "type": "string",
                "description": "The available values are: None, Call, Put"
              },
              "strike": {
                "type": "number",
                "description": "The strike of the option.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "underlyingIdentifier": {
                "enum": [
                  "LusidInstrumentId",
                  "Isin",
                  "Sedol",
                  "Cusip",
                  "ClientInternal",
                  "Figi",
                  "RIC",
                  "QuotePermId",
                  "REDCode",
                  "BBGId",
                  "ICECode"
                ],
                "type": "string",
                "description": "The available values are: LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode"
              },
              "code": {
                "type": "string",
                "description": "The identifying code for the equity underlying, e.g. 'IBM.N'."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Lusid-ibor internal representation of a plain vanilla equity option instrument."
      },
      "EquitySwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "code",
              "equityFlowConventions",
              "fundingLeg",
              "includeDividends",
              "initialPrice",
              "instrumentType",
              "maturityDate",
              "notionalReset",
              "quantity",
              "startDate",
              "underlyingIdentifier"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the EquitySwap",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The maturity date of the EquitySwap.",
                "format": "date-time"
              },
              "code": {
                "type": "string",
                "description": "The code of the underlying."
              },
              "equityFlowConventions": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "fundingLeg": {
                "$ref": "#/components/schemas/InstrumentLeg"
              },
              "includeDividends": {
                "type": "boolean",
                "description": "Dividend inclusion flag, if true dividends are included in the equity leg (total return)."
              },
              "initialPrice": {
                "type": "number",
                "description": "The initial equity price of the Equity Swap.",
                "format": "double"
              },
              "notionalReset": {
                "type": "boolean",
                "description": "Notional reset flag, if true the notional of the funding leg is reset at the start of every\r\ncoupon to match the value of the equity leg (equity price at start of coupon times quantity)"
              },
              "quantity": {
                "type": "number",
                "description": "The quantity or number of shares in the Equity Swap.",
                "format": "double"
              },
              "underlyingIdentifier": {
                "type": "string",
                "description": "external market codes and identifiers for the EquitySwap, e.g. RIC.\r\nSupported string (enumeration) values are: [LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode]."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Lusid-ibor internal representation of an Equity Swap instrument."
      },
      "EquityVolSurfaceData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "instruments",
              "marketDataType",
              "quotes"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "Base date of the surface",
                "format": "date-time"
              },
              "instruments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "The set of instruments that define the surface."
              },
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketQuote"
                },
                "description": "The set of market quotes that define the surface, in NormalVol or LogNormalVol terms."
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData"
              }
            }
          }
        ],
        "description": "Market Data for an equity vol surface, represented by a list of instruments and corresponding market quotes"
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the failed item that this error relates to.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of failure that occurred.",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "Description of the failure that occurred.",
            "nullable": true
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Information about the particular instance of the failure (supplied information depends on the type of failure).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Execution": {
        "required": [
          "counterparty",
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "placementId",
          "price",
          "quantity",
          "settlementCurrency",
          "settlementCurrencyFxRate",
          "side",
          "state",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this execution.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument execution."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "state": {
            "type": "string",
            "description": "The state of this execution (typically a FIX state; Open, Filled, etc)."
          },
          "side": {
            "type": "string",
            "description": "The side (Buy, Sell, ...) of this execution."
          },
          "type": {
            "type": "string",
            "description": "The type of this execution (Market, Limit, etc)."
          },
          "createdDate": {
            "type": "string",
            "description": "The active date of this execution.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The (optional) settlement date for this execution",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The execution's settlement currency."
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The exectuion's settlement currency rate.",
            "format": "double"
          },
          "counterparty": {
            "type": "string",
            "description": "The market entity this placement is placed with."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The record of a number of executions against a single Placement (directly analogous to\r\na partial or full fill against a street order)."
      },
      "ExecutionRequest": {
        "required": [
          "counterparty",
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "placementId",
          "price",
          "quantity",
          "settlementCurrency",
          "settlementCurrencyFxRate",
          "side",
          "state",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this execution.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "state": {
            "type": "string",
            "description": "The state of this execution (typically a FIX state; Open, Filled, etc)."
          },
          "side": {
            "type": "string",
            "description": "The side (Buy, Sell, ...) of this execution."
          },
          "type": {
            "type": "string",
            "description": "The type of this execution (Market, Limit, etc)."
          },
          "createdDate": {
            "type": "string",
            "description": "The active date of this execution.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The (optional) settlement date for this execution",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The execution's settlement currency."
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The exectuion's settlement currency rate.",
            "format": "double"
          },
          "counterparty": {
            "type": "string",
            "description": "The market entity this placement is placed with."
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update a Execution."
      },
      "ExecutionSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionRequest"
            },
            "description": "A collection of ExecutionRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Executions."
      },
      "ExoticInstrument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "content",
              "instrumentFormat",
              "instrumentType"
            ],
            "type": "object",
            "properties": {
              "instrumentFormat": {
                "$ref": "#/components/schemas/InstrumentDefinitionFormat"
              },
              "content": {
                "type": "string",
                "description": "The original document received into the system. This format could potentially be anything though is most likely to be either Json or Xml. In the case where no other\r\n            interface is supported it is possible to fall back onto this.\r\n            For example, a trade from an external client system. This may be recognized internally by Lusid or simply passed through to another vendor system."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Class modeling an instrument which is not fully described, in the sense of being able to obtain a price or other analytic result,\r\n            by a simple SecurityUid. This would include non-exchange traded instruments such as an interest-rate-swap (IRS) and obviously 3rd generation exotics\r\n            like FX-TARNs or FX-Chooser-Redeemers and Credit instruments like CDS or Tranches."
      },
      "ExpandedGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletePortfolio"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpandedGroup"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeCalculationDetails": {
        "required": [
          "additionalInformation",
          "amount",
          "calculationMethod",
          "max",
          "min",
          "propertyKey",
          "ruleInformation",
          "ruleType"
        ],
        "type": "object",
        "properties": {
          "ruleType": {
            "type": "string",
            "description": "Rule Type"
          },
          "ruleInformation": {
            "type": "string",
            "description": "Rule Sub Type"
          },
          "additionalInformation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Other property keys populated for the fee"
          },
          "propertyKey": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'."
          },
          "calculationMethod": {
            "type": "string",
            "description": "Method of calculating the fees or commission eg. BPS or Fraction"
          },
          "amount": {
            "type": "number",
            "description": "Calculation value",
            "format": "double"
          },
          "min": {
            "type": "number",
            "description": "Calculation value",
            "format": "double"
          },
          "max": {
            "type": "number",
            "description": "Calculation value",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "FieldSchema": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "fileStream": {
            "$ref": "#/components/schemas/Stream"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "downloadedFilename": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Allows a file (represented as a stream) to be returned from an Api call"
      },
      "FixedLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "format": "double"
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "Amortization": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "Spreads": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  }
                },
                "additionalProperties": false,
                "description": "Any overriding data for notionals, spreads or rates that would affect generation of a leg.\r\n            This supports the case where an amortization schedule is given but otherwise generation is allowed as usual.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "representation of a fixed rates leg"
      },
      "FloatingLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "description": "scaling factor to apply to leg quantities.",
                "format": "double"
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "Amortization": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "Spreads": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  }
                },
                "additionalProperties": false,
                "description": "Any overriding data for notionals, spreads or rates that would affect generation of a leg.\r\n            This supports the case where an amortization schedule is given but otherwise generation is allowed as usual.",
                "nullable": true
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "representation of a floating rates leg"
      },
      "FlowConventionName": {
        "required": [
          "currency",
          "tenor"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention name."
          },
          "indexName": {
            "type": "string",
            "description": "The index, if present, that is required. e.g. \"IBOR\", \"OIS\" or \"SONIA\".",
            "nullable": true
          },
          "tenor": {
            "type": "string",
            "description": "Tenor for the convention name"
          }
        },
        "additionalProperties": false,
        "description": "Representation of an abstract definition of a flow convention set consisting of currency, tenor and an index name (arbitrary string but likely something like \"IBOR\")"
      },
      "FlowConventions": {
        "required": [
          "currency",
          "dayCountConvention",
          "paymentCalendars",
          "paymentFrequency",
          "resetCalendars",
          "resetDays",
          "rollConvention",
          "settleDays"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency of the flow convention."
          },
          "paymentFrequency": {
            "type": "string",
            "description": "When generating a multiperiod flow, or when the maturity of the flow is not given but the start date is,\r\nthe tenor is the time-step from the anchor-date to the nominal maturity of the flow prior to any adjustment."
          },
          "dayCountConvention": {
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\nand difference between them.\r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365, ActActAFB, Act365Cad, ThirtyActIsda, Thirty365Isda, ThirtyEActIsda, ThirtyE360Isda, ThirtyE365Isda, ThirtyU360EOM]."
          },
          "rollConvention": {
            "type": "string",
            "description": "When generating a set of dates, what convention should be used for adjusting dates that coincide with a non-business day.\r\nSupported string (enumeration) values are: [NoAdjustment, None, Previous, P, Following, F, ModifiedPrevious, MP, ModifiedFollowing, MF, EndOfMonth, EOM, EndOfMonthPrevious, EOMP, EndOfMonthFollowing, EOMF]."
          },
          "paymentCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of payment schedules."
          },
          "resetCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings denoting holiday calendars that apply to generation of reset schedules."
          },
          "settleDays": {
            "type": "integer",
            "description": "Number of Good Business Days between the trade date and the effective or settlement date of the instrument.",
            "format": "int32"
          },
          "resetDays": {
            "type": "integer",
            "description": "The number of Good Business Days between determination and payment of reset.",
            "format": "int32"
          },
          "scope": {
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A flow convention defines the specification for generation of the date schedule for a leg or set of cashflows.\r\nIt determines the tenor of these and, how to map the unadjusted set of dates to dates which are 'good business\r\ndays'. For example, if an unadjusted date falls on a Saturday or a bank holiday, should it be rolled forward\r\nor backward to obtain the adjusted date."
      },
      "ForwardRateAgreement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "fixingDate",
              "fraRate",
              "instrumentType",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "fixingDate": {
                "type": "string",
                "description": "The date at which the rate to be paid, the reference rate, is confirmed/observed",
                "format": "date-time"
              },
              "fraRate": {
                "type": "number",
                "description": "The rate at which the FRA is traded.",
                "format": "double"
              },
              "notional": {
                "type": "number",
                "description": "The amount for which the FRA is traded.",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Forward Rate Agreement"
      },
      "FundingLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentLeg"
          },
          {
            "required": [
              "instrumentType",
              "legDefinition",
              "maturityDate",
              "notional",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "format": "date-time"
              },
              "legDefinition": {
                "$ref": "#/components/schemas/LegDefinition"
              },
              "notional": {
                "type": "number",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL FundingLeg Instrument; Lusid-ibor internal representation of a funding leg with variable notional.\r\nThis instrument is a hybrid between a single leg swap and a bank account, in that the notional is not fixed but\r\ncan be changed over it's life. The use case for this is to represent the funding leg of a basket of instruments\r\n(e.g. equities) where the contents of the basket can change over time.\r\nThe actual notional history is stored in the FundingLegHistory object (implements IHistory) and this can be updated\r\nexternally or in some circumstances automatically by LUSID.\r\nThe main analytic calculated for this instrument is Accrual rather than PV."
      },
      "Future": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "contractDetails",
              "identifiers",
              "instrumentType",
              "maturityDate",
              "startDate",
              "underlying"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "identifiers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "external market codes and identifiers for the bond, e.g. ISIN."
              },
              "contractDetails": {
                "$ref": "#/components/schemas/FuturesContractDetails"
              },
              "contracts": {
                "type": "number",
                "description": "The number of contracts held",
                "format": "double"
              },
              "refSpotPrice": {
                "type": "number",
                "description": "The reference spot price for the future at which the contract was entered into.",
                "format": "double"
              },
              "underlying": {
                "$ref": "#/components/schemas/LusidInstrument"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL Fx-Forward Instrument; Lusid-ibor internal representation of a Fx Forward instrument\r\n            \r\n             A future contract, entered into on the start date at an initial reference spot price has zero initial value. It is a committment to buy a certain number of\r\n             contracts of a certain size at a date in the future."
      },
      "FuturesContractDetails": {
        "required": [
          "contractCode",
          "contractMonth",
          "contractSize",
          "convention",
          "country",
          "description",
          "domCcy",
          "exchangeCode",
          "exchangeName",
          "tickerStep",
          "unitValue"
        ],
        "type": "object",
        "properties": {
          "domCcy": {
            "type": "string",
            "description": "currency in which the contract is paid."
          },
          "contractCode": {
            "type": "string",
            "description": "The two letter contract code abbreviation. e.g. CL => Crude Oil."
          },
          "contractMonth": {
            "type": "string",
            "description": "which month does the contract trade for.\r\nSupported string (enumeration) values are: [F, G, H, J, K, M, N, Q, U, V, X, Z]."
          },
          "contractSize": {
            "type": "number",
            "description": "Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such.",
            "format": "double"
          },
          "convention": {
            "type": "string",
            "description": "If appropriate, the day count convention method used in pricing (rates futures)"
          },
          "country": {
            "type": "string",
            "description": "Country (code) for the exchange."
          },
          "description": {
            "type": "string",
            "description": "Description of contract"
          },
          "exchangeCode": {
            "type": "string",
            "description": "Exchange code for contract\r\nSupported string (enumeration) values are: [ASX, CBOT, CBF, CME, CMX, EOP, HKG, KFE, MFM, OSE, SGX, NYBOT, KCBT, MGE, MATIF, SFE, NYFE, NYM, LIFFE, EUREX, ICE, MSE]."
          },
          "exchangeName": {
            "type": "string",
            "description": "Exchange name (for when code is not automatically recognized)"
          },
          "tickerStep": {
            "type": "number",
            "description": "Minimal step size change in ticker",
            "format": "double"
          },
          "unitValue": {
            "type": "number",
            "description": "The value in the currency of a 1 unit change in the contract price",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Most, if not all, information about contracts is standardized. See, e.g. https://www.cmegroup.com/ for\r\n            common codes and similar data. This appears to be in common use by well known market information providers, e.g. Bloomberg and Refinitiv."
      },
      "FxForward": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domAmount",
              "domCcy",
              "fgnAmount",
              "fgnCcy",
              "instrumentType",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "domAmount": {
                "type": "number",
                "description": "The amount that is to be paid in the domestic currency on the maturity date.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "fgnAmount": {
                "type": "number",
                "description": "The amount that is to be paid in the foreign currency on the maturity date",
                "format": "double"
              },
              "fgnCcy": {
                "type": "string",
                "description": "The foreign (other) currency of the instrument. In the NDF case, only payments are made in the domestic currency.\r\n            For the outright forward, currencies are exchanged. By domestic is then that of the portfolio."
              },
              "refSpotRate": {
                "type": "number",
                "description": "The reference Fx Spot rate for currency pair Foreign-Domestic that was seen on the trade start date (time).",
                "format": "double"
              },
              "isNdf": {
                "type": "boolean",
                "description": "Is the contract an Fx-Forward of \"Non-Deliverable\" type, meaning a single payment in the domestic currency based on the change in fx-rate vs\r\n            a reference rate is used."
              },
              "fixingDate": {
                "type": "string",
                "description": "The fixing date .",
                "format": "date-time"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL Fx-Forward Instrument; Lusid-ibor internal representation of a Fx Forward instrument"
      },
      "FxOption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "domCcy",
              "fgnCcy",
              "instrumentType",
              "isCallNotPut",
              "isDeliveryNotCash",
              "optionMaturityDate",
              "optionSettlementDate",
              "startDate",
              "strike"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "optionMaturityDate": {
                "type": "string",
                "description": "The maturity date of the option.",
                "format": "date-time"
              },
              "optionSettlementDate": {
                "type": "string",
                "description": "The settlement date of the option.",
                "format": "date-time"
              },
              "isDeliveryNotCash": {
                "type": "boolean",
                "description": "True of the option is settled in cash false if delivery."
              },
              "isCallNotPut": {
                "type": "boolean",
                "description": "True if the option is a call, false if the option is a put."
              },
              "strike": {
                "type": "number",
                "description": "The strike of the option.",
                "format": "double"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "fgnCcy": {
                "type": "string",
                "description": "The foreign currency of the FX."
              },
              "premium": {
                "$ref": "#/components/schemas/Premium"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Lusid-ibor internal representation of a plain vanilla FX Option instrument."
      },
      "FxSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "farFxForward",
              "instrumentType",
              "nearFxForward"
            ],
            "type": "object",
            "properties": {
              "nearFxForward": {
                "$ref": "#/components/schemas/FxForward"
              },
              "farFxForward": {
                "$ref": "#/components/schemas/FxForward"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL FX Swap Instrument; Lusid-ibor internal representation of an FX Swap instrument"
      },
      "FxVolSurfaceData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "instruments",
              "marketDataType",
              "quotes"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "Base date of the surface",
                "format": "date-time"
              },
              "instruments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "The set of instruments that define the surface."
              },
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketQuote"
                },
                "description": "The set of market quotes that define the surface, in NormalVol or LogNormalVol terms."
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData"
              }
            }
          }
        ],
        "description": "Market Data for an fx vol surface, represented by a list of fx options and corresponding market quotes"
      },
      "GetCdsFlowConventionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/CdsFlowConventions"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers that did not resolve to a conventions along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetComplexMarketDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComplexMarketData"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCounterpartyAgreementResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/CounterpartyAgreement"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The counterparty agreement that could not be retrieved along with a reason for failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCreditSupportAnnexResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/CreditSupportAnnex"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The credit support annex that could not be updated or inserted along with a reason for failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetDataMapResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DataMapping"
            },
            "description": "TODO",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "TODO",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetFlowConventionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/FlowConventions"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers that did not resolve to a conventions along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetIndexConventionResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/IndexConvention"
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers that did not resolve to a conventions along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instrument definitions, keyed by the identifier used to retrieve them. Only instruments that were found will be contained in this collection.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers that did not resolve to an instrument along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully retrieved.",
            "nullable": true
          },
          "notFound": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be found along with a reason why.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be retrieved due to an error along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetRecipeResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetReferencePortfolioConstituentsResponse": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituent"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          },
          "href": {
            "type": "string",
            "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetStructuredMarketDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StructuredMarketData"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetStructuredResultDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StructuredResultData"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldingAdjustment": {
        "required": [
          "instrumentUid",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the holding adjustment to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding adjustment is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique transaction properties and associated values stored with the holding adjustment transactions automatically created by LUSID. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique holding properties and associated values stored with the target holding. Each property will be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLot"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The target holdings."
      },
      "HoldingsAdjustment": {
        "required": [
          "adjustments",
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "adjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingAdjustment"
            },
            "description": "The holding adjustments."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Full content of a holdings adjustment for a single portfolio and effective date."
      },
      "HoldingsAdjustmentHeader": {
        "required": [
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A record of holdings adjustments made on the transaction portfolio."
      },
      "IdentifierPartSchema": {
        "required": [
          "description",
          "displayName",
          "index",
          "name",
          "required"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "The typical index in the identifier in which this part appears",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the identifier part that can/should be provided for this resource type"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the identifier part"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the point of this identifier part"
          },
          "required": {
            "type": "boolean",
            "description": "Whether a value is required to be provided"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The schema of an contributing part of a valid LUSID resource identifier"
      },
      "IdSelectorDefinition": {
        "required": [
          "actions",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "actions": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionId"
            }
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IndexConvention": {
        "required": [
          "currency",
          "dayCountConvention",
          "fixingReference",
          "paymentTenor",
          "publicationDayLag"
        ],
        "type": "object",
        "properties": {
          "fixingReference": {
            "type": "string",
            "description": "The reference rate name for fixings"
          },
          "publicationDayLag": {
            "type": "integer",
            "description": "Number of days between spot and publication of the rate.",
            "format": "int32"
          },
          "paymentTenor": {
            "type": "string",
            "description": "The tenor of the payment. For an OIS index this is always 1 day. For other indices, e.g. LIBOR it will have a variable tenor typically between 1 day and 1 year."
          },
          "dayCountConvention": {
            "type": "string",
            "description": "when calculating the fraction of a year between two dates, what convention is used to represent the number of days in a year\r\n            and difference between them.\r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365]."
          },
          "currency": {
            "type": "string",
            "description": "Currency of the index convention."
          },
          "scope": {
            "type": "string",
            "description": "The scope used when updating or inserting the convention.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the convention.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A set of conventions that describe the conventions for calculation of payments made on rates interbank lending and similar.\r\nBased on ISDA 2006 conventions and similar documentation. Please see the knowledge base for further documentation."
      },
      "IndustryClassifier": {
        "required": [
          "classificationCode",
          "classificationSystemName"
        ],
        "type": "object",
        "properties": {
          "classificationSystemName": {
            "type": "string",
            "description": "The name of the classification system to which the classification code belongs (e.g. GICS)."
          },
          "classificationCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The specific industry classification code assigned to the legal entity."
          }
        },
        "additionalProperties": false,
        "description": "Object describing a particular industry classifier,\r\nwhich comprises a classification code and the name of the classification system to which the code belongs."
      },
      "InlineValuationRequest": {
        "required": [
          "instruments",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications to calculate or retrieve during the valuation and present in the results. For example:\r\nAggregateSpec('Holding/default/PV','Sum') for returning the PV (present value) of holdings\r\nAggregateSpec('Holding/default/Units','Sum') for returning the units of holidays\r\nAggregateSpec('Instrument/default/LusidInstrumentId','Value') for returning the Lusid Instrument identifier"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCurrency": {
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "equipWithSubtotals": {
            "type": "boolean",
            "description": "Flag directing the Valuation call to populate the results with subtotals of aggregates."
          },
          "valuationSchedule": {
            "$ref": "#/components/schemas/ValuationSchedule"
          },
          "instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedInstrument"
            },
            "description": "The set of instruments, weighted by the quantities held that are required.\r\nIt is identified by an identifier tag that can be used to identify it externally.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case."
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of an inline valuation"
      },
      "InlineValuationsReconciliationRequest": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/InlineValuationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/InlineValuationRequest"
          },
          "leftToRightMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationLeftRightAddressKeyPair"
            },
            "description": "The mapping from property keys requested by left aggregation to property keys on right hand side",
            "nullable": true
          },
          "preserveKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "List of keys to preserve (from rhs) in the diff. Used in conjunction with filtering/grouping",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification for the reconciliation request. Left and Right hand sides are constructed. Each consists of a valuation of a inline set of instruments\r\nusing an inline aggregation request. The results of this can then be compared to each other. The difference, which is effectively a risk based\r\ndifference allows comparison of the effects of changing a recipe, valuation date, or (though it may or may not make logical sense) a set of instruments."
      },
      "Instrument": {
        "required": [
          "identifiers",
          "lusidInstrumentId",
          "name",
          "state",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The unique LUSID Instrument Identifier (LUID) of the instrument."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "name": {
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of identifiers that can be used to identify the instrument."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested instrument properties. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookthroughPortfolio": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "instrumentDefinition": {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          "state": {
            "enum": [
              "Active",
              "Inactive"
            ],
            "type": "string",
            "description": "The state of of the instrument at the asAt datetime of this version of the instrument definition. The available values are: Active, Inactive"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of instruments."
      },
      "InstrumentCashFlow": {
        "required": [
          "currency",
          "diagnostics",
          "paymentDate",
          "sourceInstrumentId",
          "sourceTransactionId"
        ],
        "type": "object",
        "properties": {
          "paymentDate": {
            "type": "string",
            "description": "The date at which the given cash flow is due to be paid (SettlementDate is used somewhat interchangeably with PaymentDate.)",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it.",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The payment currency of the cash flow."
          },
          "sourceTransactionId": {
            "type": "string",
            "description": "The identifier for the parent transaction on the instrument that will pay/receive this cash flow."
          },
          "sourceInstrumentId": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in."
          },
          "diagnostics": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Whilst a cash flow is defined by an (amount,ccy) pair and the date it is paid on there is additional information required for diagnostics. This includes a range of information and can be empty in the case of a simple cash quantity or where further information is not available. Typical information includes items such as reset dates, RIC, accrual start/end, number of days and curve data."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details for the cashflow associated with an instrument from a given portfolio."
      },
      "InstrumentDefinition": {
        "required": [
          "identifiers",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InstrumentIdValue"
            },
            "description": "A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookThroughPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "definition": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false
      },
      "InstrumentDefinitionFormat": {
        "required": [
          "sourceSystem",
          "vendor",
          "version"
        ],
        "type": "object",
        "properties": {
          "sourceSystem": {
            "type": "string",
            "description": "which source system does the format originate from"
          },
          "vendor": {
            "type": "string",
            "description": "An instrument will potentially have been created by any number of different organisations. Some will be understood completely (e.g. LUSID's), some won't.\r\n            The provenance of an instrument indicates who \"owns\" the associated format."
          },
          "version": {
            "type": "string",
            "description": "Version of the document. Would be preferable to avoid the need, but LUSID will not control other organisations' trade formats."
          }
        },
        "additionalProperties": false,
        "description": "What is the provenance of an instrument. This defines who creates/owns it, what format it is in (e.g. a proprietary format or a common and known one)\r\n            and what the version of that is."
      },
      "InstrumentIdTypeDescriptor": {
        "required": [
          "identifierType",
          "isUniqueIdentifierType",
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The name of the identifier type."
          },
          "propertyKey": {
            "type": "string",
            "description": "The property key that corresponds to the identifier type."
          },
          "isUniqueIdentifierType": {
            "type": "boolean",
            "description": "Whether or not the identifier type is enforced to be unique."
          }
        },
        "additionalProperties": false,
        "description": "The description of an allowable instrument identifier."
      },
      "InstrumentIdValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the identifier."
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier will be valid. If left unspecified the default value is the beginning of time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "InstrumentLeg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentType"
            ],
            "type": "object",
            "properties": {
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Representation of a rates leg.\r\n            A set of cashflows that are paid at a set of points in time according to some set of conventions.",
        "discriminator": {
          "propertyName": "instrumentType"
        }
      },
      "InstrumentMatch": {
        "type": "object",
        "properties": {
          "masteredInstruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentDefinition"
            },
            "description": "The collection of instruments found by the search which have been mastered within LUSID.",
            "nullable": true
          },
          "externalInstruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentDefinition"
            },
            "description": "The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of instrument search results"
      },
      "InstrumentProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The instrument properties. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentSearchProperty": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The property key of instrument property to search for. This will be from the 'Instrument' domain and will take the format {domain}/{scope}/{code} e.g. 'Instrument/system/Isin' or 'Instrument/MyScope/AssetClass'."
          },
          "value": {
            "type": "string",
            "description": "The value of the property e.g. 'US0378331005' or 'Equity'."
          }
        },
        "additionalProperties": false
      },
      "InstrumentType": {
        "enum": [
          "QuotedSecurity",
          "InterestRateSwap",
          "FxForward",
          "Future",
          "ExoticInstrument",
          "FxOption",
          "CreditDefaultSwap",
          "InterestRateSwaption",
          "Bond",
          "EquityOption",
          "FixedLeg",
          "FloatingLeg",
          "BespokeCashFlowsLeg",
          "Unknown",
          "TermDeposit",
          "ContractForDifference",
          "EquitySwap",
          "CashPerpetual",
          "CashSettled",
          "CdsIndex",
          "Basket",
          "FundingLeg",
          "CrossCurrencySwap",
          "FxSwap",
          "ForwardRateAgreement",
          "SimpleInstrument",
          "Repo"
        ],
        "type": "string"
      },
      "InterestRateSwap": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "instrumentType",
              "legs",
              "maturityDate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "legs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InstrumentLeg"
                },
                "description": "The set of instrument legs that define the swap instrument."
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL Swap Instrument; Lusid-ibor internal representation of a swap instrument\r\n            \r\n             A swap is the exchange of two sets of cashflows, occurring at one or more dates in one or more currencies.\r\n             These may include a notional exchange at the start and, or, maturity of the trade. Depending upon the choice of\r\n             payment currency, payment frequency and so on they can be used to match sets of future obligations"
      },
      "InterestRateSwaption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "deliveryMethod",
              "instrumentType",
              "payOrReceiveFixed",
              "startDate",
              "swap"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "payOrReceiveFixed": {
                "enum": [
                  "NotDefined",
                  "Pay",
                  "Receive"
                ],
                "type": "string",
                "description": "The available values are: NotDefined, Pay, Receive"
              },
              "deliveryMethod": {
                "enum": [
                  "Cash",
                  "Physical"
                ],
                "type": "string",
                "description": "The available values are: Cash, Physical"
              },
              "swap": {
                "$ref": "#/components/schemas/InterestRateSwap"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "A swaption, an option to enter into an interest rate swap."
      },
      "IrVolCubeData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "instruments",
              "marketDataType",
              "quotes"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "Base date of the cube - this is the start date of the swaptions on the cube.",
                "format": "date-time"
              },
              "instruments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "Retrieve the set of instruments that define the cube."
              },
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketQuote"
                },
                "description": "Access the set of quotes that define the cube."
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData"
              }
            }
          }
        ],
        "description": "Market Data required to build a volatility cube for swaption pricing,  represented by a list of instruments and corresponding market quotes"
      },
      "IsBusinessDayResponse": {
        "required": [
          "isBusinessDay",
          "requestedDateTime"
        ],
        "type": "object",
        "properties": {
          "requestedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "isBusinessDay": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Whether or not a DateTimeOffset is a business DateTime"
      },
      "IUnitDefinitionDto": {
        "type": "object",
        "properties": {
          "schema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LabelValueSet": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "minLength": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "description": "The set of string labels in a multi-value property."
      },
      "LegalEntity": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the Legal Entity",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidLegalEntityId": {
            "type": "string",
            "description": "The unique LUSID Legal Entity Identifier (LULEID) of the Legal Entity. This field is not populated until further notice.",
            "nullable": true
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Unique client-defined identifiers of the Legal Entity.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "counterpartyRiskInformation": {
            "$ref": "#/components/schemas/CounterpartyRiskInformation"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of Legal Entity on LUSID API"
      },
      "LegDefinition": {
        "required": [
          "notionalExchangeType",
          "payReceive",
          "rateOrSpread",
          "stubType"
        ],
        "type": "object",
        "properties": {
          "conventionName": {
            "$ref": "#/components/schemas/FlowConventionName"
          },
          "conventions": {
            "$ref": "#/components/schemas/FlowConventions"
          },
          "indexConvention": {
            "$ref": "#/components/schemas/IndexConvention"
          },
          "indexConventionName": {
            "$ref": "#/components/schemas/FlowConventionName"
          },
          "notionalExchangeType": {
            "type": "string",
            "description": "what type of notional exchange does the leg have\r\nSupported string (enumeration) values are: [None, Initial, Final, Both]."
          },
          "payReceive": {
            "type": "string",
            "description": "Is the leg to be paid or received\r\nSupported string (enumeration) values are: [Pay, Receive]."
          },
          "rateOrSpread": {
            "type": "number",
            "description": "Is there either a fixed rate (non-zero) or spread to be paid over the value of the leg.",
            "format": "double"
          },
          "resetConvention": {
            "type": "string",
            "description": "Control how resets are generated relative to swap payment convention(s).\r\nSupported string (enumeration) values are: [InAdvance, InArrears].",
            "nullable": true
          },
          "stubType": {
            "type": "string",
            "description": "If a stub is required should it be at the front or back of the leg.\r\nSupported string (enumeration) values are: [None, ShortFront, ShortBack, LongBack, LongFront]."
          }
        },
        "additionalProperties": false,
        "description": "Definition of the set of flow and index conventions along with other miscellaneous information required to generate an instrument leg."
      },
      "Link": {
        "required": [
          "href",
          "method",
          "relation"
        ],
        "type": "object",
        "properties": {
          "relation": {
            "type": "string",
            "description": "Relation of link."
          },
          "href": {
            "type": "string",
            "description": "Href of link.",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of link.",
            "nullable": true
          },
          "method": {
            "type": "string",
            "description": "Http method of link."
          }
        },
        "additionalProperties": false,
        "description": "Link class."
      },
      "ListAggregationReconciliation": {
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ListAggregationResponse"
          },
          "right": {
            "$ref": "#/components/schemas/ListAggregationResponse"
          },
          "diff": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          }
        },
        "additionalProperties": false
      },
      "ListAggregationResponse": {
        "type": "object",
        "properties": {
          "aggregationEffectiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "aggregationAsAt": {
            "type": "string",
            "format": "date-time"
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          },
          "aggregationCurrency": {
            "type": "string",
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          },
          "aggregationFailures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationMeasureFailureDetail"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LusidInstrument": {
        "required": [
          "instrumentType"
        ],
        "type": "object",
        "properties": {
          "instrumentType": {
            "enum": [
              "QuotedSecurity",
              "InterestRateSwap",
              "FxForward",
              "Future",
              "ExoticInstrument",
              "FxOption",
              "CreditDefaultSwap",
              "InterestRateSwaption",
              "Bond",
              "EquityOption",
              "FixedLeg",
              "FloatingLeg",
              "BespokeCashFlowsLeg",
              "Unknown",
              "TermDeposit",
              "ContractForDifference",
              "EquitySwap",
              "CashPerpetual",
              "CashSettled",
              "CdsIndex",
              "Basket",
              "FundingLeg",
              "CrossCurrencySwap",
              "FxSwap",
              "ForwardRateAgreement",
              "SimpleInstrument",
              "Repo"
            ],
            "type": "string",
            "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
          }
        },
        "additionalProperties": false,
        "description": "Base class in hierarchy for LUSID Instruments. Valuation would normally be performed through passing LUSID a Code for a portfolio to be valued.\r\nIn that case the set of instruments have already been uploaded. Equally, one might wish to pass in a set of instruments directly and have LUSID\r\nvalue the inlined set. This the base instrument for this case.",
        "discriminator": {
          "propertyName": "instrumentType"
        }
      },
      "LusidProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the error"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Any additional informational information available about the nature and detail of the problem",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "description": "Get the error code of the response",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A description of a problem that has arisen during the processing of a request."
      },
      "LusidValidationProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the error"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Any additional informational information available about the nature and detail of the problem",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "description": "Get the error code of the response",
            "format": "int32"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A description of a problem that has arisen whilst validating a request"
      },
      "MarketContext": {
        "type": "object",
        "properties": {
          "marketRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataKeyRule"
            },
            "description": "The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.\r\nNominally any number are possible and will be processed in order where applicable. However, there is evidently a potential\r\nfor increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in\r\nsuch a way as to reduce the number of rules required is therefore sensible.",
            "nullable": true
          },
          "suppliers": {
            "type": "object",
            "properties": {
              "Commodity": {
                "type": "string"
              },
              "Credit": {
                "type": "string"
              },
              "Equity": {
                "type": "string"
              },
              "Fx": {
                "type": "string"
              },
              "Rates": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "description": "It is possible to control which supplier is used for a given asset class.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/MarketOptions"
          }
        },
        "additionalProperties": false,
        "description": "Market context node. This defines how LUSID processes parts of a request that require resolution of market data such as instrument prices or\r\nFx rates. It controls where the data is loaded from and which sources take precedence."
      },
      "MarketDataKeyRule": {
        "required": [
          "dataScope",
          "field",
          "key",
          "quoteType",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)"
          },
          "supplier": {
            "type": "string",
            "description": "The market data supplier (where the data comes from)"
          },
          "dataScope": {
            "type": "string",
            "description": "The scope in which the data should be found when using this rule."
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront"
            ],
            "type": "string",
            "description": "The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront"
          },
          "field": {
            "type": "string",
            "description": "The conceptual qualification for the field, such as bid, mid, or ask.\r\nThe field must be one of a defined set for the given supplier, in the same way as it\r\nis for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId"
          },
          "quoteInterval": {
            "type": "string",
            "description": "Shorthand for the time interval used to select market data. This must be a dot-separated string\r\n            nominating a start and end date, for example '5D.0D' to look back 5 days from today (0 days ago). The syntax\r\n            is <i>int</i><i>char</i>.<i>int</i><i>char</i>, where <i>char</i> is one of D(ay), W(eek), M(onth) or Y(ear).",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt predicate specification.",
            "format": "date-time",
            "nullable": true
          },
          "priceSource": {
            "type": "string",
            "description": "The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote",
            "nullable": true
          },
          "mask": {
            "type": "string",
            "description": "Allows for partial or complete override of the market asset resolved for a dependency\r\nEither a named override or a dot separated string (A.B.C.D.*).\r\ne.g. for Rates curve 'EUR.*' will replace the resolve MarketAsset 'GBP/12M', 'GBP/3M' with the EUR equivalent, if there\r\nare no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A market data key rule describes a mapping for satisfying a particular market dependency. The supplier, scope, quote type and price side\r\ninformation define the quote in the market and which Vendor for market data would be used to perform the lookup.\r\nThe market data key defines what dependency this satisfies. The key is a rule that describes the asset class, its identifier and any other\r\nspecifics required to uniquely describe a specific economic entity (e.g. an Fx currency pair, equity name or credit curve)."
      },
      "MarketDataType": {
        "enum": [
          "DiscountFactorCurveData",
          "EquityVolSurfaceData",
          "FxVolSurfaceData",
          "IrVolCubeData",
          "OpaqueMarketData",
          "YieldCurveData"
        ],
        "type": "string",
        "description": "The format of the complex market data stored. Complex market data is used to store any\r\ndata which requires more context than just a simple single point as is the case with a\r\nquote.\r\nExamples of such complex market data are Discount Curve and Volatility Surfaces."
      },
      "MarketIdentifier": {
        "enum": [
          "LusidInstrumentId",
          "Isin",
          "Sedol",
          "Cusip",
          "ClientInternal",
          "Figi",
          "RIC",
          "QuotePermId",
          "REDCode",
          "BBGId",
          "ICECode"
        ],
        "type": "string"
      },
      "MarketOptions": {
        "type": "object",
        "properties": {
          "defaultSupplier": {
            "type": "string",
            "description": "The default supplier of data. This controls which 'dialect' is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId",
            "nullable": true
          },
          "defaultInstrumentCodeType": {
            "type": "string",
            "description": "When instrument quotes are searched for, what identifier should be used by default",
            "nullable": true
          },
          "defaultScope": {
            "type": "string",
            "description": "For default rules, which scope should data be searched for in",
            "nullable": true
          },
          "attemptToInferMissingFx": {
            "type": "boolean",
            "description": "if true will calculate a missing Fx pair (e.g. THBJPY) from the inverse JPYTHB or from standardised pairs against USD, e.g. THBUSD and JPYUSD"
          }
        },
        "additionalProperties": false,
        "description": "The set of options that control miscellaneous and default market resolution behaviour.\r\nThese are aimed at a 'crude' level of control for those who do not wish to fine tune the way that data is resolved.\r\nFor clients who wish to simply match instruments to prices this is quite possibly sufficient. For those wishing to control market data sources\r\naccording to requirements based on accuracy or timeliness it is not. In more advanced cases the options should largely be ignored and rules specified\r\nper source. Be aware that where no specified rule matches the final fallback is on to the logic implied here."
      },
      "MarketQuote": {
        "required": [
          "quoteType",
          "value"
        ],
        "type": "object",
        "properties": {
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront"
            ],
            "type": "string",
            "description": "The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront"
          },
          "value": {
            "type": "number",
            "description": "Numeric value of the quote",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The market quote for an observable which will be used to calibrate the market data,\r\nincluding the format of the quote.\r\ne.g. a volatility quote for a specific strike and expiry\r\nthe par rate of a swap\r\n            \r\nThis is a slimmed down version of a full Quote that can be stored in our QuoteStore to\r\nremove lineage, price source etc. for ease of use when creating complex market data."
      },
      "MetricValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The numerical value of the property.",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ModelSelection": {
        "required": [
          "library",
          "model"
        ],
        "type": "object",
        "properties": {
          "library": {
            "enum": [
              "Lusid",
              "RefinitivQps",
              "RefinitivTracsWeb",
              "VolMaster",
              "IsdaCds"
            ],
            "type": "string",
            "description": "The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds"
          },
          "model": {
            "enum": [
              "SimpleStatic",
              "Discounting",
              "VendorDefault",
              "BlackScholes",
              "ConstantTimeValueOfMoney",
              "Bachelier",
              "ForwardWithPoints",
              "ForwardWithPointsUndiscounted",
              "ForwardSpecifiedRate",
              "ForwardSpecifiedRateUndiscounted",
              "IndexNav",
              "IndexPrice",
              "InlinedIndex"
            ],
            "type": "string",
            "description": "The available values are: SimpleStatic, Discounting, VendorDefault, BlackScholes, ConstantTimeValueOfMoney, Bachelier, ForwardWithPoints, ForwardWithPointsUndiscounted, ForwardSpecifiedRate, ForwardSpecifiedRateUndiscounted, IndexNav, IndexPrice, InlinedIndex"
          }
        },
        "additionalProperties": false,
        "description": "The combination of a library to use and a model in that library that defines which pricing code will evaluate instruments\r\nhaving a particular type/class. This allows us to control the model type and library for a given instrument."
      },
      "MovementType": {
        "enum": [
          "Settlement",
          "Traded",
          "StockMovement",
          "FutureCash",
          "Commitment",
          "Receivable",
          "CashSettlement",
          "CashForward",
          "CashCommitment",
          "CashReceivable",
          "Accrual",
          "CashAccrual",
          "ForwardFx",
          "CashFxForward",
          "UnsettledCashTypes",
          "Carry",
          "CarryAsPnl"
        ],
        "type": "string"
      },
      "OpaqueMarketData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "document",
              "format",
              "marketDataType",
              "name"
            ],
            "type": "object",
            "properties": {
              "document": {
                "type": "string",
                "description": "The document as a string."
              },
              "format": {
                "type": "string",
                "description": "What format is the document stored in, e.g. Xml.\r\nSupported string (enumeration) values are: [Unknown, Xml, Json, Csv]."
              },
              "name": {
                "type": "string",
                "description": "Internal name of document. This is not used for search, it is simply a designator that helps identify the document\r\nand could be anything (filename, ftp address or similar)"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData"
              }
            }
          }
        ],
        "description": "A representation of an un-built piece of complex market data, to allow for passing through\r\nto the vendor library for building.\r\nThe market data will usually be in some standard form such as XML or Json, representing a curve or surface."
      },
      "OperandType": {
        "enum": [
          "Absolute",
          "Property"
        ],
        "type": "string"
      },
      "Operator": {
        "enum": [
          "Equals",
          "NotEquals",
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThan",
          "LessThanOrEqualTo",
          "In"
        ],
        "type": "string"
      },
      "OptionType": {
        "enum": [
          "None",
          "Call",
          "Put"
        ],
        "type": "string"
      },
      "Order": {
        "required": [
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "portfolioId",
          "quantity",
          "side"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of given instrument ordered.",
            "format": "int32"
          },
          "side": {
            "type": "string",
            "description": "The client's representation of the order's side (buy, sell, short, etc)"
          },
          "orderBookId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument ordered."
          },
          "state": {
            "type": "string",
            "description": "The order's state (examples: New, PartiallyFilled, ...)",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The order's type (examples: Limit, Market, ...)",
            "nullable": true
          },
          "timeInForce": {
            "type": "string",
            "description": "The order's time in force (examples: Day, GoodTilCancel, ...)",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date on which the order was made",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "orderInstructionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "packageId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An Order for a certain quantity of a specific instrument"
      },
      "OrderBySpec": {
        "required": [
          "key",
          "sortOrder"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid."
          },
          "sortOrder": {
            "enum": [
              "Ascending",
              "Descending"
            ],
            "type": "string",
            "description": "The available values are: Ascending, Descending"
          }
        },
        "additionalProperties": false
      },
      "OrderInstruction": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this execution.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Record of an order instruction"
      },
      "OrderInstructionRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this execution.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update a Order Instruction."
      },
      "OrderInstructionSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderInstructionRequest"
            },
            "description": "A collection of OrderInstructionRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple OrderInstructions."
      },
      "OrderRequest": {
        "required": [
          "id",
          "instrumentIdentifiers",
          "portfolioId",
          "quantity",
          "side"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of given instrument ordered.",
            "format": "int32"
          },
          "side": {
            "type": "string",
            "description": "The client's representation of the order's side (buy, sell, short, etc)"
          },
          "orderBookId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "state": {
            "type": "string",
            "description": "The order's state (examples: New, PartiallyFilled, ...)",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The order's type (examples: Limit, Market, ...)",
            "nullable": true
          },
          "timeInForce": {
            "type": "string",
            "description": "The order's time in force (examples: Day, GoodTilCancel, ...)",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date on which the order was made",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "orderInstruction": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "package": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Order."
      },
      "OrderSetRequest": {
        "type": "object",
        "properties": {
          "orderRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRequest"
            },
            "description": "A collection of OrderRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Orders."
      },
      "OutputTransaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction. This only exists on transactions generated by LUSID e.g. a holdings adjustment transaction.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionAmount": {
            "type": "number",
            "description": "The total value of the transaction in the transaction currency.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double"
          },
          "transactionToPortfolioRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and portfolio currency. For example if the transaction currency is in USD and the portfolio currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "transactionStatus": {
            "enum": [
              "Active",
              "Amended",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the transaction. The available values are: Active, Amended, Cancelled"
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          },
          "cancelDateTime": {
            "type": "string",
            "description": "If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "realisedGainLoss": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RealisedGainLoss"
            },
            "description": "The collection of realised gains or losses resulting from relevant transactions e.g. a sale transaction. The cost used in calculating the realised gain or loss is determined by the accounting method defined when the transaction portfolio is created.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of output transactions."
      },
      "Package": {
        "required": [
          "id",
          "orderIds",
          "orderInstructionIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A related order ids."
          },
          "orderInstructionIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A related order instruction id."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this execution.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A structure used to describe the structure of an order or orders that make up a non-trivial trade."
      },
      "PackageRequest": {
        "required": [
          "id",
          "orderIds",
          "orderInstructionIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A related order ids."
          },
          "orderInstructionIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A related order instruction id."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this execution.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update a Package."
      },
      "PackageSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageRequest"
            },
            "description": "A collection of PackageRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Packages."
      },
      "PagedResourceListOfAllocation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfBlock": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Block"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCalendar": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calendar"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCorporateActionSource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionSource"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCustomEntityResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntityResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCutLabelDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutLabelDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfExecution": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Execution"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfInstrument": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfLegalEntity": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalEntity"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfOrder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfOrderInstruction": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderInstruction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPackage": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Package"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfParticipation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPerson": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPlacement": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Placement"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPortfolioGroupSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroupSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPortfolioSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPropertyDefinitionSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinitionSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "Participation": {
        "required": [
          "id",
          "orderId",
          "placementId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The record an order's participation in a specific placement."
      },
      "ParticipationRequest": {
        "required": [
          "id",
          "orderId",
          "placementId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "orderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update a Participation."
      },
      "ParticipationSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipationRequest"
            },
            "description": "A collection of ParticipationRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Participations."
      },
      "PayReceive": {
        "enum": [
          "NotDefined",
          "Pay",
          "Receive"
        ],
        "type": "string"
      },
      "PerformanceReturn": {
        "required": [
          "effectiveAt",
          "rateOfReturn"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt for the return.",
            "format": "date-time"
          },
          "rateOfReturn": {
            "type": "number",
            "description": "The return number.",
            "format": "double"
          },
          "openingMarketValue": {
            "type": "number",
            "description": "The opening market value.",
            "format": "double",
            "nullable": true
          },
          "closingMarketValue": {
            "type": "number",
            "description": "The closing market value.",
            "format": "double",
            "nullable": true
          },
          "period": {
            "type": "string",
            "description": "Show the returns on a Daily or Monthly period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Returns."
      },
      "PerformanceReturnsMetric": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the metric. Default to Return",
            "nullable": true,
            "readOnly": true
          },
          "window": {
            "type": "string",
            "description": "The given metric for the calculation i.e. 1Y, 1D.",
            "nullable": true
          },
          "allowPartial": {
            "type": "boolean",
            "description": "Bool if the metric is allowed partial results. Deafult to false."
          },
          "annualised": {
            "type": "boolean",
            "description": "Bool if the metric is annualized. Default to false."
          },
          "withFee": {
            "type": "boolean",
            "description": "Bool if the metric should consider the fees when is calculated. Default to false."
          },
          "alias": {
            "type": "string",
            "description": "The alias for the metric.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request used in the AggregatedReturns."
      },
      "PeriodType": {
        "enum": [
          "Daily",
          "Weekly",
          "Monthly",
          "Quarterly",
          "Annually"
        ],
        "type": "string"
      },
      "PerpetualEntityState": {
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string"
      },
      "PerpetualProperty": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the Person",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Person",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidPersonId": {
            "type": "string",
            "description": "The unique LUSID Person Identifier (LUPID) of the Person.",
            "nullable": true
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Unique client-defined identifiers of the Person.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            },
            "description": "A set of properties associated to the Person. There can be multiple properties associated with a property key.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "additionalProperties": false
      },
      "Placement": {
        "required": [
          "blockIds",
          "counterparty",
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "quantity",
          "side",
          "state",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "blockIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "IDs of Blocks associated with this placement."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this placement.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument placement."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "state": {
            "type": "string",
            "description": "The state of this placement (typically a FIX state; Open, Filled, etc)."
          },
          "side": {
            "type": "string",
            "description": "The side (Buy, Sell, ...) of this placement."
          },
          "timeInForce": {
            "type": "string",
            "description": "The time in force applicable to this placement (GTC, FOK, Day, etc)"
          },
          "type": {
            "type": "string",
            "description": "The type of this placement (Market, Limit, etc)."
          },
          "createdDate": {
            "type": "string",
            "description": "The active date of this placement.",
            "format": "date-time"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "counterparty": {
            "type": "string",
            "description": "The market entity this placement is placed with."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A street order for a quantity of a single instrument placed with a single market entity."
      },
      "PlacementRequest": {
        "required": [
          "blockIds",
          "counterparty",
          "createdDate",
          "id",
          "instrumentIdentifiers",
          "quantity",
          "side",
          "state",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "blockIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "IDs of Blocks associated with this placement."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "state": {
            "type": "string",
            "description": "The state of this placement (typically a FIX state; Open, Filled, etc)."
          },
          "side": {
            "type": "string",
            "description": "The side (Buy, Sell, ...) of this placement."
          },
          "timeInForce": {
            "type": "string",
            "description": "The time in force applicable to this placement (GTC, FOK, Day, etc)"
          },
          "type": {
            "type": "string",
            "description": "The type of this placement (Market, Limit, etc)."
          },
          "createdDate": {
            "type": "string",
            "description": "The active date of this placement.",
            "format": "date-time"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "counterparty": {
            "type": "string",
            "description": "The market entity this placement is placed with."
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update a Placement."
      },
      "PlacementSetRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacementRequest"
            },
            "description": "A collection of PlacementRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Placements."
      },
      "Portfolio": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio."
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio. This will be an empty string for reference portfolios.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "PortfolioCashFlow": {
        "required": [
          "balance",
          "balanceReportingCurrency",
          "cashflow",
          "cashflowReportingCurrency",
          "costBasisReportingCurrency",
          "fxRate",
          "groupById",
          "movementName",
          "sequenceNumber",
          "translationGainLoss",
          "type"
        ],
        "type": "object",
        "properties": {
          "groupById": {
            "type": "integer",
            "description": "The groupBy subHoldings and currency.",
            "format": "int32"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number determining the order of the cash flow records.",
            "format": "int32"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Indicates the date when the cash-flow settles.",
            "format": "date-time"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Indicates the record type (Closed, Open, Activity)."
          },
          "movementName": {
            "type": "string",
            "description": "Indicates the specific movement of the transaction that generated this cash flow."
          },
          "cashflow": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balance": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "fxRate": {
            "type": "number",
            "description": "Exchange rate between the currency of this cash flow and the reporting currency.",
            "format": "double"
          },
          "cashflowReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balanceReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "translationGainLoss": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costBasisReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details for the cashflow for a given portfolio."
      },
      "PortfolioCashLadder": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency of the cash-flows.",
            "nullable": true
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashLadderRecord"
            },
            "description": "A record of cash flows on a specific date.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioDetails": {
        "required": [
          "baseCurrency",
          "originPortfolioId",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "originPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioEntityId": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope within which the portfolio or portfolio group lives.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Portfolio name or code.",
            "nullable": true
          },
          "portfolioEntityType": {
            "type": "string",
            "description": "String identifier for portfolio e.g. \"SinglePortfolio\" and \"GroupPortfolio\". If not specified, it is assumed to be a single portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification of a portfolio or portfolio group id, its scope and which it is."
      },
      "PortfolioGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio group properties. These will be from the 'PortfolioGroup' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupSearchResult": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioHolding": {
        "required": [
          "cost",
          "costPortfolioCcy",
          "holdingType",
          "instrumentUid",
          "settledUnits",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' or 'Holding' domain.",
            "nullable": true
          },
          "holdingType": {
            "type": "string",
            "description": "The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc."
          },
          "units": {
            "type": "number",
            "description": "The total number of units of the holding.",
            "format": "double"
          },
          "settledUnits": {
            "type": "number",
            "description": "The total number of settled units of the holding.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of holdings."
      },
      "PortfolioProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioReconciliationRequest": {
        "required": [
          "effectiveAt",
          "portfolioId"
        ],
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective date of the portfolio",
            "format": "dateorcutlabel"
          },
          "asAt": {
            "type": "string",
            "description": "Optional. The AsAt date of the portfolio",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioSearchResult": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio."
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio. This will be an empty string for reference portfolios.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "PortfoliosReconciliationRequest": {
        "required": [
          "instrumentPropertyKeys",
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "instrumentPropertyKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio"
          }
        },
        "additionalProperties": false
      },
      "PortfoliosReconciliationRequestPreview": {
        "required": [
          "instrumentPropertyKeys",
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "tolerance": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Tolerance"
            },
            "description": "Tolerance to be included for the units and cost.",
            "nullable": true
          },
          "left": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "instrumentPropertyKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio"
          }
        },
        "additionalProperties": false
      },
      "PortfolioType": {
        "enum": [
          "Transaction",
          "Reference",
          "DerivedTransaction"
        ],
        "type": "string"
      },
      "Premium": {
        "required": [
          "amount",
          "currency",
          "date"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Premium amount",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "Premium currency"
          },
          "date": {
            "type": "string",
            "description": "Date when premium paid",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "A class containing information for a given premium payment."
      },
      "PricingContext": {
        "type": "object",
        "properties": {
          "modelRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorModelRule"
            },
            "description": "The set of model rules that are available. There may be multiple rules for Vendors, but only one per model-instrument pair.\r\nWhich of these preference sets is used depends upon the model choice selection if specified, or failing that the global default model specification\r\nin the options.",
            "nullable": true
          },
          "modelChoice": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ModelSelection"
            },
            "description": "The choice of which model selection (vendor library, pricing model) to use in evaluation of a given instrument type.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/PricingOptions"
          },
          "resultDataRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultDataKeyRule"
            },
            "description": "Set of rules that control querying of unit results either for direct queries into aggregation or for\r\noverriding intermediate calculations. For example, a dirty price is made up from a clean price and the accrued interest.\r\nOne might consider overriding the accrued interest calculated by a model (perhaps one wants to match an external value or simply disagrees with the\r\ncalculated result) and use that in calculation of the dirty price.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pricing context node. In order to price an instrument a number of configuration parameters are required to determine which\r\n(a) pricing model (ranging from a simple lookup of a market quote/price through to a Monte-Carlo simulation for the behaviour of its cashflows)\r\n(b) vendor library (Lusid internal models or those provided through an external Vendor such as Refinitiv (proprietary) or QuantLib (open source)\r\nare used in the pricing.\r\n\r\nIn conjunction with these there are a number of parameters that govern the behaviour of these models. For example, in pricing an Fx volatility\r\ndependent product such as an Fx option, there are various parameters that affect model behaviour for the smile. In Lusid a distinction is made between\r\nthose which are understood natively and those which are only held for use with a given vendor-model combination. The problem is that, unlike market\r\nquote data, there are few standards around model descriptions. Hence, apparently similar terminology can be mis-leading; for example in SABR models where\r\nthe basic parameters are agreed upon but most practical models have used an approximation with adjustments where the parameters can have wildly different meanings.\r\nTo avoid confusion or mis-behaviour in this area, where parameters are not understood to be interchangeable, they are only settable on a per-library per-model\r\nbasis, essentially as opaque data that will be given to the Vendor library \"verbatim\" but not used with any other."
      },
      "PricingModel": {
        "enum": [
          "SimpleStatic",
          "Discounting",
          "VendorDefault",
          "BlackScholes",
          "ConstantTimeValueOfMoney",
          "Bachelier",
          "ForwardWithPoints",
          "ForwardWithPointsUndiscounted",
          "ForwardSpecifiedRate",
          "ForwardSpecifiedRateUndiscounted",
          "IndexNav",
          "IndexPrice",
          "InlinedIndex"
        ],
        "type": "string"
      },
      "PricingOptions": {
        "type": "object",
        "properties": {
          "modelSelection": {
            "$ref": "#/components/schemas/ModelSelection"
          },
          "useInstrumentTypeToDeterminePricer": {
            "type": "boolean",
            "description": "If true then use the instrument type to set the default instrument pricer\r\nThis applies where no more specific set of overrides are provided on a per-vendor and instrument basis."
          },
          "allowAnyInstrumentsWithSecUidToPriceOffLookup": {
            "type": "boolean",
            "description": "By default, one would not expect to price and exotic instrument, i.e. an instrument with a complicated\r\ninstrument definition simply through looking up a price as there should be a better way of evaluating it.\r\nTo override that behaviour and allow lookup for a price from the instrument identifier(s), set this to true."
          },
          "allowPartiallySuccessfulEvaluation": {
            "type": "boolean",
            "description": "If true then a failure in task evaluation doesn't cause overall failure.\r\nresults will be returned where they succeeded and annotation elsewhere"
          },
          "produceSeparateResultForLinearOtcLegs": {
            "type": "boolean",
            "description": "If true (default), when pricing an Fx-Forward or Interest Rate Swap, Future and other linearly separable products, product two results, one for each leg\r\nrather than a single line result with the amalgamated/summed pv from both legs."
          },
          "enableUseOfCachedUnitResults": {
            "type": "boolean",
            "description": "If true, when pricing using a model or for an instrument that supports use of intermediate cached-results, use them.\r\nDefault is that this caching is turned off."
          },
          "windowValuationOnInstrumentStartEnd": {
            "type": "boolean",
            "description": "If true, when valuing an instrument outside the period where it is 'alive' (the start-maturity window) it will return a valuation of zero"
          },
          "removeContingentCashflowsInPaymentDiary": {
            "type": "boolean",
            "description": "When creating a payment diary, should contingent cash payments (e.g. from exercise of a swaption into a swap) be included or not.\r\ni.e. Is exercise or default being assumed to happen or not."
          },
          "useChildSubHoldingKeysForPortfolioExpansion": {
            "type": "boolean",
            "description": "Should fund constituents inherit subholding keys from the parent subholding keyb"
          }
        },
        "additionalProperties": false,
        "description": "Options for controlling the default aspects and behaviour of the pricing engine."
      },
      "ProcessedCommand": {
        "required": [
          "description",
          "processedTime",
          "userId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the command issued."
          },
          "path": {
            "type": "string",
            "description": "The unique identifier for the command including the request id.",
            "nullable": true
          },
          "userId": {
            "$ref": "#/components/schemas/User"
          },
          "processedTime": {
            "type": "string",
            "description": "The asAt datetime that the events published by the processing of this command were committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The list of commands."
      },
      "Property": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the property is valid.",
            "format": "date-time",
            "nullable": true
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the property is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveFrom' datetime of the property.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyDefinition": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "CustomEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, CustomEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of property definitions."
      },
      "PropertyDefinitionSearchResult": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "CustomEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, CustomEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A property definition search result"
      },
      "PropertyDefinitionType": {
        "enum": [
          "ValueProperty",
          "DerivedDefinition"
        ],
        "type": "string"
      },
      "PropertyDomain": {
        "enum": [
          "NotDefined",
          "Transaction",
          "Portfolio",
          "Holding",
          "ReferenceHolding",
          "TransactionConfiguration",
          "Instrument",
          "CutLabelDefinition",
          "Analytic",
          "PortfolioGroup",
          "Person",
          "AccessMetadata",
          "Order",
          "UnitResult",
          "MarketData",
          "ConfigurationRecipe",
          "Allocation",
          "Calendar",
          "LegalEntity",
          "Placement",
          "Execution",
          "Block",
          "Participation",
          "Package",
          "OrderInstruction",
          "CustomEntity"
        ],
        "type": "string",
        "description": "See https://wiki.finbourne.com/information/domain-model-properties\r\n            \r\nEach domain refers to a logical set of properties which reside within it."
      },
      "PropertyFilter": {
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid.",
            "nullable": true
          },
          "operator": {
            "enum": [
              "Equals",
              "NotEquals",
              "GreaterThan",
              "GreaterThanOrEqualTo",
              "LessThan",
              "LessThanOrEqualTo",
              "In"
            ],
            "type": "string",
            "description": "The available values are: Equals, NotEquals, GreaterThan, GreaterThanOrEqualTo, LessThan, LessThanOrEqualTo, In"
          },
          "right": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          },
          "rightOperandType": {
            "enum": [
              "Absolute",
              "Property"
            ],
            "type": "string",
            "description": "The available values are: Absolute, Property"
          }
        },
        "additionalProperties": false
      },
      "PropertyInterval": {
        "required": [
          "asAtRange",
          "effectiveRange",
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "asAtRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "status": {
            "type": "string",
            "description": "Indicates whether the value is part of the prevailing effective date timeline for the requested asAt date, or whether it has been superseded by correctional activity"
          }
        },
        "additionalProperties": false
      },
      "PropertyLifeTime": {
        "enum": [
          "Perpetual",
          "TimeVariant"
        ],
        "type": "string"
      },
      "PropertySchema": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyType": {
        "enum": [
          "Label",
          "Metric",
          "Information"
        ],
        "type": "string",
        "description": "See https://wiki.finbourne.com/information/domain-model-properties"
      },
      "PropertyValue": {
        "type": "object",
        "properties": {
          "labelValue": {
            "type": "string",
            "description": "The text value of a property defined as having the 'Label' type.",
            "nullable": true
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "labelValueSet": {
            "$ref": "#/components/schemas/LabelValueSet"
          }
        },
        "additionalProperties": false,
        "description": "The value of the property."
      },
      "Quote": {
        "required": [
          "asAt",
          "quoteId",
          "uploadedBy"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "cutLabel": {
            "type": "string",
            "description": "The cut label that this quote was updated or inserted with.",
            "nullable": true
          },
          "uploadedBy": {
            "type": "string",
            "description": "The unique id of the user that updated or inserted the quote."
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the quote was committed to LUSID.",
            "format": "date-time"
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The quote id, value and lineage of the quotes all keyed by a unique correlation id."
      },
      "QuoteAccessMetadataRule": {
        "required": [
          "id",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/QuoteAccessMetadataRuleId"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessMetadataValue"
              }
            },
            "description": "The access control metadata to assign to quotes that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "QuoteAccessMetadataRuleId": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the quote, e.g. 'DataScope', 'LUSID' etc.",
            "nullable": true
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the quote, e.g. a bank or financial institution.",
            "nullable": true
          },
          "instrumentId": {
            "type": "string",
            "description": "The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. 'BBG00JX0P539'.",
            "nullable": true
          },
          "instrumentIdType": {
            "type": "string",
            "description": "The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. 'Figi'.",
            "nullable": true
          },
          "quoteType": {
            "type": "string",
            "description": "The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used.",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely identifies a set of Quote access control metadata."
      },
      "QuoteId": {
        "required": [
          "effectiveAt",
          "quoteSeriesId"
        ],
        "type": "object",
        "properties": {
          "quoteSeriesId": {
            "$ref": "#/components/schemas/QuoteSeriesId"
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime or cut label at which the quote is valid from.",
            "format": "dateorcutlabel"
          }
        },
        "additionalProperties": false,
        "description": "The unique identifier of the quote."
      },
      "QuoteInstrumentIdType": {
        "enum": [
          "LusidInstrumentId",
          "Figi",
          "RIC",
          "QuotePermId",
          "Isin",
          "CurrencyPair",
          "ClientInternal"
        ],
        "type": "string"
      },
      "QuoteSeriesId": {
        "required": [
          "field",
          "instrumentId",
          "instrumentIdType",
          "provider",
          "quoteType"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the quote, e.g. 'DataScope', 'LUSID' etc."
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the quote, e.g. a bank or financial institution.",
            "nullable": true
          },
          "instrumentId": {
            "type": "string",
            "description": "The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. 'BBG00JX0P539'."
          },
          "instrumentIdType": {
            "enum": [
              "LusidInstrumentId",
              "Figi",
              "RIC",
              "QuotePermId",
              "Isin",
              "CurrencyPair",
              "ClientInternal"
            ],
            "type": "string",
            "description": "The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. 'Figi'. The available values are: LusidInstrumentId, Figi, RIC, QuotePermId, Isin, CurrencyPair, ClientInternal",
            "nullable": true
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront"
            ],
            "type": "string",
            "description": "The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used. The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider."
          }
        },
        "additionalProperties": false,
        "description": "The time invariant unique identifier of the quote. Combined with the effective datetime of the quote this\r\nuniquely identifies the quote. This can be thought of as a unique identifier for a time series of quotes."
      },
      "QuoteType": {
        "enum": [
          "Price",
          "Spread",
          "Rate",
          "LogNormalVol",
          "NormalVol",
          "ParSpread",
          "IsdaSpread",
          "Upfront"
        ],
        "type": "string"
      },
      "RealisedGainLoss": {
        "required": [
          "costPortfolioCcy",
          "costTradeCcy",
          "instrumentUid",
          "realisedTotal",
          "realisedTradeCcy",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that this gain or loss is associated with."
          },
          "units": {
            "type": "number",
            "description": "The number of units of the associated instrument against which the gain or loss has been realised.",
            "format": "double"
          },
          "purchaseTradeDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally purchased.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchaseSettlementDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally settled.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "The purchase price of each unit associated with this gain or loss.",
            "format": "double",
            "nullable": true
          },
          "costTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTotal": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedMarket": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          }
        },
        "additionalProperties": false
      },
      "ReconciliationBreak": {
        "required": [
          "differenceCost",
          "differenceUnits",
          "instrumentProperties",
          "instrumentUid",
          "leftCost",
          "leftUnits",
          "rightCost",
          "rightUnits",
          "subHoldingKeys"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "Unique instrument identifier"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Any other properties that comprise the Sub-Holding Key"
          },
          "leftUnits": {
            "type": "number",
            "description": "Units from the left hand side",
            "format": "double"
          },
          "rightUnits": {
            "type": "number",
            "description": "Units from the right hand side",
            "format": "double"
          },
          "differenceUnits": {
            "type": "number",
            "description": "Difference in units",
            "format": "double"
          },
          "leftCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "rightCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "differenceCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "instrumentProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Additional features relating to the instrument"
          }
        },
        "additionalProperties": false,
        "description": "A reconciliation break"
      },
      "ReconciliationLeftRightAddressKeyPair": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "Address key defined by the lhs aggregation"
          },
          "right": {
            "type": "string",
            "description": "Address key defined by the rhs aggregation"
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituent": {
        "required": [
          "currency",
          "instrumentUid",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "currency": {
            "type": "string",
            "description": ""
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties associated with the constituent",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "floatingWeight": {
            "type": "number",
            "description": "",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituentRequest": {
        "required": [
          "instrumentIdentifiers",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioWeightType": {
        "enum": [
          "Static",
          "Floating",
          "Periodical"
        ],
        "type": "string"
      },
      "RelatedEntity": {
        "required": [
          "displayName",
          "entityId",
          "entityType"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string",
            "description": "The type of the entity."
          },
          "entityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the other related entity in the relationship. It contains 'scope' and 'code' as keys for identifiers of a Portfolio or Portfolio Group, or 'idTypeScope', 'idTypeCode', 'code' as keys for identifiers of a Person or Legal Entity."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the entity."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties of the entity. This field is empty until further notice.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about the other related entity in the relationship"
      },
      "Relation": {
        "required": [
          "relatedEntityId",
          "relationDefinitionId",
          "traversalDescription",
          "traversalDirection"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "relatedEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "traversalDirection": {
            "type": "string"
          },
          "traversalDescription": {
            "type": "string"
          },
          "effectiveFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Relation between a requested entity with the stated entity as RelationedEntityId"
      },
      "RelationDefinition": {
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityDomain": {
            "type": "string",
            "description": "The entity domain of the source entity object.",
            "nullable": true
          },
          "targetEntityDomain": {
            "type": "string",
            "description": "The entity domain of the target entity object.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the relation.",
            "nullable": true
          },
          "outwardDescription": {
            "type": "string",
            "description": "The description to relate source entity object and target entity object",
            "nullable": true
          },
          "inwardDescription": {
            "type": "string",
            "description": "The description to relate target entity object and source entity object",
            "nullable": true
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relations can change over time, allowed values are \"Perpetual\" and \"TimeVariant\"",
            "nullable": true
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \"Property\" and \"Collection\", defaults to \"Collection\" if not specified.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Relationship": {
        "required": [
          "relatedEntity",
          "relationshipDefinitionId",
          "traversalDescription",
          "traversalDirection"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "relatedEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "traversalDirection": {
            "type": "string",
            "description": "Direction of relationship betwen the requested entity and related entity. This can be 'In' or 'Out'. Read more about relationships traversal direction in LUSID Knowledge Base here https://support.lusid.com/relationships."
          },
          "traversalDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship's traversal direction. If 'TraversalDirection' is 'Out', this description would be 'OutwardDescription' from the associated relationship definition. If 'TraversalDirection' is 'In', this description would be 'InwardDescription' from the associated relationship definition."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the relationship is valid.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Relationship between a requested entity with the stated entity as RelatedEntityId"
      },
      "RelationshipDefinition": {
        "required": [
          "displayName",
          "inwardDescription",
          "lifeTime",
          "outwardDescription",
          "relationshipCardinality",
          "relationshipDefinitionId",
          "sourceEntityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityType": {
            "type": "string",
            "description": "The entity type of the source entity object."
          },
          "targetEntityType": {
            "type": "string",
            "description": "The entity type of the target entity object."
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relationship."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object"
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object"
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relationships can change over time."
          },
          "relationshipCardinality": {
            "type": "string",
            "description": "Describes the cardinality of the relationship between source entity and target entity."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Repo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "accrualBasis",
              "collateralValue",
              "domCcy",
              "instrumentType",
              "margin",
              "maturityDate",
              "repoRate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency of the instrument."
              },
              "accrualBasis": {
                "type": "string",
                "description": "For calculation of interest, the accrual basis to be used.\r\nSupported string (enumeration) values are: [Actual360, Act360, MoneyMarket, Actual365, Act365, Thirty360, ThirtyU360, Bond, ThirtyE360, EuroBond, ActualActual, ActAct, ActActIsda, ActActIsma, ActActIcma, OneOne, Act364, Act365F, Act365L, Act365_25, Act252, Bus252, NL360, NL365, ActActAFB, Act365Cad, ThirtyActIsda, Thirty365Isda, ThirtyEActIsda, ThirtyE360Isda, ThirtyE365Isda, ThirtyU360EOM]."
              },
              "collateralValue": {
                "type": "number",
                "description": "The full value of the collateral in domCcy, before any margin (or haircut) is applied.",
                "format": "double"
              },
              "margin": {
                "type": "number",
                "description": "The margin (or haircut) applied to the collateral, this should be a number between 0 and 1, i.e. for a 5% haircut this should be 0.05.",
                "format": "double"
              },
              "repoRate": {
                "type": "number",
                "description": "the rate at which interest is to be accrue and be paid upon redemption of the collateral at maturity.",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL Repo Instrument; Lusid-ibor internal representation of a Repo instrument\r\nThe repurchase (repo) agreement involves the transfer of instruments (the collateral) from the seller to the buyer.\r\nOwnership is transferred and returns to the seller upon completion of the contract. If the collateral depreciates sharply, it is possible that additional\r\nmargin/collateral will be required depending upon the terms of the agreement. The buyer agrees not to sell the securities unless there is some condition of default\r\nin the repo contract. \r\nRepurchase of the securities is at their value plus the agreed upon fixed repo rate.\r\nOn the start date, the buyer receives the collateral and pays Cash.\r\nOn the maturity date, the buyer returns the collateral and receives Cash."
      },
      "ResourceId": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The scope used to identify an entity"
          },
          "code": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The code used to identify an entity"
          }
        },
        "additionalProperties": false,
        "description": "Identifiers of an entity"
      },
      "ResourceListOfA2BDataRecord": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/A2BDataRecord"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfA2BMovementRecord": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/A2BMovementRecord"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAccessControlledResource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledResource"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAccessMetadataValueOf": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessMetadataValue"
              }
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAggregatedReturn": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregatedReturn"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAggregationQuery": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationQuery"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAllocation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfBlock": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Block"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfCalendarDate": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarDate"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfChange": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfConstituentsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstituentsAdjustmentHeader"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfCorporateAction": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateAction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfDataType": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataType"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfExecution": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Execution"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfFeeCalculationDetails": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeCalculationDetails"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetCdsFlowConventionsResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCdsFlowConventionsResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetCounterpartyAgreementResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCounterpartyAgreementResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetCreditSupportAnnexResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCreditSupportAnnexResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetFlowConventionsResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetFlowConventionsResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetIndexConventionResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetIndexConventionResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetRecipeResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetRecipeResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfHoldingsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingsAdjustmentHeader"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfInstrumentCashFlow": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentCashFlow"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfInstrumentIdTypeDescriptor": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentIdTypeDescriptor"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfIUnitDefinitionDto": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfOrder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfOrderInstruction": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderInstruction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPackage": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Package"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfParticipation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPerformanceReturn": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReturn"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPlacement": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Placement"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolio": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Portfolio"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioCashFlow": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioCashFlow"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioCashLadder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioCashLadder"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioGroup": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroup"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfProcessedCommand": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessedCommand"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfProperty": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPropertyDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPropertyInterval": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInterval"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfQuote": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfQuoteAccessMetadataRule": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteAccessMetadataRule"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfReconciliationBreak": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationBreak"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfRelation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfRelationship": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfScopeDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfString": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfTransaction": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfValueType": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueType"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResultDataKeyRule": {
        "required": [
          "dataScope",
          "documentCode",
          "resourceKey",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "resourceKey": {
            "type": "string",
            "description": "The result data key that identifies the address pattern that this is a rule for"
          },
          "supplier": {
            "type": "string",
            "description": "the result resource supplier (where the data comes from)"
          },
          "dataScope": {
            "type": "string",
            "description": "which is the scope in which the data should be found"
          },
          "documentCode": {
            "type": "string",
            "description": "document code that defines which document is desired"
          },
          "quoteInterval": {
            "type": "string",
            "description": "Shorthand for the time interval used to select result data. This must be a dot-separated string\r\n            specifying a start and end date, for example '5D.0D' to look back 5 days from today (0 days ago).",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt predicate specification.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A rule that describes how we resolve (unit) result data."
      },
      "ResultDataSchema": {
        "type": "object",
        "properties": {
          "nodeValueSchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "propertySchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Schema": {
        "type": "object",
        "properties": {
          "entity": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScopeDefinition": {
        "required": [
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The unique identifier for the scope."
          }
        },
        "additionalProperties": false,
        "description": "A list of scopes."
      },
      "SetPersonIdentifiersRequest": {
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Identifiers to set for a Person. Identifiers not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPersonPropertiesRequest": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            },
            "description": "Properties to set for a Person. All time-variant properties must have same EffectiveFrom date. Properties not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SideConfigurationData": {
        "required": [
          "amount",
          "currency",
          "rate",
          "security",
          "side",
          "units"
        ],
        "type": "object",
        "properties": {
          "side": {
            "type": "string",
            "description": "The side's label."
          },
          "security": {
            "type": "string",
            "description": "The security, or instrument."
          },
          "currency": {
            "type": "string",
            "description": "The currency."
          },
          "rate": {
            "type": "string",
            "description": "The rate."
          },
          "units": {
            "type": "string",
            "description": "The units."
          },
          "amount": {
            "type": "string",
            "description": "The amount."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configuration needed to define a side. Sides are referenced by Label. Beyond that, other properties\r\ncan be used to reference either transaction fields, or transaction properties."
      },
      "SideConfigurationDataRequest": {
        "required": [
          "amount",
          "currency",
          "rate",
          "security",
          "side",
          "units"
        ],
        "type": "object",
        "properties": {
          "side": {
            "type": "string",
            "description": "The side's label."
          },
          "security": {
            "type": "string",
            "description": "The security, or instrument."
          },
          "currency": {
            "type": "string",
            "description": "The currency."
          },
          "rate": {
            "type": "string",
            "description": "The rate."
          },
          "units": {
            "type": "string",
            "description": "The units."
          },
          "amount": {
            "type": "string",
            "description": "The amount."
          }
        },
        "additionalProperties": false,
        "description": "Configuration needed to define a side. Sides are referenced by Label. Beyond that, other properties\r\ncan be used to reference either transaction fields, or transaction properties."
      },
      "SimpleInstrument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "assetClass",
              "domCcy",
              "instrumentType",
              "simpleInstrumentType"
            ],
            "type": "object",
            "properties": {
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\nFor the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\nConstant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "domCcy": {
                "type": "string",
                "description": "The domestic currency"
              },
              "assetClass": {
                "enum": [
                  "InterestRates",
                  "FX",
                  "Inflation",
                  "Equities",
                  "Credit",
                  "Commodities",
                  "Unknown"
                ],
                "type": "string",
                "description": "The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Unknown"
              },
              "fgnCcys": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The set of foreign currencies, if any (optional)",
                "nullable": true
              },
              "simpleInstrumentType": {
                "type": "string",
                "description": "The Instrument type of the simple instrument"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "IL SimpleInstrument Instrument; Lusid-ibor internal representation of a SimpleInstrument instrument"
      },
      "SortOrder": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "Stream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "writeTimeout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StructuredMarketData": {
        "required": [
          "document",
          "documentFormat"
        ],
        "type": "object",
        "properties": {
          "documentFormat": {
            "type": "string",
            "description": "The format of the accompanying document."
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the document format; MAJOR.MINOR.PATCH",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name or description for the document",
            "nullable": true
          },
          "document": {
            "type": "string",
            "description": "The document that will be stored (or retrieved) and which describes a structured market data entity such as a credit or interest rate curve"
          }
        },
        "additionalProperties": false,
        "description": "An item of structured market data that is to be inserted into Lusid. This will typically be a Json or Xml document that\r\ncontains a set of market quotes (tradables) that can be used to construct a composite view of a market property such as the\r\ninterest rates over time; commonly referred to as an interest rate, projection or discount curve. Other examples include\r\nvolatility surfaces and credit spread curves."
      },
      "StructuredMarketDataId": {
        "required": [
          "provider"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the structured market data, e.g. 'DataScope', 'LUSID', 'ISDA' etc."
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the structured market data, e.g. a bank or financial institution.",
            "nullable": true
          },
          "lineage": {
            "type": "string",
            "description": "Description of the structured market data's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt or cut label that this item of structured market data is/was updated/inserted with.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "marketElementType": {
            "type": "string",
            "description": "The type of the market element that the market entity represents, e.g. a vol surface or credit curve",
            "nullable": true
          },
          "marketAsset": {
            "type": "string",
            "description": "The name of the market entity that the document represents",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely describes an item of structured market data such as an interest rate curve or volatility surface."
      },
      "StructuredResultData": {
        "required": [
          "document",
          "documentFormat"
        ],
        "type": "object",
        "properties": {
          "documentFormat": {
            "type": "string",
            "description": "The format of the accompanying document."
          },
          "version": {
            "type": "string",
            "description": "The semantic version of the document format; MAJOR.MINOR.PATCH",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name or description for the document",
            "nullable": true
          },
          "document": {
            "type": "string",
            "description": "The document that will be stored (or retrieved) and which describes a unit result data entity such as a set of prices or yields"
          },
          "dataMapKey": {
            "$ref": "#/components/schemas/DataMapKey"
          }
        },
        "additionalProperties": false,
        "description": "An item of structured result data that is to be inserted into Lusid. This will typically be a Json or Xml document that\r\ncontains a set of result data appropriate to a specific entity such as an instrument or potentially an index."
      },
      "StructuredResultDataId": {
        "required": [
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The platform or vendor that provided the structured result data, e.g. 'client'. This is primarily of interest when data could have been sourced from multiple sources"
          },
          "code": {
            "type": "string",
            "description": "The identifier for the entity that this id describes. It could be an index, instrument or other form of structured data",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt or cut label that this item of structured market data is/was updated/inserted with.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "resultType": {
            "type": "string",
            "description": "An identifier that denotes the class of data that the id points to. This is not the same as the format, but a more generic identifier such as 'risk result', 'cashflow', 'index' or similar.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely describes an item of structured result data such as the risk to an interest curve or a set of yields or analytics on an index."
      },
      "TargetTaxLot": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to specify holdings target amounts at the tax-lot level"
      },
      "TargetTaxLotRequest": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TermDeposit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          {
            "required": [
              "contractSize",
              "flowConvention",
              "instrumentType",
              "maturityDate",
              "rate",
              "startDate"
            ],
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "The start date of the instrument. This is normally synonymous with the trade-date.",
                "format": "date-time"
              },
              "maturityDate": {
                "type": "string",
                "description": "The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.\r\n            For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as\r\n            Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date",
                "format": "date-time"
              },
              "contractSize": {
                "type": "number",
                "description": "With an OTC we have the problem of multiple ways of booking a quantity.\r\n            e.g.\r\n            If buying a swap do you have a holding of size 1 of 100,000,000 notional swap or a holding of 100,000,000 size of 1 notional swap, or any combination that multiplies to 10^8.\r\n            When you get for a price for a 'unit swap' what do you mean? The definition must be consistent across all quotes. This includes bonds which have a face value and\r\n            fx-forwards which often trade in standard contract sizes. When we look up a price, and there are no units, we are assuming it is a price for a contract size of 1.\r\n            The logical effect of this is that\r\n            instrument clean price = contract size * quoted unit price\r\n            holding clean price    = holding quantity * instrument clean price = holding quantity * contract size * quoted unit price\r\n            In calculating accrued interest the same should hold.\r\n            NB: The real problem is that people store \"prices\" without complete units. Everything should really be \"x ccy for n units\". Where the n is implicit the above has to hold.",
                "format": "double"
              },
              "flowConvention": {
                "$ref": "#/components/schemas/FlowConventions"
              },
              "rate": {
                "type": "number",
                "description": "The fixed rate for the term deposit. Specified as a decimal, e.g 0.03 is meant to be 3% interest",
                "format": "double"
              },
              "instrumentType": {
                "enum": [
                  "QuotedSecurity",
                  "InterestRateSwap",
                  "FxForward",
                  "Future",
                  "ExoticInstrument",
                  "FxOption",
                  "CreditDefaultSwap",
                  "InterestRateSwaption",
                  "Bond",
                  "EquityOption",
                  "FixedLeg",
                  "FloatingLeg",
                  "BespokeCashFlowsLeg",
                  "Unknown",
                  "TermDeposit",
                  "ContractForDifference",
                  "EquitySwap",
                  "CashPerpetual",
                  "CashSettled",
                  "CdsIndex",
                  "Basket",
                  "FundingLeg",
                  "CrossCurrencySwap",
                  "FxSwap",
                  "ForwardRateAgreement",
                  "SimpleInstrument",
                  "Repo"
                ],
                "type": "string",
                "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo"
              }
            }
          }
        ],
        "description": "Lusid internal representation of a term deposit"
      },
      "Tolerance": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The numerical value of the property.",
            "format": "double"
          },
          "type": {
            "enum": [
              "Absolute",
              "Relative"
            ],
            "type": "string",
            "description": "The available values are: Absolute, Relative"
          }
        },
        "additionalProperties": false
      },
      "ToleranceEnum": {
        "enum": [
          "Absolute",
          "Relative"
        ],
        "type": "string"
      },
      "Transaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "A list of transactions."
      },
      "TransactionConfigurationData": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction codes that map to this specific transaction model"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementData"
            },
            "description": "Movement data for the transaction code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties attached to the underlying holding.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationDataRequest": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction codes that map to this specific transaction model"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementDataRequest"
            },
            "description": "Movement data for the transaction code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties attached to the underlying holding.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementData": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl"
          },
          "side": {
            "type": "string",
            "description": "The movement side"
          },
          "direction": {
            "type": "integer",
            "description": "The movement direction",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The properties associated with the underlying Movement.",
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMapping"
            },
            "description": "This allows you to map a transaction property to a property on the underlying holding.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementDataRequest": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl"
          },
          "side": {
            "type": "string",
            "description": "The movement side"
          },
          "direction": {
            "type": "integer",
            "description": "The movement direction",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The properties associated with the underlying Movement.",
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMappingRequest"
            },
            "description": "This allows you to map a transaction property to a property on the underlying holding.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationTypeAlias": {
        "required": [
          "description",
          "transactionClass",
          "transactionGroup",
          "transactionRoles",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The transaction type"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the transaction"
          },
          "transactionClass": {
            "type": "string",
            "description": "Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut"
          },
          "transactionGroup": {
            "type": "string",
            "description": "Group is a set of codes related to a source, or sync"
          },
          "transactionRoles": {
            "enum": [
              "None",
              "LongLonger",
              "LongShorter",
              "ShortShorter",
              "Shorter",
              "ShortLonger",
              "Longer",
              "AllRoles"
            ],
            "type": "string",
            "description": ". The available values are: None, LongLonger, LongShorter, ShortShorter, Shorter, ShortLonger, Longer, AllRoles"
          }
        },
        "additionalProperties": false
      },
      "TransactionPrice": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "enum": [
              "Price",
              "Yield",
              "Spread"
            ],
            "type": "string",
            "description": "The available values are: Price, Yield, Spread"
          }
        },
        "additionalProperties": false
      },
      "TransactionPriceType": {
        "enum": [
          "Price",
          "Yield",
          "Spread"
        ],
        "type": "string"
      },
      "TransactionPropertyMapping": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "Uniquely identifies the property definiton and consists of a Domain, Scope and Code."
          },
          "mapFrom": {
            "type": "string",
            "description": "The Property Key of the Property to map from.",
            "nullable": true
          },
          "setTo": {
            "type": "object",
            "additionalProperties": false,
            "description": "A pointer to the Property being mapped from.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionPropertyMappingRequest": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "Uniquely identifies the property definition and consists of a Domain, Scope and Code."
          },
          "mapFrom": {
            "type": "string",
            "description": "The Property Key of the Property to map from.",
            "nullable": true
          },
          "setTo": {
            "type": "object",
            "additionalProperties": false,
            "description": "A pointer to the Property being mapped from.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionQueryMode": {
        "enum": [
          "TradeDate",
          "SettleDate"
        ],
        "type": "string"
      },
      "TransactionQueryParameters": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to build the transactions.",
            "format": "dateorcutlabel"
          },
          "endDate": {
            "type": "string",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.",
            "format": "dateorcutlabel"
          },
          "queryMode": {
            "enum": [
              "TradeDate",
              "SettleDate"
            ],
            "type": "string",
            "description": "The date to compare against the upper and lower bounds for the effective datetime or cut label. Defaults to 'TradeDate' if not specified. The available values are: TradeDate, SettleDate"
          },
          "showCancelledTransactions": {
            "type": "boolean",
            "description": "Option to specify whether or not to include cancelled transactions in the output. Defaults to False if not specified."
          }
        },
        "additionalProperties": false
      },
      "TransactionRequest": {
        "required": [
          "instrumentIdentifiers",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier of the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction, for example 'Buy' or 'Sell'. The transaction type must have been pre-configured using the System Configuration API. If not, this operation will succeed but you are not able to calculate holdings for the portfolio that include this transaction."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "dateorcutlabel"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "dateorcutlabel"
          },
          "units": {
            "type": "number",
            "description": "The number of units of the transacted instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by TotalConsideration.Currency). For example, if the transaction currency is USD and the settlement currency is GBP, this would be the appropriate USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "A list of unique transaction properties and associated values to store for the transaction. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionRoles": {
        "enum": [
          "None",
          "LongLonger",
          "LongShorter",
          "ShortShorter",
          "Shorter",
          "ShortLonger",
          "Longer",
          "AllRoles"
        ],
        "type": "string"
      },
      "TransactionSetConfigurationData": {
        "required": [
          "transactionConfigs"
        ],
        "type": "object",
        "properties": {
          "transactionConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationData"
            },
            "description": "Collection of transaction type models"
          },
          "sideDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SideConfigurationData"
            },
            "description": "Collection of side definitions",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of the data required to configure transaction types.."
      },
      "TransactionSetConfigurationDataRequest": {
        "required": [
          "transactionConfigRequests"
        ],
        "type": "object",
        "properties": {
          "transactionConfigRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
            },
            "description": "Collection of transaction type models"
          },
          "sideConfigRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SideConfigurationDataRequest"
            },
            "description": "Collection of side definition requests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A bundle of requests to configure a set of transaction types."
      },
      "TransactionStatus": {
        "enum": [
          "Active",
          "Amended",
          "Cancelled"
        ],
        "type": "string"
      },
      "TranslateInstrumentDefinitionsRequest": {
        "required": [
          "dialect",
          "instruments"
        ],
        "type": "object",
        "properties": {
          "instruments": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LusidInstrument"
            },
            "description": "The collection of instruments to translate.\r\n            \r\nEach instrument definition should be keyed by a unique correlation id. This id is ephemeral\r\nand is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.\r\n            \r\nAny instrument that is not already in the LUSID dialect should be given as an ExoticInstrument."
          },
          "dialect": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z]*$",
            "type": "string",
            "description": "The target dialect that the given instruments should be translated to."
          }
        },
        "additionalProperties": false,
        "description": "A collection of instruments to translate, along with the target dialect to translate into."
      },
      "TranslateInstrumentDefinitionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LusidInstrument"
            },
            "description": "The instruments which have been successfully translated.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The instruments that could not be translated along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A response from a request to translate a collection of instruments to a given target dialect."
      },
      "TypedResourceId": {
        "required": [
          "code",
          "idTypeCode",
          "idTypeScope"
        ],
        "type": "object",
        "properties": {
          "idTypeScope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope of the identifier's (property) definition."
          },
          "idTypeCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of identifier's (property) definition. This describes what the identifier represents.\r\nFor a Person this might be a username, nationalInsuranceNumber or similar.\r\nFor a Legal Entity, this might be a registeredCompanyNumber or LEI."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The value of the user-defined identifier in respect of the entity."
          }
        },
        "additionalProperties": false,
        "description": "Represents the user-defined identifier for a Legal Entity or Person.\r\nUsers can define their own, scoped identifiers for Legal Entities and Persons using identifier properties.\r\nFor example,\r\nwhen used to identify a Person, the identifier defined by Person/myScope/username would be represented as\r\n {\r\n   \"idTypeScope\": \"myScope\",\r\n   \"idTypeCode\": \"username\",\r\n   \"code\": \"john_doe_001\"\r\n }"
      },
      "UnitSchema": {
        "enum": [
          "NoUnits",
          "Basic",
          "Iso4217Currency"
        ],
        "type": "string"
      },
      "UnmatchedHoldingMethod": {
        "enum": [
          "PositionToZero",
          "KeepTheSame"
        ],
        "type": "string",
        "description": "When holdings adjustments are specified for a single effective date,\r\nany holdings for the portfolio not included in the adjustments are\r\nadjusted according to this value."
      },
      "UpdateCalendarRequest": {
        "required": [
          "properties",
          "sourceProvider",
          "weekendMask"
        ],
        "type": "object",
        "properties": {
          "weekendMask": {
            "$ref": "#/components/schemas/WeekendMask"
          },
          "sourceProvider": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        },
        "additionalProperties": false
      },
      "UpdateCutLabelDefinitionRequest": {
        "required": [
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "UpdateDataTypeRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the data type.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the data type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateInstrumentIdentifierRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The allowable instrument identifier to update, insert or remove e.g. 'Figi'."
          },
          "value": {
            "type": "string",
            "description": "The new value of the allowable instrument identifier. If unspecified the identifier will be removed from the instrument.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier should be updated, inserted or removed. Defaults to the current LUSID system datetime if not specified.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioGroupRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePropertyDefinitionRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateRelationshipDefinitionRequest": {
        "required": [
          "displayName",
          "inwardDescription",
          "outwardDescription"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relation."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          }
        },
        "additionalProperties": false
      },
      "UpsertCdsFlowConventionsRequest": {
        "type": "object",
        "properties": {
          "cdsFlowConventions": {
            "$ref": "#/components/schemas/CdsFlowConventions"
          }
        },
        "additionalProperties": false,
        "description": "CDS Flow convention that is to be stored in the convention data store.\r\nOnly one of these must be present."
      },
      "UpsertComplexMarketDataRequest": {
        "required": [
          "marketData",
          "marketDataId"
        ],
        "type": "object",
        "properties": {
          "marketDataId": {
            "$ref": "#/components/schemas/ComplexMarketDataId"
          },
          "marketData": {
            "$ref": "#/components/schemas/ComplexMarketData"
          }
        },
        "additionalProperties": false,
        "description": "The details of the complex market data item to upsert into Lusid."
      },
      "UpsertCorporateActionRequest": {
        "required": [
          "announcementDate",
          "corporateActionCode",
          "exDate",
          "paymentDate",
          "recordDate",
          "transitions"
        ],
        "type": "object",
        "properties": {
          "corporateActionCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "",
            "nullable": true
          },
          "announcementDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "exDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "recordDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "UpsertCorporateActionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CorporateAction"
            },
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertCounterpartyAgreementRequest": {
        "required": [
          "counterpartyAgreement"
        ],
        "type": "object",
        "properties": {
          "counterpartyAgreement": {
            "$ref": "#/components/schemas/CounterpartyAgreement"
          }
        },
        "additionalProperties": false,
        "description": "Counterparty Agreement that is to be stored in the convention data store.\r\nThere must be only one of these present."
      },
      "UpsertCreditSupportAnnexRequest": {
        "type": "object",
        "properties": {
          "creditSupportAnnex": {
            "$ref": "#/components/schemas/CreditSupportAnnex"
          }
        },
        "additionalProperties": false,
        "description": "Credit Support Annex information. The interaction in terms of margining requirements between a set of trades for a given counterparty."
      },
      "UpsertFlowConventionsRequest": {
        "type": "object",
        "properties": {
          "flowConventions": {
            "$ref": "#/components/schemas/FlowConventions"
          }
        },
        "additionalProperties": false,
        "description": "Flow conventions that is to be stored in the convention data store.\r\nOnly one of these must be present."
      },
      "UpsertIndexConventionRequest": {
        "type": "object",
        "properties": {
          "indexConvention": {
            "$ref": "#/components/schemas/IndexConvention"
          }
        },
        "additionalProperties": false,
        "description": "Index convention that is to be stored in the convention data store.\r\nOnly one of these must be present."
      },
      "UpsertInstrumentPropertiesResponse": {
        "required": [
          "asAtDate"
        ],
        "type": "object",
        "properties": {
          "asAtDate": {
            "type": "string",
            "description": "The as-at datetime at which properties were created or updated.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertyRequest": {
        "required": [
          "identifier",
          "identifierType"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The unique identifier type to search for the instrument, for example 'Figi'."
          },
          "identifier": {
            "type": "string",
            "description": "A value of that type to identify the instrument to upsert properties for, for example 'BBG000BLNNV0'."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of instrument properties and associated values to store for the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instruments which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The instruments that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntityAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a Legal Entity that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntityRequest": {
        "required": [
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The identifiers the legal entity will be upserted with.The provided keys should be idTypeScope, idTypeCode, code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the Legal Entity"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          },
          "counterpartyRiskInformation": {
            "$ref": "#/components/schemas/CounterpartyRiskInformation"
          }
        },
        "additionalProperties": false,
        "description": "Request to create or update an legal entity"
      },
      "UpsertPersonAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a Person that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPersonRequest": {
        "required": [
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The identifiers the person will be upserted with.The provided keys should be idTypeScope, idTypeCode, code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            },
            "description": "A set of properties associated to the Person. There can be multiple properties associated with a property key.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The display name of the Person"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Person",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioAccessMetadataRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to portfolios that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioGroupAccessMetadataRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to portfolio groups that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioTransactionsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertQuoteAccessMetadataRuleRequest": {
        "required": [
          "id",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/QuoteAccessMetadataRuleId"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessMetadataValue"
              }
            },
            "description": "The access control metadata to assign to quotes that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "UpsertQuoteRequest": {
        "required": [
          "quoteId"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details of the quote including its unique identifier, value and lineage."
      },
      "UpsertQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertRecipeRequest": {
        "type": "object",
        "properties": {
          "configurationRecipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "configurationRecipeSnippet": {
            "$ref": "#/components/schemas/ConfigurationRecipeSnippet"
          }
        },
        "additionalProperties": false,
        "description": "A recipe or recipe snippet that is to be stored in the recipe structured data store.\r\nOnly one of these must be present."
      },
      "UpsertReferencePortfolioConstituentsRequest": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The first date from which the weights will apply",
            "format": "dateorcutlabel"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituentRequest"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          }
        },
        "additionalProperties": false
      },
      "UpsertReferencePortfolioConstituentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertReturnsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/ErrorDetail"
              }
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting Returns"
      },
      "UpsertSingleStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value that was successfully retrieved.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting structured data document"
      },
      "UpsertStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting structured data document"
      },
      "UpsertStructuredMarketDataRequest": {
        "required": [
          "marketData",
          "marketDataId"
        ],
        "type": "object",
        "properties": {
          "marketDataId": {
            "$ref": "#/components/schemas/StructuredMarketDataId"
          },
          "marketData": {
            "$ref": "#/components/schemas/StructuredMarketData"
          }
        },
        "additionalProperties": false,
        "description": "The details of the structured market data item to upsert into Lusid."
      },
      "UpsertStructuredResultDataRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/StructuredResultDataId"
          },
          "data": {
            "$ref": "#/components/schemas/StructuredResultData"
          }
        },
        "additionalProperties": false,
        "description": "The details of the structured unit result data item to upsert into Lusid."
      },
      "UpsertTransactionPropertiesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The unique id of the user that issued the command."
      },
      "ValuationRequest": {
        "required": [
          "metrics"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications to calculate or retrieve during the valuation and present in the results. For example:\r\nAggregateSpec('Holding/default/PV','Sum') for returning the PV (present value) of holdings\r\nAggregateSpec('Holding/default/Units','Sum') for returning the units of holidays\r\nAggregateSpec('Instrument/default/LusidInstrumentId','Value') for returning the Lusid Instrument identifier"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCurrency": {
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "equipWithSubtotals": {
            "type": "boolean",
            "description": "Flag directing the Valuation call to populate the results with subtotals of aggregates."
          },
          "portfolioEntityIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioEntityId"
            },
            "description": "The set of portfolio or portfolio group identifier(s) that is to be valued.",
            "nullable": true
          },
          "valuationSchedule": {
            "$ref": "#/components/schemas/ValuationSchedule"
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of a valuation"
      },
      "ValuationSchedule": {
        "required": [
          "effectiveAt"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.\r\nIn this case, valuation is calculated for the portfolio(s) for each business day in the given range.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The market data time, i.e. the time to run the valuation request effective of.",
            "format": "dateorcutlabel"
          },
          "tenor": {
            "type": "string",
            "description": "Tenor, e.g \"1D\", \"1M\" to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.",
            "nullable": true
          },
          "rollConvention": {
            "type": "string",
            "description": "When Tenor is given and is not equal to \"1D\", there may be cases where \"date + tenor\" land on non-business days around month end.\r\nIn that case, the RollConvention, e.g. modified following \"MF\" would be applied to determine the next GBD.",
            "nullable": true
          },
          "holidayCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The holiday calendar(s) that should be used in determining the date schedule.\r\nHoliday calendar(s) are supplied by their names, for example, \"CoppClarke\". \r\nNote that when the calendars are not available (e.g. when the user has insufficient permissions), \r\na recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.",
            "nullable": true
          },
          "valuationDateTimes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon."
      },
      "ValuationsReconciliationRequest": {
        "required": [
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/ValuationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/ValuationRequest"
          },
          "leftToRightMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationLeftRightAddressKeyPair"
            },
            "description": "The mapping from property keys requested by left aggregation to property keys on right hand side",
            "nullable": true
          },
          "preserveKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "List of keys to preserve (from rhs) in the diff. Used in conjunction with filtering/grouping",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification for the reconciliation request. Left and Right hand sides are constructed. Each consists of a valuation of a portfolio\r\nusing an aggregation request. The results of this can then be compared to each other. The difference, which is effectively a risk based\r\ndifference allows comparison of the effects of changing a recipe, valuation date, or (though it may or may not make logical sense) a portfolio.\r\nFor instance, one might look at the difference in risk caused by the addition of transaction to a portfolio, or through changing the valuation\r\nmethodology or system."
      },
      "ValueType": {
        "enum": [
          "String",
          "Int",
          "Decimal",
          "DateTime",
          "Boolean",
          "Map",
          "List",
          "PropertyArray",
          "Percentage",
          "Code",
          "Id",
          "Uri",
          "CurrencyAndAmount",
          "TradePrice",
          "Currency",
          "MetricValue",
          "ResourceId",
          "ResultValue",
          "CutLocalTime",
          "DateOrCutLabel"
        ],
        "type": "string",
        "description": "A list of types, familiar to the Ui, that define the expected input or output types on a piece of data"
      },
      "VendorLibrary": {
        "enum": [
          "Lusid",
          "RefinitivQps",
          "RefinitivTracsWeb",
          "VolMaster",
          "IsdaCds"
        ],
        "type": "string"
      },
      "VendorModelRule": {
        "required": [
          "instrumentType",
          "modelName",
          "parameters",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "supplier": {
            "enum": [
              "Lusid",
              "RefinitivQps",
              "RefinitivTracsWeb",
              "VolMaster",
              "IsdaCds"
            ],
            "type": "string",
            "description": "The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds"
          },
          "modelName": {
            "type": "string",
            "description": "The vendor library model name"
          },
          "instrumentType": {
            "type": "string",
            "description": "The vendor library instrument type"
          },
          "parameters": {
            "type": "string",
            "description": "The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.\r\nNote that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is\r\nbetter understood."
          }
        },
        "additionalProperties": false,
        "description": "A rule that identifies the set of preferences to be used for a given library, model and instrument type.\r\nThere can be many such rules, though only the first found for a given combination would be used."
      },
      "Version": {
        "required": [
          "asAtDate",
          "effectiveFrom"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.",
            "format": "date-time"
          },
          "asAtDate": {
            "type": "string",
            "description": "The asAt datetime at which the data was committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The version metadata."
      },
      "VersionedResourceListOfOutputTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutputTransaction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfPortfolioHolding": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioHolding"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionSummaryDto": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "nullable": true
          },
          "buildVersion": {
            "type": "string",
            "nullable": true
          },
          "excelVersion": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WeekendMask": {
        "required": [
          "days",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "timeZone": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WeightedInstrument": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "The quantity of the instrument that is owned.",
            "format": "double"
          },
          "holdingIdentifier": {
            "type": "string",
            "description": "Identifier for the instrument.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case.\r\n\r\nIn an inlined aggregation request if this is wanted to identify a line item, it can be specified in the set of aggregation keys given on the aggregation\r\nrequest that accompanies the set of weighted instruments.",
            "nullable": true
          },
          "instrument": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false,
        "description": "Specification for a holding or quantity of (weight for) an instrument on a given date."
      },
      "WeightedInstruments": {
        "required": [
          "instruments"
        ],
        "type": "object",
        "properties": {
          "instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedInstrument"
            },
            "description": "The instruments that are held in the set."
          }
        },
        "additionalProperties": false,
        "description": "Class that models a set of instruments of which each has some quantity and can be identified by a unique label."
      },
      "YieldCurveData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComplexMarketData"
          },
          {
            "required": [
              "baseDate",
              "instruments",
              "marketDataType",
              "quotes"
            ],
            "type": "object",
            "properties": {
              "baseDate": {
                "type": "string",
                "description": "Base date",
                "format": "date-time"
              },
              "instruments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LusidInstrument"
                },
                "description": "The set of instruments that define the curve."
              },
              "quotes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketQuote"
                },
                "description": "The market quotes corresponding to the the instruments used to define the curve"
              },
              "marketDataType": {
                "enum": [
                  "DiscountFactorCurveData",
                  "EquityVolSurfaceData",
                  "FxVolSurfaceData",
                  "IrVolCubeData",
                  "OpaqueMarketData",
                  "YieldCurveData"
                ],
                "type": "string",
                "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData"
              }
            }
          }
        ],
        "description": "Market data for a yield curve,  represented by a list of instruments and corresponding market quotes"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://lusid.okta.com/oauth2/default/v1/authorize",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {}
  ],
  "tags": [
    {
      "name": "Aggregation",
      "description": "Methods for accessing aggregated data"
    },
    {
      "name": "Allocations",
      "description": "Methods for interacting with Allocations. This is experimental functionality, with limited documentation presently. An Allocation represents the redistribution of market Executions against an originating Order. Allocations are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Application Metadata",
      "description": "Methods for querying application metadata"
    },
    {
      "name": "Blocks",
      "description": "A Block represents a set of orders for the same instrument, intended to record for example a trader'saggregation of outstanding orders at a given time. Blocks are treated monotemporally; any updates are effectiveat the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Calendars",
      "description": ""
    },
    {
      "name": "Complex Market Data",
      "description": "Methods for the storage and retrieval of complex market data documents."
    },
    {
      "name": "Configuration Recipe",
      "description": "Methods for the storage and retrieval of Configuration Recipe documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-lusid-recipe-and-how-is-it-used."
    },
    {
      "name": "Conventions",
      "description": "Methods for the storage and retrieval of flow conventions."
    },
    {
      "name": "Corporate Action Sources",
      "description": "Methods for storage and retrieval of Corporate Action Sources"
    },
    {
      "name": "Counterparties",
      "description": "Methods for the storage and retrieval of counterparty related information such as Counterparty Agreements, Credit Support Annexes and Netting Set data."
    },
    {
      "name": "CustomEntities",
      "description": ""
    },
    {
      "name": "CustomEntityDefinitions",
      "description": ""
    },
    {
      "name": "Cut Label Definitions",
      "description": "Methods for interacting with Cut Label Definitions"
    },
    {
      "name": "Data Types",
      "description": "Methods for administering data types"
    },
    {
      "name": "Derived Transaction Portfolios",
      "description": "A derived transaction portfolio inherits all the transactions from a parent transaction portfolio (though it can also contain its own transactions), enabling different modelling strategies to be devised, among other operations. Note that a derived transaction portfolio is a type of portfolio, so endpoints in the TransactionPortfolios API and the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01853."
    },
    {
      "name": "Entities",
      "description": "Methods for querying data about entities"
    },
    {
      "name": "Executions",
      "description": "Methods for interacting with Executions. This is experimental functionality, with limited documentation presently. An Execution represents a market's fill of a street order. Executions are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "FeesAndCommissions",
      "description": "Methods for storage and retrieval of Fees and Commissions rules"
    },
    {
      "name": "Instruments",
      "description": "An instrument represents a financial asset that an investor owns or has exposure to. Each transaction should be booked against an instrument stored in the LUSID instrument master. For more information, see https://support.lusid.com/knowledgebase/article/KA-01857."
    },
    {
      "name": "Legal Entities",
      "description": "Endpoints for interacting with Legal Entities."
    },
    {
      "name": "Login",
      "description": "Methods to handle login"
    },
    {
      "name": "OrderInstructions",
      "description": "Methods for handling order instructions."
    },
    {
      "name": "Orders",
      "description": "Methods for interacting with Orders. This is experimental functionality, with limited documentation presently. An Order represents an investor's instruction to a broker or similar agent to but or sell a single security. Orders are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Packages",
      "description": "A structure used to describe the structure of an order or orders that make up a non-trivial trade."
    },
    {
      "name": "Participations",
      "description": "A Participation records an order's participation in a specific placement. Participations are treatedmonotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive(or forward) changes."
    },
    {
      "name": "Persons",
      "description": "Endpoints for interacting with Persons entities."
    },
    {
      "name": "Placements",
      "description": "Methods for interacting with Placements. This is experimental functionality, with limited documentation presently. A Placement represents a trader's placement of a street order with a specific entity in the market to buy or sell a single security. Placements are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Portfolio Groups",
      "description": "Methods for interacting with Portfolios Groups. Read more about Portfolio Groups in the LUSID Knowledge Base here https://support.lusid.com/how-do-you-group-and-aggregate-portfolios."
    },
    {
      "name": "Portfolios",
      "description": "A portfolio is a store of economic information. There are three types: transaction, reference and derived transaction. Note that these endpoints can also be called when interacting with the respective Transaction Portfolios API,  Reference Portfolio API and Derived Transaction Portfolios API. For more information, see https://support.lusid.com/knowledgebase/article/KA-01848."
    },
    {
      "name": "Property Definitions",
      "description": "Methods for interacting with Properties. Read more about Properties in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-property."
    },
    {
      "name": "Quotes",
      "description": "Methods for the storage and retrieval of Quotes. Read more about Quotes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-quote."
    },
    {
      "name": "Reconciliations",
      "description": "Endpoints for performing reconciliations"
    },
    {
      "name": "Reference Portfolio",
      "description": "A reference portfolio stores a weighted set of instruments rather than transactions, enabling entities such as indices to be represented. Note that a reference portfolio is a type of portfolio, so endpoints in the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01852."
    },
    {
      "name": "Relation Definitions",
      "description": "Methods for interacting with Relations Definitions."
    },
    {
      "name": "Relations",
      "description": "Methods for interacting with Relations."
    },
    {
      "name": "Relationship Definitions",
      "description": "Methods for interacting with Relationship Definitions. Read more about Relationship in the LUSID Knowledge Base at https://support.lusid.com/relationships."
    },
    {
      "name": "Relationships",
      "description": "Methods for interacting with Relationships. Read more about Relationships in the LUSID Knowledge Base here https://support.lusid.com/relationships."
    },
    {
      "name": "Schemas",
      "description": "Methods for retrieval of Schemas"
    },
    {
      "name": "Scopes",
      "description": "Methods for interacting with Scopes. Read more about Scopes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-scope-in-lusid-and-how-is-it-used."
    },
    {
      "name": "Search",
      "description": "Methods providing Search capability."
    },
    {
      "name": "Structured Market Data",
      "description": "Methods for the storage and retrieval of structured market data documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/knowledgebase/article/KA-01894."
    },
    {
      "name": "Structured Result Data",
      "description": "The structured result store persists information that might be useful to help value a portfolio or analyse performance or risk, but that is not traded like quote data (which can be stored in the quote store). For more information, see https://support.lusid.com/knowledgebase/article/KA-01893."
    },
    {
      "name": "System Configuration",
      "description": "LUSID is a transaction-based system. Every transaction in a particular instrument should belong to a transaction type in order that it might contribute to measuring your holding (position) in that instrument. Transaction types are a fundamental building block of LUSID, and care should be exercised when changing them. For more information, see https://support.lusid.com/knowledgebase/article/KA-01872/."
    },
    {
      "name": "Transaction Portfolios",
      "description": "A transaction portfolio stores transactions and calculates instrument holdings and cash balances, enabling valuation, analytic, profit & loss, risk assessment and other operations to be performed. Note that a transaction portfolio is a type of portfolio, so endpoints in the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01851."
    },
    {
      "name": "Translation",
      "description": "Methods for translating between dialects."
    }
  ],
  "x-tagGroups": {
    "name": "API",
    "tags": [
      "Aggregation",
      "Allocations",
      "Application Metadata",
      "Blocks",
      "Calendars",
      "Complex Market Data",
      "Configuration Recipe",
      "Conventions",
      "Corporate Action Sources",
      "Counterparties",
      "CustomEntities",
      "CustomEntityDefinitions",
      "Cut Label Definitions",
      "Data Types",
      "Derived Transaction Portfolios",
      "Entities",
      "Executions",
      "FeesAndCommissions",
      "Instruments",
      "Legal Entities",
      "Login",
      "OrderInstructions",
      "Orders",
      "Packages",
      "Participations",
      "Persons",
      "Placements",
      "Portfolio Groups",
      "Portfolios",
      "Property Definitions",
      "Quotes",
      "Reconciliations",
      "Reference Portfolio",
      "Relation Definitions",
      "Relations",
      "Relationship Definitions",
      "Relationships",
      "Schemas",
      "Scopes",
      "Search",
      "Structured Market Data",
      "Structured Result Data",
      "System Configuration",
      "Transaction Portfolios",
      "Translation"
    ]
  }
}
